0:[[["",{"children":["(main)",{"children":["demo",{"children":[["demo","maps/map-pies","c"],{"children":["__PAGE__?{\"demo\":[\"maps\",\"map-pies\"]}",{}]}]}]},"$undefined","$undefined",true]}],"$L1",[[],["$L2",null]]]]
3:HL["/_next/static/css/b2e0b431b62130d6.css",{"as":"style"}]
4:HL["/_next/static/css/621fda290094023d.css",{"as":"style"}]
5:I{"id":"9631","chunks":["272:static/chunks/webpack-0d6f19481046fd3b.js","509:static/chunks/54cd117c-0de4f9b009705f45.js","111:static/chunks/111-7e9f7f1a63948fbf.js"],"name":"","async":false}
6:I{"id":"2781","chunks":["272:static/chunks/webpack-0d6f19481046fd3b.js","509:static/chunks/54cd117c-0de4f9b009705f45.js","111:static/chunks/111-7e9f7f1a63948fbf.js"],"name":"","async":false}
7:I{"id":"8801","chunks":["3:static/chunks/3-1f903c812f794e06.js","572:static/chunks/572-dd6907329ad47b59.js","801:static/chunks/801-8b17748d0b5c88f7.js","191:static/chunks/app/(shop)/layout-630ea7c8823d9902.js"],"name":"","async":false}
9:I{"id":"7028","chunks":["3:static/chunks/3-1f903c812f794e06.js","572:static/chunks/572-dd6907329ad47b59.js","801:static/chunks/801-8b17748d0b5c88f7.js","191:static/chunks/app/(shop)/layout-630ea7c8823d9902.js"],"name":"","async":false}
1:["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":[["$","html",null,{"lang":"en","children":[null,["$","body",null,{"children":[["$","$L7",null,{}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children","demo","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children","demo","children",["demo","maps/map-pies","c"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"demo\":[\"maps\",\"map-pies\"]}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/621fda290094023d.css","precedence":"next"}]]}],"segment":["demo","maps/map-pies","c"]},"styles":[]}],"segment":"demo"},"styles":[]}],["$","footer",null,{"className":"page-footer font-small bkgDarkestGray","role":"contentinfo","children":["$","div",null,{"id":"footer","className":"container","children":[["$","div",null,{"className":"row footer-menu","children":[["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"快捷链接"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/product","children":"产品"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/demos","children":"例子"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/download","children":"下载试用"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://shop.highsoft.com","target":"_blank","children":"获取授权"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"开发者资源"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/docs","children":"使用文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://api.highcharts.com","target":"_blank","children":"API 文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/changelog","children":"更新日志"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/roadmap","children":"发展规划"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"服务与支持"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://www.highcharts.com/forum/","target":"_blank","children":"技术社区"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://stackoverflow.com/tags/highcharts","target":"_blank","children":"Stack Overflow"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://github.com/highcharts/highcharts","target":"_blank","children":"Github"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/support","children":"服务与支持"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/chart-chooser","children":"图表选择器"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"网站相关"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"http://localhost:3000/privacy","target":"_blank","children":"隐私政策"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://shop.highcharts.com/license","target":"_blank","children":"标准协议文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/sitemap.xml","children":"Sitemap"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://www.highcharts.com/blog/article/accessibility-statement/","target":"_blank","children":"Accessibility Statement"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"关于"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/about","children":"我们的故事"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"hhttps://www.highcharts.com/people","children":"团队"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/about/contact","children":"联系方式"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://wp-assets.highcharts.com/www-highcharts-com/blog/wp-content/uploads/2021/08/16115648/Codeofconduct.pdf","target":"_blank","children":"行为准则"}]}]]}]]}]]}],["$","div",null,{"className":"row pb30 desktop-version","children":[["$","div",null,{"className":"col py-1 pr-0 pb-3 text-left highchartsRights small-text","children":["$","div",null,{"children":[" © ",2023," Highcharts",["$","span",null,{"className":"sep","children":" 保留所有权利，"}],["$","a",null,{"href":"https://beian.miit.gov.cn/","target":"_blank","children":"浙ICP备16004892号-1"}],"，由 ",["$","a",null,{"href":"/about/parter","children":"简数科技"}]," 提供服务。"]}]}],["$","div",null,{"className":"col py-1 pl-0 pb-3 text-right","children":[["$","h2",null,{"className":"h2-text-hidden","children":"Social"}],["$","ul",null,{"className":"footerSocialsList footerSocials","children":[["$","li",null,{"children":["$","a",null,{"className":"socials","href":"https://github.com/highcharts/highcharts","aria-label":"Highcharts Github","children":["$","i",null,{"className":"fa fa-github txtWhite","aria-hidden":"true"}]}]}],["$","li",null,{"children":["$","a",null,{"className":"socials","href":"https://stackoverflow.com/questions/tagged/highcharts","aria-label":"Highcharts Stack Overflow","children":["$","i",null,{"className":"fa fa-stack-overflow txtWhite","aria-hidden":"true"}]}]}]]}]]}]]}]]}]}],["$","script",null,{"src":"/js/common.js"}]]}]]}],null],"segment":"(main)"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b2e0b431b62130d6.css","precedence":"next"}]]}]
2:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
a:I{"id":"8344","chunks":["664:static/chunks/664-c875da42fcb6e6b4.js","572:static/chunks/572-dd6907329ad47b59.js","568:static/chunks/568-071733b70a3731c3.js","392:static/chunks/app/(main)/demo/[...demo]/page-ba9b772b3f788084.js"],"name":"","async":false}
8:["$","$La",null,{"props":{"demos":[{"name":"General","code":"general","children":[{"code":"all-maps","name":"Overview","img":"https://www.highcharts.com/demo/images/samples/maps/demo/all-maps/thumbnail.png"},{"code":"animated-mapline","name":"Animated lines on a world map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/animated-mapline/thumbnail.png"},{"code":"audio-map","name":"Audio map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/audio-map/thumbnail.png"},{"code":"map-trajectory","name":"Audio map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-trajectory/thumbnail.png"},{"code":"topojson-projection","name":"Built in projection","img":"https://www.highcharts.com/demo/images/samples/maps/demo/topojson-projection/thumbnail.png"},{"code":"category-map","name":"Categorized areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/category-map/thumbnail.png"},{"code":"color-axis","name":"Color axis and data labels","img":"https://www.highcharts.com/demo/images/samples/maps/demo/color-axis/thumbnail.png"},{"code":"data-class-two-ranges","name":"Data classes and popup","img":"https://www.highcharts.com/demo/images/samples/maps/demo/data-class-two-ranges/thumbnail.png"},{"code":"us-counties","name":"Detailed map, US counties","img":"https://www.highcharts.com/demo/images/samples/maps/demo/us-counties/thumbnail.png"},{"code":"distribution","name":"Distribution map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/distribution/thumbnail.png"},{"code":"flowmap","name":"Flowmap","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap/thumbnail.png"},{"code":"flowmap-world-cup","name":"Flowmap Flight Routes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap-world-cup/thumbnail.png"},{"code":"mapline-mappoint","name":"GeoJSON with rivers and cities","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mapline-mappoint/thumbnail.png"},{"code":"all-areas-as-null","name":"Highlighted areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/all-areas-as-null/thumbnail.png"},{"code":"lightning","name":"Lightning Map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/lightning/thumbnail.png"},{"code":"marker-clusters","name":"Map with marker clusters","img":"https://www.highcharts.com/demo/images/samples/maps/demo/marker-clusters/thumbnail.png"},{"code":"map-pies","name":"Map with overlaid pie charts","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-pies/thumbnail.png","parent":"general","data":{"js":"(async () => {\n    const mapData = await fetch(\n        'https://code.highcharts.com/mapdata/countries/us/us-all.topo.json'\n    ).then(response => response.json());\n\n    const data = [\n            // state, demVotes, repVotes, libVotes, grnVotes, sumVotes, winner, offset config for pies\n            ['Alabama', 729547, 1318255, 44467, 9391, 2101660, -1],\n            ['Alaska', 116454, 163387, 18725, 5735, 304301, -1],\n            ['Arizona', 1161167, 1252401, 106327, 34345, 2554240, -1],\n            ['Arkansas', 380494, 684782, 29829, 9473, 1104578, -1],\n            ['California', 8577206, 4390272, 467370, 271047, 13705895, 1, { lon: -1, drawConnector: false }],\n            ['Colorado', 1338870, 1202484, 144121, 38437, 2723912, 1],\n            ['Connecticut', 897572, 673215, 48676, 22841, 1642304, 1, { lat: -1.5, lon: 1 }],\n            ['Delaware', 235603, 185127, 14757, 6103, 441590, 1, { lat: -1.3, lon: 2 }],\n            ['District of Columbia', 282830, 12723, 4906, 4258, 304717, 1, { lat: -2, lon: 2 }],\n            ['Florida', 4504975, 4617886, 207043, 64399, 9394303, -1],\n            ['Georgia', 1877963, 2089104, 125306, 0, 4092373, -1],\n            ['Hawaii', 266891, 128847, 15954, 12737, 424429, 1, { lat: -0.5, lon: 0.5, drawConnector: false }],\n            ['Idaho', 189765, 409055, 28331, 8496, 635647, -1],\n            ['Illinois', 2977498, 2118179, 208682, 74112, 5378471, 1],\n            ['Indiana', 1039126, 1557286, 133993, 7841, 2738246, -1],\n            ['Iowa', 653669, 800983, 59186, 11479, 1525317, -1],\n            ['Kansas', 427005, 671018, 55406, 23506, 1176935, -1],\n            ['Kentucky', 628854, 1202971, 53752, 13913, 1899490, -1],\n            ['Louisiana', 780154, 1178638, 37978, 14031, 2010801, -1],\n            ['Maine', 352156, 332418, 37578, 13995, 736147, 1],\n            ['Maryland', 1502820, 878615, 78225, 33380, 2493040, 1, { lon: 0.6, drawConnector: false }],\n            ['Massachusetts', 1995196, 1090893, 138018, 47661, 3271768, 1, { lon: 3 }],\n            ['Michigan', 2268839, 2279543, 172136, 51463, 4771981, -1],\n            ['Minnesota', 1367716, 1322951, 112972, 36985, 2840624, 1, { lon: -1, drawConnector: false }],\n            ['Mississippi', 462127, 678284, 14411, 3595, 1158417, -1],\n            ['Missouri', 1054889, 1585753, 96404, 25086, 2762132, -1],\n            ['Montana', 174281, 273879, 28036, 7868, 484064, -1],\n            ['Nebraska', 273185, 485372, 38746, 8337, 805640, -1],\n            ['Nevada', 539260, 512058, 37384, 0, 1088702, 1],\n            ['New Hampshire', 348526, 345790, 30694, 6465, 731475, 1],\n            ['New Jersey', 1967444, 1509688, 72143, 37131, 3586406, 1, { lat: -1, lon: 1.2 }],\n            ['New Mexico', 380923, 316134, 74544, 9797, 781398, 1],\n            ['New York', 4145376, 2638135, 162273, 100110, 7045894, 1],\n            ['North Carolina', 2169496, 2345235, 130021, 1038, 4645790, -1],\n            ['North Dakota', 93758, 216794, 21434, 378, 332364, -1],\n            ['Ohio', 2320596, 2776683, 174266, 44310, 5315855, -1],\n            ['Oklahoma', 420375, 949136, 83481, 0, 1452992, -1],\n            ['Oregon', 991580, 774080, 93875, 49247, 1908782, 1],\n            ['Pennsylvania', 2874136, 2945302, 144826, 49334, 6013598, -1],\n            ['Rhode Island', 227062, 166454, 14700, 6171, 414387, 1, { lat: -0.7, lon: 1.7 }],\n            ['South Carolina', 855373, 1155389, 49204, 13034, 2073000, -1],\n            ['South Dakota', 117442, 227701, 20845, 0, 365988, -1],\n            ['Tennessee', 868853, 1519926, 70286, 15952, 2475017, -1],\n            ['Texas', 3877868, 4685047, 283492, 71558, 8917965, -1],\n            ['Utah', 222858, 375006, 39608, 7695, 645167, -1],\n            ['Vermont', 178573, 95369, 10078, 6758, 290778, 1, { lat: 2 }],\n            ['Virginia', 1981473, 1769443, 118274, 27638, 3896828, 1],\n            ['Washington', 1727840, 1210370, 160356, 57571, 3156137, 1],\n            ['West Virginia', 187519, 486304, 22958, 8016, 704797, -1],\n            ['Wisconsin', 1382947, 1407028, 106470, 31016, 2927461, -1],\n            ['Wyoming', 55973, 174419, 13287, 2515, 246194, -1]\n        ],\n        demColor = 'rgba(74,131,240,0.80)',\n        repColor = 'rgba(220,71,71,0.80)',\n        libColor = 'rgba(240,190,50,0.80)',\n        grnColor = 'rgba(90,200,90,0.80)';\n\n\n    // Compute max votes to find relative sizes of bubbles\n    const maxVotes = data.reduce((max, row) => Math.max(max, row[5]), 0);\n\n    // Build the chart\n    const chart = Highcharts.mapChart('container', {\n\n        chart: {\n            animation: false // Disable animation, especially for zooming\n        },\n\n        accessibility: {\n            description: 'Complex map demo showing voting results for US states, where each state has a pie chart overlaid showing the vote distribution.'\n        },\n\n        colorAxis: {\n            dataClasses: [{\n                from: -1,\n                to: 0,\n                color: 'rgba(244,91,91,0.5)',\n                name: 'Republican'\n            }, {\n                from: 0,\n                to: 1,\n                color: 'rgba(124,181,236,0.5)',\n                name: 'Democrat'\n            }, {\n                from: 2,\n                to: 3,\n                name: 'Libertarian',\n                color: libColor\n            }, {\n                from: 3,\n                to: 4,\n                name: 'Green',\n                color: grnColor\n            }]\n        },\n\n        mapNavigation: {\n            enabled: true\n        },\n\n        title: {\n            text: 'USA 2016 Presidential Election Results',\n            align: 'left'\n        },\n\n        // Default options for the pies\n        plotOptions: {\n            pie: {\n                borderColor: 'rgba(255,255,255,0.4)',\n                borderWidth: 1,\n                clip: true,\n                dataLabels: {\n                    enabled: false\n                },\n                states: {\n                    hover: {\n                        halo: {\n                            size: 5\n                        }\n                    }\n                },\n                tooltip: {\n                    headerFormat: ''\n                }\n            }\n        },\n\n        series: [{\n            mapData,\n            data: data,\n            name: 'States',\n            accessibility: {\n                point: {\n                    descriptionFormatter(point) {\n                        const party = point.value > 0 ? 'democrat' : 'republican';\n                        return point.name + ', ' + party + '. Total votes: ' + point.sumVotes +\n                            '. Democrat votes: ' + point.demVotes + '. Republican votes: ' + point.repVotes +\n                            '. Libertarian votes: ' + point.libVotes + '. Green votes: ' + point.grnVotes + '.';\n                    }\n                }\n            },\n            borderColor: '#FFF',\n            joinBy: ['name', 'id'],\n            keys: ['id', 'demVotes', 'repVotes', 'libVotes', 'grnVotes',\n                'sumVotes', 'value', 'pieOffset'],\n            tooltip: {\n                headerFormat: '',\n                pointFormatter() {\n                    const hoverVotes = this.hoverVotes; // Used by pie only\n                    return '<b>' + this.id + ' votes</b><br/>' +\n                        [\n                            ['Democrats', this.demVotes, demColor],\n                            ['Republicans', this.repVotes, repColor],\n                            ['Libertarians', this.libVotes, libColor],\n                            ['Green', this.grnVotes, grnColor]\n                        ]\n                            .sort((a, b) => b[1] - a[1]) // Sort tooltip by most votes\n                            .map(line => '<span style=\"color:' + line[2] +\n                                // Colorized bullet\n                                '\">\\u25CF</span> ' +\n                                // Party and votes\n                                (line[0] === hoverVotes ? '<b>' : '') +\n                                line[0] + ': ' +\n                                Highcharts.numberFormat(line[1], 0) +\n                                (line[0] === hoverVotes ? '</b>' : '') +\n                                '<br/>')\n                            .join('') +\n                        '<hr/>Total: ' + Highcharts.numberFormat(this.sumVotes, 0);\n                }\n            }\n        }, {\n            name: 'Connectors',\n            type: 'mapline',\n            color: 'rgba(130, 130, 130, 0.5)',\n            zIndex: 5,\n            showInLegend: false,\n            enableMouseTracking: false,\n            accessibility: {\n                enabled: false\n            }\n        }]\n    });\n\n    // When clicking legend items, also toggle connectors and pies\n    chart.legend.allItems.forEach(item => {\n        const setVisible = item.setVisible;\n\n        item.setVisible = function () {\n            const item = this;\n\n            setVisible.call(item);\n\n            chart.series[0].points.forEach(point => {\n                if (\n                    chart.colorAxis[0].dataClasses[point.dataClass].name ===\n                    item.name\n                ) {\n                    // Find this state's pie and set visibility\n                    Highcharts.find(chart.series, function (item) {\n                        return item.name === point.id;\n                    }).setVisible(item.visible, false);\n\n                    // Do the same for the connector point if it exists\n                    const connector = Highcharts.find(\n                        chart.series[2].points,\n                        item => item.name === point.id\n                    );\n\n                    if (connector) {\n                        connector.setVisible(item.visible, false);\n                    }\n                }\n            });\n            chart.redraw();\n        };\n    });\n\n    // Add the pies after chart load, optionally with offset and connectors\n    chart.series[0].points.forEach(state => {\n        // Add the pie for this state\n        chart.addSeries({\n            type: 'pie',\n            name: state.id,\n            zIndex: 6, // Keep pies above connector lines\n            minSize: 15,\n            maxSize: 55,\n            onPoint: {\n                id: state.id,\n                z: (() => {\n                    const mapView = chart.mapView,\n                        zoomFactor = mapView.zoom / mapView.minZoom;\n\n                    return Math.max(\n                        chart.chartWidth / 45 * zoomFactor, // Min size\n                        chart.chartWidth /\n                        11 * zoomFactor * state.sumVotes / maxVotes\n                    );\n                })()\n            },\n            states: {\n                inactive: {\n                    enabled: false\n                }\n            },\n            accessibility: {\n                enabled: false\n            },\n            tooltip: {\n                // Use the state tooltip for the pies as well\n                pointFormatter() {\n                    return state.series.tooltipOptions.pointFormatter.call({\n                        id: state.id,\n                        hoverVotes: this.name,\n                        demVotes: state.demVotes,\n                        repVotes: state.repVotes,\n                        libVotes: state.libVotes,\n                        grnVotes: state.grnVotes,\n                        sumVotes: state.sumVotes\n                    });\n                }\n            },\n            data: [{\n                name: 'Democrats',\n                y: state.demVotes,\n                color: demColor\n            }, {\n                name: 'Republicans',\n                y: state.repVotes,\n                color: repColor\n            }, {\n                name: 'Libertarians',\n                y: state.libVotes,\n                color: libColor\n            }, {\n                name: 'Green',\n                y: state.grnVotes,\n                color: grnColor\n            }]\n        }, false);\n    });\n\n    // Only redraw once all pies and connectors have been added\n    chart.redraw();\n})();\n","css":"#container {\n    min-width: 320px;\n    max-width: 800px;\n    height: 500px;\n    margin: 1em auto;\n}\n.highcharts-menu hr {margin: unset}","html":"\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Proj4            from 'https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js';\nimport Highcharts       from 'highcharts';\nimport Map              from 'highcharts/modules/map';\nimport SeriesOnPoint    from 'highcharts/modules/series-on-point';\nimport Exporting        from 'highcharts/modules/exporting';\nimport OfflineExporting from 'highcharts/modules/offline-exporting';\nimport Accessibility    from 'highcharts/modules/accessibility';\n\n// 初始化模块\nProj4(Highcharts);\nMap(Highcharts);\nSeriesOnPoint(Highcharts);\nExporting(Highcharts);\nOfflineExporting(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js","https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/maps/11.0.0/modules/map.js","https://code.highcharts.com/maps/11.0.0/modules/series-on-point.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/maps/11.0.0/modules/accessibility.js"]},"pre":"marker-clusters","next":"pattern-fill-map"},{"code":"pattern-fill-map","name":"Map with pattern fills","img":"https://www.highcharts.com/demo/images/samples/maps/demo/pattern-fill-map/thumbnail.png"},{"code":"flowmap-migration","name":"Migration Flowmap","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap-migration/thumbnail.png"},{"code":"data-class-ranges","name":"Multiple data classes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/data-class-ranges/thumbnail.png"},{"code":"flight-routes","name":"Simple flight routes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flight-routes/thumbnail.png"},{"code":"us-data-labels","name":"Small US with data labels","img":"https://www.highcharts.com/demo/images/samples/maps/demo/us-data-labels/thumbnail.png"},{"code":"spider-map","name":"Spider map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/spider-map/thumbnail.png"}]},{"name":"Dynamic","code":"dynamic","children":[{"code":"eu-capitals-temp","name":"Current temperatures in capitals of Europe","img":"https://www.highcharts.com/demo/images/samples/maps/demo/eu-capitals-temp/thumbnail.png"},{"code":"map-drilldown","name":"Drilldown","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-drilldown/thumbnail.png"},{"code":"tooltip","name":"Fixed tooltip with HTML","img":"https://www.highcharts.com/demo/images/samples/maps/demo/tooltip/thumbnail.png"},{"code":"map-drilldown-preloaded","name":"Map drilldown with preloaded data","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-drilldown-preloaded/thumbnail.png"},{"code":"projection-explorer","name":"Projection Explorer","img":"https://www.highcharts.com/demo/images/samples/maps/demo/projection-explorer/thumbnail.png"},{"code":"rich-info","name":"Rich information on click","img":"https://www.highcharts.com/demo/images/samples/maps/demo/rich-info/thumbnail.png"},{"code":"doubleclickzoomto","name":"Zoom to area by double click","img":"https://www.highcharts.com/demo/images/samples/maps/demo/doubleclickzoomto/thumbnail.png"}]},{"name":"Input formats","code":"input-formats","children":[{"code":"latlon-advanced","name":"Advanced lat/long","img":"https://www.highcharts.com/demo/images/samples/maps/demo/latlon-advanced/thumbnail.png"},{"code":"geojson","name":"GeoJSON areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geojson/thumbnail.png"},{"code":"mappoint-latlon","name":"Map point with lat/long","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-latlon/thumbnail.png"}]},{"name":"Series types","code":"series-types","children":[{"code":"mappoint-datalabels-mapmarker","name":"Data labels as map markers","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-datalabels-mapmarker/thumbnail.png"},{"code":"geoheatmap-orthographic","name":"Density of Cities in the World","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-orthographic/thumbnail.png"},{"code":"geoheatmap-europe","name":"European Train Stations Near Airports","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-europe/thumbnail.png"},{"code":"geoheatmap-equalearth","name":"GeoHeatmap Aerosol Particle Radius In September 2016","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-equalearth/thumbnail.png"},{"code":"heatmap","name":"Heat map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/heatmap/thumbnail.png"},{"code":"map-bubble","name":"Map bubble","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-bubble/thumbnail.png"},{"code":"mappoint-mapmarker","name":"Map markers","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-mapmarker/thumbnail.png"},{"code":"circlemap-africa","name":"Tile map, circles","img":"https://www.highcharts.com/demo/images/samples/maps/demo/circlemap-africa/thumbnail.png"},{"code":"diamondmap","name":"Tile map, diamonds","img":"https://www.highcharts.com/demo/images/samples/maps/demo/diamondmap/thumbnail.png"},{"code":"honeycomb-usa","name":"Tile map, honeycomb","img":"https://www.highcharts.com/demo/images/samples/maps/demo/honeycomb-usa/thumbnail.png"}]}],"demo":"map-pies","current":{"code":"map-pies","name":"Map with overlaid pie charts","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-pies/thumbnail.png","parent":"general","data":{"js":"(async () => {\n    const mapData = await fetch(\n        'https://code.highcharts.com/mapdata/countries/us/us-all.topo.json'\n    ).then(response => response.json());\n\n    const data = [\n            // state, demVotes, repVotes, libVotes, grnVotes, sumVotes, winner, offset config for pies\n            ['Alabama', 729547, 1318255, 44467, 9391, 2101660, -1],\n            ['Alaska', 116454, 163387, 18725, 5735, 304301, -1],\n            ['Arizona', 1161167, 1252401, 106327, 34345, 2554240, -1],\n            ['Arkansas', 380494, 684782, 29829, 9473, 1104578, -1],\n            ['California', 8577206, 4390272, 467370, 271047, 13705895, 1, { lon: -1, drawConnector: false }],\n            ['Colorado', 1338870, 1202484, 144121, 38437, 2723912, 1],\n            ['Connecticut', 897572, 673215, 48676, 22841, 1642304, 1, { lat: -1.5, lon: 1 }],\n            ['Delaware', 235603, 185127, 14757, 6103, 441590, 1, { lat: -1.3, lon: 2 }],\n            ['District of Columbia', 282830, 12723, 4906, 4258, 304717, 1, { lat: -2, lon: 2 }],\n            ['Florida', 4504975, 4617886, 207043, 64399, 9394303, -1],\n            ['Georgia', 1877963, 2089104, 125306, 0, 4092373, -1],\n            ['Hawaii', 266891, 128847, 15954, 12737, 424429, 1, { lat: -0.5, lon: 0.5, drawConnector: false }],\n            ['Idaho', 189765, 409055, 28331, 8496, 635647, -1],\n            ['Illinois', 2977498, 2118179, 208682, 74112, 5378471, 1],\n            ['Indiana', 1039126, 1557286, 133993, 7841, 2738246, -1],\n            ['Iowa', 653669, 800983, 59186, 11479, 1525317, -1],\n            ['Kansas', 427005, 671018, 55406, 23506, 1176935, -1],\n            ['Kentucky', 628854, 1202971, 53752, 13913, 1899490, -1],\n            ['Louisiana', 780154, 1178638, 37978, 14031, 2010801, -1],\n            ['Maine', 352156, 332418, 37578, 13995, 736147, 1],\n            ['Maryland', 1502820, 878615, 78225, 33380, 2493040, 1, { lon: 0.6, drawConnector: false }],\n            ['Massachusetts', 1995196, 1090893, 138018, 47661, 3271768, 1, { lon: 3 }],\n            ['Michigan', 2268839, 2279543, 172136, 51463, 4771981, -1],\n            ['Minnesota', 1367716, 1322951, 112972, 36985, 2840624, 1, { lon: -1, drawConnector: false }],\n            ['Mississippi', 462127, 678284, 14411, 3595, 1158417, -1],\n            ['Missouri', 1054889, 1585753, 96404, 25086, 2762132, -1],\n            ['Montana', 174281, 273879, 28036, 7868, 484064, -1],\n            ['Nebraska', 273185, 485372, 38746, 8337, 805640, -1],\n            ['Nevada', 539260, 512058, 37384, 0, 1088702, 1],\n            ['New Hampshire', 348526, 345790, 30694, 6465, 731475, 1],\n            ['New Jersey', 1967444, 1509688, 72143, 37131, 3586406, 1, { lat: -1, lon: 1.2 }],\n            ['New Mexico', 380923, 316134, 74544, 9797, 781398, 1],\n            ['New York', 4145376, 2638135, 162273, 100110, 7045894, 1],\n            ['North Carolina', 2169496, 2345235, 130021, 1038, 4645790, -1],\n            ['North Dakota', 93758, 216794, 21434, 378, 332364, -1],\n            ['Ohio', 2320596, 2776683, 174266, 44310, 5315855, -1],\n            ['Oklahoma', 420375, 949136, 83481, 0, 1452992, -1],\n            ['Oregon', 991580, 774080, 93875, 49247, 1908782, 1],\n            ['Pennsylvania', 2874136, 2945302, 144826, 49334, 6013598, -1],\n            ['Rhode Island', 227062, 166454, 14700, 6171, 414387, 1, { lat: -0.7, lon: 1.7 }],\n            ['South Carolina', 855373, 1155389, 49204, 13034, 2073000, -1],\n            ['South Dakota', 117442, 227701, 20845, 0, 365988, -1],\n            ['Tennessee', 868853, 1519926, 70286, 15952, 2475017, -1],\n            ['Texas', 3877868, 4685047, 283492, 71558, 8917965, -1],\n            ['Utah', 222858, 375006, 39608, 7695, 645167, -1],\n            ['Vermont', 178573, 95369, 10078, 6758, 290778, 1, { lat: 2 }],\n            ['Virginia', 1981473, 1769443, 118274, 27638, 3896828, 1],\n            ['Washington', 1727840, 1210370, 160356, 57571, 3156137, 1],\n            ['West Virginia', 187519, 486304, 22958, 8016, 704797, -1],\n            ['Wisconsin', 1382947, 1407028, 106470, 31016, 2927461, -1],\n            ['Wyoming', 55973, 174419, 13287, 2515, 246194, -1]\n        ],\n        demColor = 'rgba(74,131,240,0.80)',\n        repColor = 'rgba(220,71,71,0.80)',\n        libColor = 'rgba(240,190,50,0.80)',\n        grnColor = 'rgba(90,200,90,0.80)';\n\n\n    // Compute max votes to find relative sizes of bubbles\n    const maxVotes = data.reduce((max, row) => Math.max(max, row[5]), 0);\n\n    // Build the chart\n    const chart = Highcharts.mapChart('container', {\n\n        chart: {\n            animation: false // Disable animation, especially for zooming\n        },\n\n        accessibility: {\n            description: 'Complex map demo showing voting results for US states, where each state has a pie chart overlaid showing the vote distribution.'\n        },\n\n        colorAxis: {\n            dataClasses: [{\n                from: -1,\n                to: 0,\n                color: 'rgba(244,91,91,0.5)',\n                name: 'Republican'\n            }, {\n                from: 0,\n                to: 1,\n                color: 'rgba(124,181,236,0.5)',\n                name: 'Democrat'\n            }, {\n                from: 2,\n                to: 3,\n                name: 'Libertarian',\n                color: libColor\n            }, {\n                from: 3,\n                to: 4,\n                name: 'Green',\n                color: grnColor\n            }]\n        },\n\n        mapNavigation: {\n            enabled: true\n        },\n\n        title: {\n            text: 'USA 2016 Presidential Election Results',\n            align: 'left'\n        },\n\n        // Default options for the pies\n        plotOptions: {\n            pie: {\n                borderColor: 'rgba(255,255,255,0.4)',\n                borderWidth: 1,\n                clip: true,\n                dataLabels: {\n                    enabled: false\n                },\n                states: {\n                    hover: {\n                        halo: {\n                            size: 5\n                        }\n                    }\n                },\n                tooltip: {\n                    headerFormat: ''\n                }\n            }\n        },\n\n        series: [{\n            mapData,\n            data: data,\n            name: 'States',\n            accessibility: {\n                point: {\n                    descriptionFormatter(point) {\n                        const party = point.value > 0 ? 'democrat' : 'republican';\n                        return point.name + ', ' + party + '. Total votes: ' + point.sumVotes +\n                            '. Democrat votes: ' + point.demVotes + '. Republican votes: ' + point.repVotes +\n                            '. Libertarian votes: ' + point.libVotes + '. Green votes: ' + point.grnVotes + '.';\n                    }\n                }\n            },\n            borderColor: '#FFF',\n            joinBy: ['name', 'id'],\n            keys: ['id', 'demVotes', 'repVotes', 'libVotes', 'grnVotes',\n                'sumVotes', 'value', 'pieOffset'],\n            tooltip: {\n                headerFormat: '',\n                pointFormatter() {\n                    const hoverVotes = this.hoverVotes; // Used by pie only\n                    return '<b>' + this.id + ' votes</b><br/>' +\n                        [\n                            ['Democrats', this.demVotes, demColor],\n                            ['Republicans', this.repVotes, repColor],\n                            ['Libertarians', this.libVotes, libColor],\n                            ['Green', this.grnVotes, grnColor]\n                        ]\n                            .sort((a, b) => b[1] - a[1]) // Sort tooltip by most votes\n                            .map(line => '<span style=\"color:' + line[2] +\n                                // Colorized bullet\n                                '\">\\u25CF</span> ' +\n                                // Party and votes\n                                (line[0] === hoverVotes ? '<b>' : '') +\n                                line[0] + ': ' +\n                                Highcharts.numberFormat(line[1], 0) +\n                                (line[0] === hoverVotes ? '</b>' : '') +\n                                '<br/>')\n                            .join('') +\n                        '<hr/>Total: ' + Highcharts.numberFormat(this.sumVotes, 0);\n                }\n            }\n        }, {\n            name: 'Connectors',\n            type: 'mapline',\n            color: 'rgba(130, 130, 130, 0.5)',\n            zIndex: 5,\n            showInLegend: false,\n            enableMouseTracking: false,\n            accessibility: {\n                enabled: false\n            }\n        }]\n    });\n\n    // When clicking legend items, also toggle connectors and pies\n    chart.legend.allItems.forEach(item => {\n        const setVisible = item.setVisible;\n\n        item.setVisible = function () {\n            const item = this;\n\n            setVisible.call(item);\n\n            chart.series[0].points.forEach(point => {\n                if (\n                    chart.colorAxis[0].dataClasses[point.dataClass].name ===\n                    item.name\n                ) {\n                    // Find this state's pie and set visibility\n                    Highcharts.find(chart.series, function (item) {\n                        return item.name === point.id;\n                    }).setVisible(item.visible, false);\n\n                    // Do the same for the connector point if it exists\n                    const connector = Highcharts.find(\n                        chart.series[2].points,\n                        item => item.name === point.id\n                    );\n\n                    if (connector) {\n                        connector.setVisible(item.visible, false);\n                    }\n                }\n            });\n            chart.redraw();\n        };\n    });\n\n    // Add the pies after chart load, optionally with offset and connectors\n    chart.series[0].points.forEach(state => {\n        // Add the pie for this state\n        chart.addSeries({\n            type: 'pie',\n            name: state.id,\n            zIndex: 6, // Keep pies above connector lines\n            minSize: 15,\n            maxSize: 55,\n            onPoint: {\n                id: state.id,\n                z: (() => {\n                    const mapView = chart.mapView,\n                        zoomFactor = mapView.zoom / mapView.minZoom;\n\n                    return Math.max(\n                        chart.chartWidth / 45 * zoomFactor, // Min size\n                        chart.chartWidth /\n                        11 * zoomFactor * state.sumVotes / maxVotes\n                    );\n                })()\n            },\n            states: {\n                inactive: {\n                    enabled: false\n                }\n            },\n            accessibility: {\n                enabled: false\n            },\n            tooltip: {\n                // Use the state tooltip for the pies as well\n                pointFormatter() {\n                    return state.series.tooltipOptions.pointFormatter.call({\n                        id: state.id,\n                        hoverVotes: this.name,\n                        demVotes: state.demVotes,\n                        repVotes: state.repVotes,\n                        libVotes: state.libVotes,\n                        grnVotes: state.grnVotes,\n                        sumVotes: state.sumVotes\n                    });\n                }\n            },\n            data: [{\n                name: 'Democrats',\n                y: state.demVotes,\n                color: demColor\n            }, {\n                name: 'Republicans',\n                y: state.repVotes,\n                color: repColor\n            }, {\n                name: 'Libertarians',\n                y: state.libVotes,\n                color: libColor\n            }, {\n                name: 'Green',\n                y: state.grnVotes,\n                color: grnColor\n            }]\n        }, false);\n    });\n\n    // Only redraw once all pies and connectors have been added\n    chart.redraw();\n})();\n","css":"#container {\n    min-width: 320px;\n    max-width: 800px;\n    height: 500px;\n    margin: 1em auto;\n}\n.highcharts-menu hr {margin: unset}","html":"\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Proj4            from 'https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js';\nimport Highcharts       from 'highcharts';\nimport Map              from 'highcharts/modules/map';\nimport SeriesOnPoint    from 'highcharts/modules/series-on-point';\nimport Exporting        from 'highcharts/modules/exporting';\nimport OfflineExporting from 'highcharts/modules/offline-exporting';\nimport Accessibility    from 'highcharts/modules/accessibility';\n\n// 初始化模块\nProj4(Highcharts);\nMap(Highcharts);\nSeriesOnPoint(Highcharts);\nExporting(Highcharts);\nOfflineExporting(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js","https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/maps/11.0.0/modules/map.js","https://code.highcharts.com/maps/11.0.0/modules/series-on-point.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/maps/11.0.0/modules/accessibility.js"]},"pre":"marker-clusters","next":"pattern-fill-map"},"product":"maps","theme":null,"_global":{"scripts":["https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.3.15/proj4.js","https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/maps/11.0.0/modules/map.js","https://code.highcharts.com/maps/11.0.0/modules/series-on-point.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/maps/11.0.0/modules/accessibility.js"],"css":"#container {\n    min-width: 320px;\n    max-width: 800px;\n    height: 500px;\n    margin: 1em auto;\n}\n.highcharts-menu hr {margin: unset}","script":"(async () => {\n    const mapData = await fetch(\n        'https://code.highcharts.com/mapdata/countries/us/us-all.topo.json'\n    ).then(response => response.json());\n\n    const data = [\n            // state, demVotes, repVotes, libVotes, grnVotes, sumVotes, winner, offset config for pies\n            ['Alabama', 729547, 1318255, 44467, 9391, 2101660, -1],\n            ['Alaska', 116454, 163387, 18725, 5735, 304301, -1],\n            ['Arizona', 1161167, 1252401, 106327, 34345, 2554240, -1],\n            ['Arkansas', 380494, 684782, 29829, 9473, 1104578, -1],\n            ['California', 8577206, 4390272, 467370, 271047, 13705895, 1, { lon: -1, drawConnector: false }],\n            ['Colorado', 1338870, 1202484, 144121, 38437, 2723912, 1],\n            ['Connecticut', 897572, 673215, 48676, 22841, 1642304, 1, { lat: -1.5, lon: 1 }],\n            ['Delaware', 235603, 185127, 14757, 6103, 441590, 1, { lat: -1.3, lon: 2 }],\n            ['District of Columbia', 282830, 12723, 4906, 4258, 304717, 1, { lat: -2, lon: 2 }],\n            ['Florida', 4504975, 4617886, 207043, 64399, 9394303, -1],\n            ['Georgia', 1877963, 2089104, 125306, 0, 4092373, -1],\n            ['Hawaii', 266891, 128847, 15954, 12737, 424429, 1, { lat: -0.5, lon: 0.5, drawConnector: false }],\n            ['Idaho', 189765, 409055, 28331, 8496, 635647, -1],\n            ['Illinois', 2977498, 2118179, 208682, 74112, 5378471, 1],\n            ['Indiana', 1039126, 1557286, 133993, 7841, 2738246, -1],\n            ['Iowa', 653669, 800983, 59186, 11479, 1525317, -1],\n            ['Kansas', 427005, 671018, 55406, 23506, 1176935, -1],\n            ['Kentucky', 628854, 1202971, 53752, 13913, 1899490, -1],\n            ['Louisiana', 780154, 1178638, 37978, 14031, 2010801, -1],\n            ['Maine', 352156, 332418, 37578, 13995, 736147, 1],\n            ['Maryland', 1502820, 878615, 78225, 33380, 2493040, 1, { lon: 0.6, drawConnector: false }],\n            ['Massachusetts', 1995196, 1090893, 138018, 47661, 3271768, 1, { lon: 3 }],\n            ['Michigan', 2268839, 2279543, 172136, 51463, 4771981, -1],\n            ['Minnesota', 1367716, 1322951, 112972, 36985, 2840624, 1, { lon: -1, drawConnector: false }],\n            ['Mississippi', 462127, 678284, 14411, 3595, 1158417, -1],\n            ['Missouri', 1054889, 1585753, 96404, 25086, 2762132, -1],\n            ['Montana', 174281, 273879, 28036, 7868, 484064, -1],\n            ['Nebraska', 273185, 485372, 38746, 8337, 805640, -1],\n            ['Nevada', 539260, 512058, 37384, 0, 1088702, 1],\n            ['New Hampshire', 348526, 345790, 30694, 6465, 731475, 1],\n            ['New Jersey', 1967444, 1509688, 72143, 37131, 3586406, 1, { lat: -1, lon: 1.2 }],\n            ['New Mexico', 380923, 316134, 74544, 9797, 781398, 1],\n            ['New York', 4145376, 2638135, 162273, 100110, 7045894, 1],\n            ['North Carolina', 2169496, 2345235, 130021, 1038, 4645790, -1],\n            ['North Dakota', 93758, 216794, 21434, 378, 332364, -1],\n            ['Ohio', 2320596, 2776683, 174266, 44310, 5315855, -1],\n            ['Oklahoma', 420375, 949136, 83481, 0, 1452992, -1],\n            ['Oregon', 991580, 774080, 93875, 49247, 1908782, 1],\n            ['Pennsylvania', 2874136, 2945302, 144826, 49334, 6013598, -1],\n            ['Rhode Island', 227062, 166454, 14700, 6171, 414387, 1, { lat: -0.7, lon: 1.7 }],\n            ['South Carolina', 855373, 1155389, 49204, 13034, 2073000, -1],\n            ['South Dakota', 117442, 227701, 20845, 0, 365988, -1],\n            ['Tennessee', 868853, 1519926, 70286, 15952, 2475017, -1],\n            ['Texas', 3877868, 4685047, 283492, 71558, 8917965, -1],\n            ['Utah', 222858, 375006, 39608, 7695, 645167, -1],\n            ['Vermont', 178573, 95369, 10078, 6758, 290778, 1, { lat: 2 }],\n            ['Virginia', 1981473, 1769443, 118274, 27638, 3896828, 1],\n            ['Washington', 1727840, 1210370, 160356, 57571, 3156137, 1],\n            ['West Virginia', 187519, 486304, 22958, 8016, 704797, -1],\n            ['Wisconsin', 1382947, 1407028, 106470, 31016, 2927461, -1],\n            ['Wyoming', 55973, 174419, 13287, 2515, 246194, -1]\n        ],\n        demColor = 'rgba(74,131,240,0.80)',\n        repColor = 'rgba(220,71,71,0.80)',\n        libColor = 'rgba(240,190,50,0.80)',\n        grnColor = 'rgba(90,200,90,0.80)';\n\n\n    // Compute max votes to find relative sizes of bubbles\n    const maxVotes = data.reduce((max, row) => Math.max(max, row[5]), 0);\n\n    // Build the chart\n    const chart = Highcharts.mapChart('container', {\n\n        chart: {\n            animation: false // Disable animation, especially for zooming\n        },\n\n        accessibility: {\n            description: 'Complex map demo showing voting results for US states, where each state has a pie chart overlaid showing the vote distribution.'\n        },\n\n        colorAxis: {\n            dataClasses: [{\n                from: -1,\n                to: 0,\n                color: 'rgba(244,91,91,0.5)',\n                name: 'Republican'\n            }, {\n                from: 0,\n                to: 1,\n                color: 'rgba(124,181,236,0.5)',\n                name: 'Democrat'\n            }, {\n                from: 2,\n                to: 3,\n                name: 'Libertarian',\n                color: libColor\n            }, {\n                from: 3,\n                to: 4,\n                name: 'Green',\n                color: grnColor\n            }]\n        },\n\n        mapNavigation: {\n            enabled: true\n        },\n\n        title: {\n            text: 'USA 2016 Presidential Election Results',\n            align: 'left'\n        },\n\n        // Default options for the pies\n        plotOptions: {\n            pie: {\n                borderColor: 'rgba(255,255,255,0.4)',\n                borderWidth: 1,\n                clip: true,\n                dataLabels: {\n                    enabled: false\n                },\n                states: {\n                    hover: {\n                        halo: {\n                            size: 5\n                        }\n                    }\n                },\n                tooltip: {\n                    headerFormat: ''\n                }\n            }\n        },\n\n        series: [{\n            mapData,\n            data: data,\n            name: 'States',\n            accessibility: {\n                point: {\n                    descriptionFormatter(point) {\n                        const party = point.value > 0 ? 'democrat' : 'republican';\n                        return point.name + ', ' + party + '. Total votes: ' + point.sumVotes +\n                            '. Democrat votes: ' + point.demVotes + '. Republican votes: ' + point.repVotes +\n                            '. Libertarian votes: ' + point.libVotes + '. Green votes: ' + point.grnVotes + '.';\n                    }\n                }\n            },\n            borderColor: '#FFF',\n            joinBy: ['name', 'id'],\n            keys: ['id', 'demVotes', 'repVotes', 'libVotes', 'grnVotes',\n                'sumVotes', 'value', 'pieOffset'],\n            tooltip: {\n                headerFormat: '',\n                pointFormatter() {\n                    const hoverVotes = this.hoverVotes; // Used by pie only\n                    return '<b>' + this.id + ' votes</b><br/>' +\n                        [\n                            ['Democrats', this.demVotes, demColor],\n                            ['Republicans', this.repVotes, repColor],\n                            ['Libertarians', this.libVotes, libColor],\n                            ['Green', this.grnVotes, grnColor]\n                        ]\n                            .sort((a, b) => b[1] - a[1]) // Sort tooltip by most votes\n                            .map(line => '<span style=\"color:' + line[2] +\n                                // Colorized bullet\n                                '\">\\u25CF</span> ' +\n                                // Party and votes\n                                (line[0] === hoverVotes ? '<b>' : '') +\n                                line[0] + ': ' +\n                                Highcharts.numberFormat(line[1], 0) +\n                                (line[0] === hoverVotes ? '</b>' : '') +\n                                '<br/>')\n                            .join('') +\n                        '<hr/>Total: ' + Highcharts.numberFormat(this.sumVotes, 0);\n                }\n            }\n        }, {\n            name: 'Connectors',\n            type: 'mapline',\n            color: 'rgba(130, 130, 130, 0.5)',\n            zIndex: 5,\n            showInLegend: false,\n            enableMouseTracking: false,\n            accessibility: {\n                enabled: false\n            }\n        }]\n    });\n\n    // When clicking legend items, also toggle connectors and pies\n    chart.legend.allItems.forEach(item => {\n        const setVisible = item.setVisible;\n\n        item.setVisible = function () {\n            const item = this;\n\n            setVisible.call(item);\n\n            chart.series[0].points.forEach(point => {\n                if (\n                    chart.colorAxis[0].dataClasses[point.dataClass].name ===\n                    item.name\n                ) {\n                    // Find this state's pie and set visibility\n                    Highcharts.find(chart.series, function (item) {\n                        return item.name === point.id;\n                    }).setVisible(item.visible, false);\n\n                    // Do the same for the connector point if it exists\n                    const connector = Highcharts.find(\n                        chart.series[2].points,\n                        item => item.name === point.id\n                    );\n\n                    if (connector) {\n                        connector.setVisible(item.visible, false);\n                    }\n                }\n            });\n            chart.redraw();\n        };\n    });\n\n    // Add the pies after chart load, optionally with offset and connectors\n    chart.series[0].points.forEach(state => {\n        // Add the pie for this state\n        chart.addSeries({\n            type: 'pie',\n            name: state.id,\n            zIndex: 6, // Keep pies above connector lines\n            minSize: 15,\n            maxSize: 55,\n            onPoint: {\n                id: state.id,\n                z: (() => {\n                    const mapView = chart.mapView,\n                        zoomFactor = mapView.zoom / mapView.minZoom;\n\n                    return Math.max(\n                        chart.chartWidth / 45 * zoomFactor, // Min size\n                        chart.chartWidth /\n                        11 * zoomFactor * state.sumVotes / maxVotes\n                    );\n                })()\n            },\n            states: {\n                inactive: {\n                    enabled: false\n                }\n            },\n            accessibility: {\n                enabled: false\n            },\n            tooltip: {\n                // Use the state tooltip for the pies as well\n                pointFormatter() {\n                    return state.series.tooltipOptions.pointFormatter.call({\n                        id: state.id,\n                        hoverVotes: this.name,\n                        demVotes: state.demVotes,\n                        repVotes: state.repVotes,\n                        libVotes: state.libVotes,\n                        grnVotes: state.grnVotes,\n                        sumVotes: state.sumVotes\n                    });\n                }\n            },\n            data: [{\n                name: 'Democrats',\n                y: state.demVotes,\n                color: demColor\n            }, {\n                name: 'Republicans',\n                y: state.repVotes,\n                color: repColor\n            }, {\n                name: 'Libertarians',\n                y: state.libVotes,\n                color: libColor\n            }, {\n                name: 'Green',\n                y: state.grnVotes,\n                color: grnColor\n            }]\n        }, false);\n    });\n\n    // Only redraw once all pies and connectors have been added\n    chart.redraw();\n})();\n"},"hidePageCover":true}}]
