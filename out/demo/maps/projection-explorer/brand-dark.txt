0:[[["",{"children":["(main)",{"children":["demo",{"children":[["demo","maps/projection-explorer/brand-dark","c"],{"children":["__PAGE__?{\"demo\":[\"maps\",\"projection-explorer\",\"brand-dark\"]}",{}]}]}]},"$undefined","$undefined",true]}],"$L1",[[],["$L2",null]]]]
3:HL["/_next/static/css/b2e0b431b62130d6.css",{"as":"style"}]
4:HL["/_next/static/css/621fda290094023d.css",{"as":"style"}]
5:I{"id":"9631","chunks":["272:static/chunks/webpack-0d6f19481046fd3b.js","509:static/chunks/54cd117c-0de4f9b009705f45.js","111:static/chunks/111-7e9f7f1a63948fbf.js"],"name":"","async":false}
6:I{"id":"2781","chunks":["272:static/chunks/webpack-0d6f19481046fd3b.js","509:static/chunks/54cd117c-0de4f9b009705f45.js","111:static/chunks/111-7e9f7f1a63948fbf.js"],"name":"","async":false}
7:I{"id":"8801","chunks":["3:static/chunks/3-1f903c812f794e06.js","572:static/chunks/572-dd6907329ad47b59.js","801:static/chunks/801-8b17748d0b5c88f7.js","191:static/chunks/app/(shop)/layout-630ea7c8823d9902.js"],"name":"","async":false}
9:I{"id":"7028","chunks":["3:static/chunks/3-1f903c812f794e06.js","572:static/chunks/572-dd6907329ad47b59.js","801:static/chunks/801-8b17748d0b5c88f7.js","191:static/chunks/app/(shop)/layout-630ea7c8823d9902.js"],"name":"","async":false}
1:["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":[["$","html",null,{"lang":"en","children":[null,["$","body",null,{"children":[["$","$L7",null,{}],["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children","demo","children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$","$L5",null,{"parallelRouterKey":"children","segmentPath":["children","(main)","children","demo","children",["demo","maps/projection-explorer/brand-dark","c"],"children"],"error":"$undefined","errorStyles":"$undefined","loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"template":["$","$L6",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","asNotFound":false,"childProp":{"current":["$L8",null],"segment":"__PAGE__?{\"demo\":[\"maps\",\"projection-explorer\",\"brand-dark\"]}"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/621fda290094023d.css","precedence":"next"}]]}],"segment":["demo","maps/projection-explorer/brand-dark","c"]},"styles":[]}],"segment":"demo"},"styles":[]}],["$","footer",null,{"className":"page-footer font-small bkgDarkestGray","role":"contentinfo","children":["$","div",null,{"id":"footer","className":"container","children":[["$","div",null,{"className":"row footer-menu","children":[["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"快捷链接"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/product","children":"产品"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/demos","children":"例子"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/download","children":"下载试用"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://shop.highsoft.com","target":"_blank","children":"获取授权"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"开发者资源"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/docs","children":"使用文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://api.highcharts.com","target":"_blank","children":"API 文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/changelog","children":"更新日志"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/roadmap","children":"发展规划"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"服务与支持"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://www.highcharts.com/forum/","target":"_blank","children":"技术社区"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://stackoverflow.com/tags/highcharts","target":"_blank","children":"Stack Overflow"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://github.com/highcharts/highcharts","target":"_blank","children":"Github"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/support","children":"服务与支持"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/chart-chooser","children":"图表选择器"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"网站相关"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"http://localhost:3000/privacy","target":"_blank","children":"隐私政策"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://shop.highcharts.com/license","target":"_blank","children":"标准协议文档"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/sitemap.xml","children":"Sitemap"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://www.highcharts.com/blog/article/accessibility-statement/","target":"_blank","children":"Accessibility Statement"}]}]]}]]}],["$","div",null,{"className":"col-6 col-md-4 col-lg mt-2 mb-2","children":[["$","h2",null,{"className":"h4 mb-1 mb-md-2 footer-heading font-weight-light","children":"关于"}],["$","ul",null,{"className":"footer-list list-unstyled","children":[["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/about","children":"我们的故事"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"hhttps://www.highcharts.com/people","children":"团队"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"/about/contact","children":"联系方式"}]}],["$","li",null,{"className":"footer-link","children":["$","$L9",null,{"href":"https://wp-assets.highcharts.com/www-highcharts-com/blog/wp-content/uploads/2021/08/16115648/Codeofconduct.pdf","target":"_blank","children":"行为准则"}]}]]}]]}]]}],["$","div",null,{"className":"row pb30 desktop-version","children":[["$","div",null,{"className":"col py-1 pr-0 pb-3 text-left highchartsRights small-text","children":["$","div",null,{"children":[" © ",2023," Highcharts",["$","span",null,{"className":"sep","children":" 保留所有权利，"}],["$","a",null,{"href":"https://beian.miit.gov.cn/","target":"_blank","children":"浙ICP备16004892号-1"}],"，由 ",["$","a",null,{"href":"/about/parter","children":"简数科技"}]," 提供服务。"]}]}],["$","div",null,{"className":"col py-1 pl-0 pb-3 text-right","children":[["$","h2",null,{"className":"h2-text-hidden","children":"Social"}],["$","ul",null,{"className":"footerSocialsList footerSocials","children":[["$","li",null,{"children":["$","a",null,{"className":"socials","href":"https://github.com/highcharts/highcharts","aria-label":"Highcharts Github","children":["$","i",null,{"className":"fa fa-github txtWhite","aria-hidden":"true"}]}]}],["$","li",null,{"children":["$","a",null,{"className":"socials","href":"https://stackoverflow.com/questions/tagged/highcharts","aria-label":"Highcharts Stack Overflow","children":["$","i",null,{"className":"fa fa-stack-overflow txtWhite","aria-hidden":"true"}]}]}]]}]]}]]}]]}]}],["$","script",null,{"src":"/js/common.js"}]]}]]}],null],"segment":"(main)"},"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/b2e0b431b62130d6.css","precedence":"next"}]]}]
2:[[["$","meta",null,{"charSet":"utf-8"}],null,null,null,null,null,null,null,null,null,null,["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1"}],null,null,null,null,null,null,null,null,null,null,[]],[null,null,null,null],null,null,[null,null,null,null,null],null,null,null,null,null]
a:I{"id":"8344","chunks":["664:static/chunks/664-c875da42fcb6e6b4.js","572:static/chunks/572-dd6907329ad47b59.js","568:static/chunks/568-071733b70a3731c3.js","392:static/chunks/app/(main)/demo/[...demo]/page-ba9b772b3f788084.js"],"name":"","async":false}
8:["$","$La",null,{"props":{"demos":[{"name":"General","code":"general","children":[{"code":"all-maps","name":"Overview","img":"https://www.highcharts.com/demo/images/samples/maps/demo/all-maps/thumbnail.png"},{"code":"animated-mapline","name":"Animated lines on a world map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/animated-mapline/thumbnail.png"},{"code":"audio-map","name":"Audio map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/audio-map/thumbnail.png"},{"code":"map-trajectory","name":"Audio map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-trajectory/thumbnail.png"},{"code":"topojson-projection","name":"Built in projection","img":"https://www.highcharts.com/demo/images/samples/maps/demo/topojson-projection/thumbnail.png"},{"code":"category-map","name":"Categorized areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/category-map/thumbnail.png"},{"code":"color-axis","name":"Color axis and data labels","img":"https://www.highcharts.com/demo/images/samples/maps/demo/color-axis/thumbnail.png"},{"code":"data-class-two-ranges","name":"Data classes and popup","img":"https://www.highcharts.com/demo/images/samples/maps/demo/data-class-two-ranges/thumbnail.png"},{"code":"us-counties","name":"Detailed map, US counties","img":"https://www.highcharts.com/demo/images/samples/maps/demo/us-counties/thumbnail.png"},{"code":"distribution","name":"Distribution map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/distribution/thumbnail.png"},{"code":"flowmap","name":"Flowmap","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap/thumbnail.png"},{"code":"flowmap-world-cup","name":"Flowmap Flight Routes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap-world-cup/thumbnail.png"},{"code":"mapline-mappoint","name":"GeoJSON with rivers and cities","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mapline-mappoint/thumbnail.png"},{"code":"all-areas-as-null","name":"Highlighted areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/all-areas-as-null/thumbnail.png"},{"code":"lightning","name":"Lightning Map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/lightning/thumbnail.png"},{"code":"marker-clusters","name":"Map with marker clusters","img":"https://www.highcharts.com/demo/images/samples/maps/demo/marker-clusters/thumbnail.png"},{"code":"map-pies","name":"Map with overlaid pie charts","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-pies/thumbnail.png"},{"code":"pattern-fill-map","name":"Map with pattern fills","img":"https://www.highcharts.com/demo/images/samples/maps/demo/pattern-fill-map/thumbnail.png"},{"code":"flowmap-migration","name":"Migration Flowmap","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flowmap-migration/thumbnail.png"},{"code":"data-class-ranges","name":"Multiple data classes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/data-class-ranges/thumbnail.png"},{"code":"flight-routes","name":"Simple flight routes","img":"https://www.highcharts.com/demo/images/samples/maps/demo/flight-routes/thumbnail.png"},{"code":"us-data-labels","name":"Small US with data labels","img":"https://www.highcharts.com/demo/images/samples/maps/demo/us-data-labels/thumbnail.png"},{"code":"spider-map","name":"Spider map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/spider-map/thumbnail.png"}]},{"name":"Dynamic","code":"dynamic","children":[{"code":"eu-capitals-temp","name":"Current temperatures in capitals of Europe","img":"https://www.highcharts.com/demo/images/samples/maps/demo/eu-capitals-temp/thumbnail.png"},{"code":"map-drilldown","name":"Drilldown","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-drilldown/thumbnail.png"},{"code":"tooltip","name":"Fixed tooltip with HTML","img":"https://www.highcharts.com/demo/images/samples/maps/demo/tooltip/thumbnail.png"},{"code":"map-drilldown-preloaded","name":"Map drilldown with preloaded data","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-drilldown-preloaded/thumbnail.png"},{"code":"projection-explorer","name":"Projection Explorer","img":"https://www.highcharts.com/demo/images/samples/maps/demo/projection-explorer/thumbnail.png","parent":"dynamic","data":{"js":"(async () => {\n\n    // Get random data for this sample\n    function getRandomData(topology) {\n        return topology.objects.default.geometries.map(() =>\n            Math.round(Math.random() * 100));\n    }\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json'\n    ).then(response => response.json());\n\n    const antarctica = await fetch(\n        'https://code.highcharts.com/mapdata/custom/antarctica.topo.json'\n    ).then(response => response.json());\n\n    const data = getRandomData(topology);\n\n    // Get geometries for parallels\n    function getParallelsGeometries(parallels) {\n        return parallels.map(lat => {\n            const coordinates = [];\n            for (let lon = -180; lon <= 180; lon += 5) {\n                coordinates.push([lon, lat]);\n            }\n            return {\n                geometry: {\n                    type: 'LineString',\n                    coordinates\n                },\n                lineWidth: lat === 0 ? 2 : undefined\n            };\n        });\n    }\n\n    function getGraticule() {\n        const data = [];\n\n        // Meridians\n        for (let x = -180; x <= 180; x += 15) {\n            data.push({\n                geometry: {\n                    type: 'LineString',\n                    coordinates: x % 90 === 0 ? [\n                        [x, -90],\n                        [x, 0],\n                        [x, 90]\n                    ] : [\n                        [x, -80],\n                        [x, 80]\n                    ]\n                }\n            });\n        }\n\n        // Parallels\n        const parallels = [];\n        for (let y = -90; y <= 90; y += 10) {\n            parallels.push(y);\n        }\n        data.push(...getParallelsGeometries(parallels));\n\n        return data;\n    }\n\n    let chart, smallChart;\n\n    const drawMap = projectionKey => {\n\n        // Apply projection\n        const projection = Highcharts.merge({\n            name: undefined\n        }, {\n            equalearth: {\n                name: 'EqualEarth',\n                projectedBounds: 'world'\n            },\n            lcc: {\n                name: 'LambertConformalConic',\n                parallels: [30, 40],\n                projectedBounds: { x1: -200, y1: -200, x2: 200, y2: 200 }\n            },\n            miller: {\n                name: 'Miller',\n                projectedBounds: 'world'\n            },\n            ortho: {\n                name: 'Orthographic',\n                projectedBounds: 'world'\n            },\n            webmerc: {\n                name: 'WebMercator',\n                projectedBounds: 'world'\n            }\n        }[projectionKey] || {});\n\n        projection.rotation = [\n            document.getElementById('rotation-lambda').value,\n            document.getElementById('rotation-phi').value,\n            document.getElementById('rotation-gamma').value\n        ].map(Number);\n\n        // Initialize the chart\n        if (!chart) {\n\n            console.time('@mapChart');\n\n            chart = Highcharts.mapChart('container', {\n                chart: {\n                    height: '65%'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                mapNavigation: {\n                    enabled: true,\n                    enableDoubleClickZoomTo: true,\n                    buttonOptions: {\n                        verticalAlign: 'bottom'\n                    }\n                },\n\n                mapView: {\n                    projection\n                    /*\n                    projection: {\n                        name: 'WebMercator'\n                    },\n                    zoom: 4,\n                    center: [6.5, 61]\n                    */\n                },\n\n                colorAxis: {\n                    tickPixelInterval: 100,\n                    minColor: '#F1EEF6',\n                    maxColor: '#900037'\n                },\n\n                tooltip: {\n                    pointFormat: '{point.name}: {point.value}'\n                },\n\n                plotOptions: {\n                    series: {\n                        animationLimit: 500,\n                        states: {\n                            inactive: {\n                                opacity: 1\n                            }\n                        }\n                    },\n                    mapline: {\n                        enableMouseTracking: false\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    nullColor: '#e8e8e8',\n                    color: '#e8e8e8'\n                }, {\n                    data,\n                    mapData: topology,\n                    joinBy: null,\n                    name: 'Random data',\n                    dataLabels: {\n                        enabled: false,\n                        format: '{point.name}'\n                    },\n                    clip: false\n                }, {\n                    mapData: antarctica,\n                    allAreas: true,\n                    name: 'Antarctica',\n                    clip: false,\n                    opacity: 0.75\n                }, {\n                    type: 'mapline',\n                    data: [{\n                        geometry: {\n                            type: 'LineString',\n                            coordinates: [\n                                [4.90, 53.38], // Amsterdam\n                                [-118.24, 34.05] // Los Angeles\n                            ]\n                        },\n                        color: '#3030d0'\n                    }],\n                    lineWidth: 2\n                }, {\n                    type: 'mappoint',\n                    data: [{\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [4.90, 53.38]\n                        },\n                        name: 'Amsterdam'\n                    }, {\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [-118.24, 34.05]\n                        },\n                        name: 'LA'\n                    }],\n                    color: '#3030d0'\n                }]\n            });\n            console.timeEnd('@mapChart');\n\n        } else {\n            chart.update({\n                mapView: {\n                    projection\n                }\n            });\n        }\n\n\n        if (projection.name === 'LambertConformalConic') {\n            smallChart = Highcharts.mapChart('small-world-container', {\n                chart: {\n                    backgroundColor: 'transparent'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                credits: {\n                    enabled: false\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                exporting: {\n                    enabled: false\n                },\n\n                mapView: {\n                    projection: {\n                        name: 'Orthographic',\n                        rotation: [0, -10, 0]\n                    }\n                },\n\n                plotOptions: {\n                    series: {\n                        enableMouseTracking: false\n                    },\n                    map: {\n                        animationLimit: 500,\n                        allAreas: true,\n                        clip: false,\n                        nullColor: '#e0e0e0',\n                        borderColor: '#ffffff',\n                        borderWidth: 0.25\n                    },\n                    mapline: {\n                        color: Highcharts.getOptions().colors[0]\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    color: '#f8f8f8'\n                }, {\n                    mapData: topology\n                }, {\n                    mapData: antarctica\n                }, {\n                    data: getParallelsGeometries(projection.parallels),\n                    type: 'mapline',\n                    id: 'parallels'\n                }]\n            });\n        }\n\n        // Toggle buttons\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.classList.remove('active')\n        );\n        const button = document.querySelector(\n            `#projection-buttons #${projectionKey}`\n        );\n        button.classList.add('active');\n\n        // Toggle descriptions\n        document.querySelectorAll('#descriptions div').forEach(div => {\n            div.style.display = 'none';\n        });\n        const div = document.querySelector(\n            `#descriptions #description-${projectionKey}`\n        );\n        div.style.display = 'block';\n\n\n        // Toggle projection-dependent panels\n        const panels = (button.getAttribute('data-panels') || '').split(',');\n        document.querySelectorAll('.toggle-panel').forEach(panel => {\n            panel.style.display = panels.includes(panel.id) ? '' : 'none';\n        });\n\n\n    };\n\n\n    const enableInputs = () => {\n\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.addEventListener('click', e => drawMap(e.target.id))\n        );\n\n        document.querySelectorAll('.rotation').forEach(input => {\n            input.addEventListener('input', () => {\n                const rotation = [\n                    document.getElementById('rotation-lambda').value,\n                    document.getElementById('rotation-phi').value,\n                    document.getElementById('rotation-gamma').value\n                ].map(Number);\n\n                document.getElementById('rotation-lambda-output')\n                    .innerText = rotation[0];\n                document.getElementById('rotation-phi-output')\n                    .innerText = rotation[1];\n                document.getElementById('rotation-gamma-output')\n                    .innerText = rotation[2];\n\n                chart.mapView.update({\n                    projection: {\n                        rotation\n                    }\n                }, true, false);\n            });\n        });\n\n        document.querySelectorAll('.preset-rotations a').forEach(input => {\n            input.addEventListener('click', () => {\n                const rotation = input.getAttribute('data-rotation')\n                    .split(',')\n                    .map(Number);\n                rotation.push(0);\n\n                const geodesic = Highcharts.Projection.greatCircle(\n                    chart.mapView.projection.options.rotation,\n                    rotation\n                );\n\n                geodesic.forEach((rotationStep, i) => {\n                    setTimeout(() => {\n                        rotationStep.push(0);\n                        chart.mapView.update({\n                            projection: {\n                                rotation: rotationStep\n                            }\n                        }, true, false);\n\n                        rotationStep.forEach((value, i) => {\n                            const name = ['lambda', 'phi', 'gamma'][i];\n                            document.getElementById(`rotation-${name}`)\n                                .value = Math.round(value);\n                            document.getElementById(`rotation-${name}-output`)\n                                .innerText = Math.round(value);\n                        });\n                    }, 25 * i);\n                });\n            });\n        });\n\n        document.querySelectorAll('.parallels').forEach(input => {\n            input.addEventListener('input', () => {\n                const parallels = [\n                    Number(document.getElementById('parallels-0').value),\n                    Number(document.getElementById('parallels-1').value)\n                ];\n                chart.mapView.update({\n                    projection: {\n                        parallels\n                    }\n                }, true, false);\n                document.getElementById('parallels-0-output')\n                    .innerText = parallels[0];\n                document.getElementById('parallels-1-output')\n                    .innerText = parallels[1];\n\n                if (smallChart) {\n                    smallChart.get('parallels').remove();\n                    smallChart.addSeries({\n                        data: getParallelsGeometries(parallels),\n                        type: 'mapline',\n                        id: 'parallels'\n                    }, true, false);\n                }\n            });\n        });\n    };\n\n    drawMap('equalearth');\n\n    enableInputs();\n})();","css":".main {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n#container {\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.main #small-world-container {\n    max-width: 150px;\n    margin-top: 1rem;\n    min-width: 75px;\n    height: 150px;\n}\n\n.main h1 {\n    font-size: 1.5rem !important;\n}\n\n.main .mt-4 {\n    margin-top: 1.5rem !important;\n    min-width: 25%;\n}\n\n.main .loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n\n.main .btn-group {\n    flex-wrap: wrap;\n}\n\n.main .btn {\n    line-height: 1.5;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    margin: 0.1rem 0;\n}\n\n#descriptions div {\n    display: none;\n}\n.highcharts-menu hr {margin: unset}","html":"\n\n<div class=\"main\">\n    <h1>Highcharts Projection Explorer</h1>\n\n    <div class=\"row\">\n        <div class=\"col-lg-8\">\n            <div id=\"container\"></div>\n\n            <hr>\n\n            <div id=\"projection-buttons\" class=\"buttons row\">\n                <div class=\"col-12\">\n                    <h4 class=\"mt-4\">Projections</h4>\n                    <div class=\"btn-group\">\n                        <button id=\"equalearth\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Equal Earth</button>\n                        <button id=\"miller\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Miller</button>\n                        <button id=\"webmerc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Web Mercator</button>\n                        <button id=\"ortho\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel,rotation-preset-panel\"\n                            >Ortographic</button>\n                        <button id=\"lcc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel,parallels-panel,small-world-panel\"\n                            >LCC</button>\n                        <button id=\"eqc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">None</button>\n                    </div>\n                </div>\n\n                <div class=\"col-md-6 mt-4 toggle-panel\" id=\"rotation-panel\">\n                    <h4>Rotation</h4>\n\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-lambda\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Lambda → <span class=\"text-muted\" id=\"rotation-lambda-output\"></span>\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-phi\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Phi ↑ <span class=\"text-muted\" id=\"rotation-phi-output\"></span>\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-gamma\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Gamma ⟲ <span class=\"text-muted\" id=\"rotation-gamma-output\"></span>\n                    </label>\n\n                    <div class=\"mt-4 toggle-panel\" id=\"rotation-preset-panel\">\n                        <h6>Preset rotations</h4>\n                        <div class=\"preset-rotations\">\n                            <a data-rotation=\"-15,0\" href=\"javascript:;\">Africa</a>,\n                            <a data-rotation=\"0,90\" href=\"javascript:;\">Antarctica</a>,\n                            <a data-rotation=\"-90,-40\" href=\"javascript:;\">Asia</a>,\n                            <a data-rotation=\"-140,30\" href=\"javascript:;\">Australia</a>,\n                            <a data-rotation=\"-15,-40\" href=\"javascript:;\">Europe</a>,\n                            <a data-rotation=\"100,-45\" href=\"javascript:;\">North America</a>,\n                            <a data-rotation=\"60,10\" href=\"javascript:;\">South America</a>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4 mt-4 toggle-panel\" id=\"parallels-panel\">\n                    <h4>Parallels</h4>\n                    <label>\n                        <input class=\"parallels\" id=\"parallels-0\" type=\"range\"\n                            min=\"-90\" max=\"90\" value=\"30\" />\n                        <span class=\"text-muted\" id=\"parallels-0-output\">30</span> °N\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"parallels\" id=\"parallels-1\" type=\"range\"\n                            min=\"-90\" max=\"90\" value=\"40\" />\n                        <span class=\"text-muted\" id=\"parallels-1-output\">40</span> °N\n                    </label>\n                </div>\n\n                <div class=\"col-md-2 md-col-12 toggle-panel\" id=\"small-world-panel\">\n                    <div id=\"small-world-container\"></div>\n\n                </div>\n            </div>\n        </div>\n\n        <div id=\"descriptions\" class=\"mt-4 col-lg-4 mt-lg-0\">\n            <div id=\"description-equalearth\">\n                <h3>Equal Earth projection</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Equal_Earth_projection\"\n                >Equal Earth map projection</a> is an equal-area\n                pseudocylindrical projection for world maps, invented by Bojan\n                Šavrič, Bernhard Jenny, and Tom Patterson in 2018. It is\n                inspired by the widely used Robinson projection, but unlike the\n                Robinson projection, retains the relative size of areas. The\n                projection equations are simple to implement and fast to\n                evaluate.</p>\n                <p>We chose this as the default world map projection for\n                Highcharts because it is visually pleasing like Robinson, but\n                avoids the political problem of rendering high-latitude regions\n                like Europe and North America larger than tropical regions.</p>\n            </div>\n            <div id=\"description-miller\">\n                <h3>Miller projection</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Miller_cylindrical_projection\"\n                >Miller cylindrical projection</a> is a modified Mercator\n                projection, proposed by Osborn Maitland Miller in 1942. Compared\n                to Mercator, the vertical exaggeration of polar areas is\n                smaller, so the relative size of areas is more correct.</p>\n                <p>Highcharts used this as the default map projection for world\n                maps until the Map Collection v2.0 and Highcharts v10.0, when\n                projection math was moved to the client side and EqualEarth\n                chosen as the default world map projection.\n                </p>\n            </div>\n            <div id=\"description-webmerc\">\n                <h3>Web Mercator projection</h3>\n                <p><a\n                href=\"https://en.wikipedia.org/wiki/Web_Mercator_projection\">Web\n                Mercator</a> is a variant of the Mercator map projection and is\n                the de facto standard for Web mapping applications.</p>\n                <p>Web Mercator is primarily created for tiled map services, as\n                when zooming in to smaller scales, the angle between lines on\n                the surface is approximately retained.</p>\n                <p>The great disadvantage of Web Mercator is that areas inflate\n                with distance from the equator. For example, in the world map,\n                Greenland appears roughly the same size as Africa. In reality\n                Africa is 14 times larger, as is apparent from the Equal Earth\n                or Orthographic projections.</p>\n            </div>\n            <div id=\"description-ortho\">\n                <h3>Orthographic projection</h3>\n                <p>The <a\n                href=\"https://pro.arcgis.com/en/pro-app/latest/help/mapping/properties/orthographic.htm\"\n                >orthographic projection</a> is an azimuthal perspective\n                projection, projecting the Earth's surface from an infinite\n                distance to a plane. It gives the illusion of a\n                three-dimensional globe.</p>\n                <p>Its disadvantage is that it fails to render the whole world\n                in one view. However, since the distortion is small at the\n                center of the view, it is great at rendering limited areas of\n                the globe, or at showing the positions of areas on the globe.</p>\n            </div>\n            <div id=\"description-lcc\">\n                <h3>Lambert Conformal Conic</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Lambert_conformal_conic_projection\">Lambert\n                conformal conic projection (LCC)</a> is a conic map projection\n                used for many national and regional mapping systems.</p>\n                <p>Its advantage lies in mapping smaller areas like countries or\n                continents. Two standard parallels are given, and between these,\n                the distortion is minimal.</p>\n                <p>In Highcharts, LCC is the default projection when loading a\n                map smaller than 180 degrees width and 90 degrees height.</p>\n                <p>For custom use,\n                <a href=\"https://api.highcharts.com/highmaps/mapView.projection.rotation\">rotation</a>\n                should be set to adjust the reference longitude, in addition to\n                the <a\n                href=\"https://api.highcharts.com/highmaps/mapView.projection.parallels\">parallels</a> option.</p>\n            </div>\n            <div id=\"description-eqc\">\n                <h3>No projection</h3>\n                <p>This is the raw <a\n                href=\"https://en.wikipedia.org/wiki/Equirectangular_projection\">Equirectangular\n                projection</a>, where the longitudes and latitudes are directly\n                projected onto the plane, except it doesn't run through the\n                Highcharts projection logic.</p>\n                <p>Notice the lines across the map at high latitudes. This is\n                because the eastern tip of Russia is east of the antimeridian,\n                and thus having longitudes close to -180 and upwards, while\n                connected to the rest of Russia with longitudes from 180 and\n                downwards. In cylindrical and conic projections this is\n                mitigated by doing client-side <em>antimeridial cutting</em>, so\n                that shapes spanning from one side of the plane to the other are\n                cut in two.</p>\n                <p>Also notice how the lack of a real projection causes the line\n                from LA to Amsterdam render as a straight line, instead of a\n                curve like in the real projections.</p>\n            </div>\n        </div>\n    </div>\n</div>\n","npm":"// 安装\nnpm install highcharts@10.3.3 --save\n\n// import 模块 \nimport Highcharts       from 'highcharts/highmaps';\nimport Exporting        from 'highcharts/11.0.0/modules/exporting';\nimport OfflineExporting from 'highcharts/11.0.0/modules/offline-exporting';\nimport BrandDark        from 'highcharts/themes/brand-dark';\n\n// 初始化模块\nExporting(Highcharts);\nOfflineExporting(Highcharts);\nBrandDark(Highcharts);\n","scripts":["https://code.highcharts.com/maps/11.0.0/highmaps.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/10.3.3/themes/brand-dark.js"]},"pre":"map-drilldown-preloaded","next":"rich-info"},{"code":"rich-info","name":"Rich information on click","img":"https://www.highcharts.com/demo/images/samples/maps/demo/rich-info/thumbnail.png"},{"code":"doubleclickzoomto","name":"Zoom to area by double click","img":"https://www.highcharts.com/demo/images/samples/maps/demo/doubleclickzoomto/thumbnail.png"}]},{"name":"Input formats","code":"input-formats","children":[{"code":"latlon-advanced","name":"Advanced lat/long","img":"https://www.highcharts.com/demo/images/samples/maps/demo/latlon-advanced/thumbnail.png"},{"code":"geojson","name":"GeoJSON areas","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geojson/thumbnail.png"},{"code":"mappoint-latlon","name":"Map point with lat/long","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-latlon/thumbnail.png"}]},{"name":"Series types","code":"series-types","children":[{"code":"mappoint-datalabels-mapmarker","name":"Data labels as map markers","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-datalabels-mapmarker/thumbnail.png"},{"code":"geoheatmap-orthographic","name":"Density of Cities in the World","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-orthographic/thumbnail.png"},{"code":"geoheatmap-europe","name":"European Train Stations Near Airports","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-europe/thumbnail.png"},{"code":"geoheatmap-equalearth","name":"GeoHeatmap Aerosol Particle Radius In September 2016","img":"https://www.highcharts.com/demo/images/samples/maps/demo/geoheatmap-equalearth/thumbnail.png"},{"code":"heatmap","name":"Heat map","img":"https://www.highcharts.com/demo/images/samples/maps/demo/heatmap/thumbnail.png"},{"code":"map-bubble","name":"Map bubble","img":"https://www.highcharts.com/demo/images/samples/maps/demo/map-bubble/thumbnail.png"},{"code":"mappoint-mapmarker","name":"Map markers","img":"https://www.highcharts.com/demo/images/samples/maps/demo/mappoint-mapmarker/thumbnail.png"},{"code":"circlemap-africa","name":"Tile map, circles","img":"https://www.highcharts.com/demo/images/samples/maps/demo/circlemap-africa/thumbnail.png"},{"code":"diamondmap","name":"Tile map, diamonds","img":"https://www.highcharts.com/demo/images/samples/maps/demo/diamondmap/thumbnail.png"},{"code":"honeycomb-usa","name":"Tile map, honeycomb","img":"https://www.highcharts.com/demo/images/samples/maps/demo/honeycomb-usa/thumbnail.png"}]}],"demo":"projection-explorer","current":{"code":"projection-explorer","name":"Projection Explorer","img":"https://www.highcharts.com/demo/images/samples/maps/demo/projection-explorer/thumbnail.png","parent":"dynamic","data":{"js":"(async () => {\n\n    // Get random data for this sample\n    function getRandomData(topology) {\n        return topology.objects.default.geometries.map(() =>\n            Math.round(Math.random() * 100));\n    }\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json'\n    ).then(response => response.json());\n\n    const antarctica = await fetch(\n        'https://code.highcharts.com/mapdata/custom/antarctica.topo.json'\n    ).then(response => response.json());\n\n    const data = getRandomData(topology);\n\n    // Get geometries for parallels\n    function getParallelsGeometries(parallels) {\n        return parallels.map(lat => {\n            const coordinates = [];\n            for (let lon = -180; lon <= 180; lon += 5) {\n                coordinates.push([lon, lat]);\n            }\n            return {\n                geometry: {\n                    type: 'LineString',\n                    coordinates\n                },\n                lineWidth: lat === 0 ? 2 : undefined\n            };\n        });\n    }\n\n    function getGraticule() {\n        const data = [];\n\n        // Meridians\n        for (let x = -180; x <= 180; x += 15) {\n            data.push({\n                geometry: {\n                    type: 'LineString',\n                    coordinates: x % 90 === 0 ? [\n                        [x, -90],\n                        [x, 0],\n                        [x, 90]\n                    ] : [\n                        [x, -80],\n                        [x, 80]\n                    ]\n                }\n            });\n        }\n\n        // Parallels\n        const parallels = [];\n        for (let y = -90; y <= 90; y += 10) {\n            parallels.push(y);\n        }\n        data.push(...getParallelsGeometries(parallels));\n\n        return data;\n    }\n\n    let chart, smallChart;\n\n    const drawMap = projectionKey => {\n\n        // Apply projection\n        const projection = Highcharts.merge({\n            name: undefined\n        }, {\n            equalearth: {\n                name: 'EqualEarth',\n                projectedBounds: 'world'\n            },\n            lcc: {\n                name: 'LambertConformalConic',\n                parallels: [30, 40],\n                projectedBounds: { x1: -200, y1: -200, x2: 200, y2: 200 }\n            },\n            miller: {\n                name: 'Miller',\n                projectedBounds: 'world'\n            },\n            ortho: {\n                name: 'Orthographic',\n                projectedBounds: 'world'\n            },\n            webmerc: {\n                name: 'WebMercator',\n                projectedBounds: 'world'\n            }\n        }[projectionKey] || {});\n\n        projection.rotation = [\n            document.getElementById('rotation-lambda').value,\n            document.getElementById('rotation-phi').value,\n            document.getElementById('rotation-gamma').value\n        ].map(Number);\n\n        // Initialize the chart\n        if (!chart) {\n\n            console.time('@mapChart');\n\n            chart = Highcharts.mapChart('container', {\n                chart: {\n                    height: '65%'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                mapNavigation: {\n                    enabled: true,\n                    enableDoubleClickZoomTo: true,\n                    buttonOptions: {\n                        verticalAlign: 'bottom'\n                    }\n                },\n\n                mapView: {\n                    projection\n                    /*\n                    projection: {\n                        name: 'WebMercator'\n                    },\n                    zoom: 4,\n                    center: [6.5, 61]\n                    */\n                },\n\n                colorAxis: {\n                    tickPixelInterval: 100,\n                    minColor: '#F1EEF6',\n                    maxColor: '#900037'\n                },\n\n                tooltip: {\n                    pointFormat: '{point.name}: {point.value}'\n                },\n\n                plotOptions: {\n                    series: {\n                        animationLimit: 500,\n                        states: {\n                            inactive: {\n                                opacity: 1\n                            }\n                        }\n                    },\n                    mapline: {\n                        enableMouseTracking: false\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    nullColor: '#e8e8e8',\n                    color: '#e8e8e8'\n                }, {\n                    data,\n                    mapData: topology,\n                    joinBy: null,\n                    name: 'Random data',\n                    dataLabels: {\n                        enabled: false,\n                        format: '{point.name}'\n                    },\n                    clip: false\n                }, {\n                    mapData: antarctica,\n                    allAreas: true,\n                    name: 'Antarctica',\n                    clip: false,\n                    opacity: 0.75\n                }, {\n                    type: 'mapline',\n                    data: [{\n                        geometry: {\n                            type: 'LineString',\n                            coordinates: [\n                                [4.90, 53.38], // Amsterdam\n                                [-118.24, 34.05] // Los Angeles\n                            ]\n                        },\n                        color: '#3030d0'\n                    }],\n                    lineWidth: 2\n                }, {\n                    type: 'mappoint',\n                    data: [{\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [4.90, 53.38]\n                        },\n                        name: 'Amsterdam'\n                    }, {\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [-118.24, 34.05]\n                        },\n                        name: 'LA'\n                    }],\n                    color: '#3030d0'\n                }]\n            });\n            console.timeEnd('@mapChart');\n\n        } else {\n            chart.update({\n                mapView: {\n                    projection\n                }\n            });\n        }\n\n\n        if (projection.name === 'LambertConformalConic') {\n            smallChart = Highcharts.mapChart('small-world-container', {\n                chart: {\n                    backgroundColor: 'transparent'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                credits: {\n                    enabled: false\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                exporting: {\n                    enabled: false\n                },\n\n                mapView: {\n                    projection: {\n                        name: 'Orthographic',\n                        rotation: [0, -10, 0]\n                    }\n                },\n\n                plotOptions: {\n                    series: {\n                        enableMouseTracking: false\n                    },\n                    map: {\n                        animationLimit: 500,\n                        allAreas: true,\n                        clip: false,\n                        nullColor: '#e0e0e0',\n                        borderColor: '#ffffff',\n                        borderWidth: 0.25\n                    },\n                    mapline: {\n                        color: Highcharts.getOptions().colors[0]\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    color: '#f8f8f8'\n                }, {\n                    mapData: topology\n                }, {\n                    mapData: antarctica\n                }, {\n                    data: getParallelsGeometries(projection.parallels),\n                    type: 'mapline',\n                    id: 'parallels'\n                }]\n            });\n        }\n\n        // Toggle buttons\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.classList.remove('active')\n        );\n        const button = document.querySelector(\n            `#projection-buttons #${projectionKey}`\n        );\n        button.classList.add('active');\n\n        // Toggle descriptions\n        document.querySelectorAll('#descriptions div').forEach(div => {\n            div.style.display = 'none';\n        });\n        const div = document.querySelector(\n            `#descriptions #description-${projectionKey}`\n        );\n        div.style.display = 'block';\n\n\n        // Toggle projection-dependent panels\n        const panels = (button.getAttribute('data-panels') || '').split(',');\n        document.querySelectorAll('.toggle-panel').forEach(panel => {\n            panel.style.display = panels.includes(panel.id) ? '' : 'none';\n        });\n\n\n    };\n\n\n    const enableInputs = () => {\n\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.addEventListener('click', e => drawMap(e.target.id))\n        );\n\n        document.querySelectorAll('.rotation').forEach(input => {\n            input.addEventListener('input', () => {\n                const rotation = [\n                    document.getElementById('rotation-lambda').value,\n                    document.getElementById('rotation-phi').value,\n                    document.getElementById('rotation-gamma').value\n                ].map(Number);\n\n                document.getElementById('rotation-lambda-output')\n                    .innerText = rotation[0];\n                document.getElementById('rotation-phi-output')\n                    .innerText = rotation[1];\n                document.getElementById('rotation-gamma-output')\n                    .innerText = rotation[2];\n\n                chart.mapView.update({\n                    projection: {\n                        rotation\n                    }\n                }, true, false);\n            });\n        });\n\n        document.querySelectorAll('.preset-rotations a').forEach(input => {\n            input.addEventListener('click', () => {\n                const rotation = input.getAttribute('data-rotation')\n                    .split(',')\n                    .map(Number);\n                rotation.push(0);\n\n                const geodesic = Highcharts.Projection.greatCircle(\n                    chart.mapView.projection.options.rotation,\n                    rotation\n                );\n\n                geodesic.forEach((rotationStep, i) => {\n                    setTimeout(() => {\n                        rotationStep.push(0);\n                        chart.mapView.update({\n                            projection: {\n                                rotation: rotationStep\n                            }\n                        }, true, false);\n\n                        rotationStep.forEach((value, i) => {\n                            const name = ['lambda', 'phi', 'gamma'][i];\n                            document.getElementById(`rotation-${name}`)\n                                .value = Math.round(value);\n                            document.getElementById(`rotation-${name}-output`)\n                                .innerText = Math.round(value);\n                        });\n                    }, 25 * i);\n                });\n            });\n        });\n\n        document.querySelectorAll('.parallels').forEach(input => {\n            input.addEventListener('input', () => {\n                const parallels = [\n                    Number(document.getElementById('parallels-0').value),\n                    Number(document.getElementById('parallels-1').value)\n                ];\n                chart.mapView.update({\n                    projection: {\n                        parallels\n                    }\n                }, true, false);\n                document.getElementById('parallels-0-output')\n                    .innerText = parallels[0];\n                document.getElementById('parallels-1-output')\n                    .innerText = parallels[1];\n\n                if (smallChart) {\n                    smallChart.get('parallels').remove();\n                    smallChart.addSeries({\n                        data: getParallelsGeometries(parallels),\n                        type: 'mapline',\n                        id: 'parallels'\n                    }, true, false);\n                }\n            });\n        });\n    };\n\n    drawMap('equalearth');\n\n    enableInputs();\n})();","css":".main {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n#container {\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.main #small-world-container {\n    max-width: 150px;\n    margin-top: 1rem;\n    min-width: 75px;\n    height: 150px;\n}\n\n.main h1 {\n    font-size: 1.5rem !important;\n}\n\n.main .mt-4 {\n    margin-top: 1.5rem !important;\n    min-width: 25%;\n}\n\n.main .loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n\n.main .btn-group {\n    flex-wrap: wrap;\n}\n\n.main .btn {\n    line-height: 1.5;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    margin: 0.1rem 0;\n}\n\n#descriptions div {\n    display: none;\n}\n.highcharts-menu hr {margin: unset}","html":"\n\n<div class=\"main\">\n    <h1>Highcharts Projection Explorer</h1>\n\n    <div class=\"row\">\n        <div class=\"col-lg-8\">\n            <div id=\"container\"></div>\n\n            <hr>\n\n            <div id=\"projection-buttons\" class=\"buttons row\">\n                <div class=\"col-12\">\n                    <h4 class=\"mt-4\">Projections</h4>\n                    <div class=\"btn-group\">\n                        <button id=\"equalearth\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Equal Earth</button>\n                        <button id=\"miller\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Miller</button>\n                        <button id=\"webmerc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">Web Mercator</button>\n                        <button id=\"ortho\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel,rotation-preset-panel\"\n                            >Ortographic</button>\n                        <button id=\"lcc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel,parallels-panel,small-world-panel\"\n                            >LCC</button>\n                        <button id=\"eqc\" class=\"btn btn-outline-secondary\"\n                            data-panels=\"rotation-panel\">None</button>\n                    </div>\n                </div>\n\n                <div class=\"col-md-6 mt-4 toggle-panel\" id=\"rotation-panel\">\n                    <h4>Rotation</h4>\n\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-lambda\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Lambda → <span class=\"text-muted\" id=\"rotation-lambda-output\"></span>\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-phi\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Phi ↑ <span class=\"text-muted\" id=\"rotation-phi-output\"></span>\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"rotation\" id=\"rotation-gamma\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n                        Gamma ⟲ <span class=\"text-muted\" id=\"rotation-gamma-output\"></span>\n                    </label>\n\n                    <div class=\"mt-4 toggle-panel\" id=\"rotation-preset-panel\">\n                        <h6>Preset rotations</h4>\n                        <div class=\"preset-rotations\">\n                            <a data-rotation=\"-15,0\" href=\"javascript:;\">Africa</a>,\n                            <a data-rotation=\"0,90\" href=\"javascript:;\">Antarctica</a>,\n                            <a data-rotation=\"-90,-40\" href=\"javascript:;\">Asia</a>,\n                            <a data-rotation=\"-140,30\" href=\"javascript:;\">Australia</a>,\n                            <a data-rotation=\"-15,-40\" href=\"javascript:;\">Europe</a>,\n                            <a data-rotation=\"100,-45\" href=\"javascript:;\">North America</a>,\n                            <a data-rotation=\"60,10\" href=\"javascript:;\">South America</a>\n                        </div>\n                    </div>\n                </div>\n\n\n                <div class=\"col-md-4 mt-4 toggle-panel\" id=\"parallels-panel\">\n                    <h4>Parallels</h4>\n                    <label>\n                        <input class=\"parallels\" id=\"parallels-0\" type=\"range\"\n                            min=\"-90\" max=\"90\" value=\"30\" />\n                        <span class=\"text-muted\" id=\"parallels-0-output\">30</span> °N\n                    </label>\n                    <br>\n                    <label>\n                        <input class=\"parallels\" id=\"parallels-1\" type=\"range\"\n                            min=\"-90\" max=\"90\" value=\"40\" />\n                        <span class=\"text-muted\" id=\"parallels-1-output\">40</span> °N\n                    </label>\n                </div>\n\n                <div class=\"col-md-2 md-col-12 toggle-panel\" id=\"small-world-panel\">\n                    <div id=\"small-world-container\"></div>\n\n                </div>\n            </div>\n        </div>\n\n        <div id=\"descriptions\" class=\"mt-4 col-lg-4 mt-lg-0\">\n            <div id=\"description-equalearth\">\n                <h3>Equal Earth projection</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Equal_Earth_projection\"\n                >Equal Earth map projection</a> is an equal-area\n                pseudocylindrical projection for world maps, invented by Bojan\n                Šavrič, Bernhard Jenny, and Tom Patterson in 2018. It is\n                inspired by the widely used Robinson projection, but unlike the\n                Robinson projection, retains the relative size of areas. The\n                projection equations are simple to implement and fast to\n                evaluate.</p>\n                <p>We chose this as the default world map projection for\n                Highcharts because it is visually pleasing like Robinson, but\n                avoids the political problem of rendering high-latitude regions\n                like Europe and North America larger than tropical regions.</p>\n            </div>\n            <div id=\"description-miller\">\n                <h3>Miller projection</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Miller_cylindrical_projection\"\n                >Miller cylindrical projection</a> is a modified Mercator\n                projection, proposed by Osborn Maitland Miller in 1942. Compared\n                to Mercator, the vertical exaggeration of polar areas is\n                smaller, so the relative size of areas is more correct.</p>\n                <p>Highcharts used this as the default map projection for world\n                maps until the Map Collection v2.0 and Highcharts v10.0, when\n                projection math was moved to the client side and EqualEarth\n                chosen as the default world map projection.\n                </p>\n            </div>\n            <div id=\"description-webmerc\">\n                <h3>Web Mercator projection</h3>\n                <p><a\n                href=\"https://en.wikipedia.org/wiki/Web_Mercator_projection\">Web\n                Mercator</a> is a variant of the Mercator map projection and is\n                the de facto standard for Web mapping applications.</p>\n                <p>Web Mercator is primarily created for tiled map services, as\n                when zooming in to smaller scales, the angle between lines on\n                the surface is approximately retained.</p>\n                <p>The great disadvantage of Web Mercator is that areas inflate\n                with distance from the equator. For example, in the world map,\n                Greenland appears roughly the same size as Africa. In reality\n                Africa is 14 times larger, as is apparent from the Equal Earth\n                or Orthographic projections.</p>\n            </div>\n            <div id=\"description-ortho\">\n                <h3>Orthographic projection</h3>\n                <p>The <a\n                href=\"https://pro.arcgis.com/en/pro-app/latest/help/mapping/properties/orthographic.htm\"\n                >orthographic projection</a> is an azimuthal perspective\n                projection, projecting the Earth's surface from an infinite\n                distance to a plane. It gives the illusion of a\n                three-dimensional globe.</p>\n                <p>Its disadvantage is that it fails to render the whole world\n                in one view. However, since the distortion is small at the\n                center of the view, it is great at rendering limited areas of\n                the globe, or at showing the positions of areas on the globe.</p>\n            </div>\n            <div id=\"description-lcc\">\n                <h3>Lambert Conformal Conic</h3>\n                <p>The <a\n                href=\"https://en.wikipedia.org/wiki/Lambert_conformal_conic_projection\">Lambert\n                conformal conic projection (LCC)</a> is a conic map projection\n                used for many national and regional mapping systems.</p>\n                <p>Its advantage lies in mapping smaller areas like countries or\n                continents. Two standard parallels are given, and between these,\n                the distortion is minimal.</p>\n                <p>In Highcharts, LCC is the default projection when loading a\n                map smaller than 180 degrees width and 90 degrees height.</p>\n                <p>For custom use,\n                <a href=\"https://api.highcharts.com/highmaps/mapView.projection.rotation\">rotation</a>\n                should be set to adjust the reference longitude, in addition to\n                the <a\n                href=\"https://api.highcharts.com/highmaps/mapView.projection.parallels\">parallels</a> option.</p>\n            </div>\n            <div id=\"description-eqc\">\n                <h3>No projection</h3>\n                <p>This is the raw <a\n                href=\"https://en.wikipedia.org/wiki/Equirectangular_projection\">Equirectangular\n                projection</a>, where the longitudes and latitudes are directly\n                projected onto the plane, except it doesn't run through the\n                Highcharts projection logic.</p>\n                <p>Notice the lines across the map at high latitudes. This is\n                because the eastern tip of Russia is east of the antimeridian,\n                and thus having longitudes close to -180 and upwards, while\n                connected to the rest of Russia with longitudes from 180 and\n                downwards. In cylindrical and conic projections this is\n                mitigated by doing client-side <em>antimeridial cutting</em>, so\n                that shapes spanning from one side of the plane to the other are\n                cut in two.</p>\n                <p>Also notice how the lack of a real projection causes the line\n                from LA to Amsterdam render as a straight line, instead of a\n                curve like in the real projections.</p>\n            </div>\n        </div>\n    </div>\n</div>\n","npm":"// 安装\nnpm install highcharts@10.3.3 --save\n\n// import 模块 \nimport Highcharts       from 'highcharts/highmaps';\nimport Exporting        from 'highcharts/11.0.0/modules/exporting';\nimport OfflineExporting from 'highcharts/11.0.0/modules/offline-exporting';\nimport BrandDark        from 'highcharts/themes/brand-dark';\n\n// 初始化模块\nExporting(Highcharts);\nOfflineExporting(Highcharts);\nBrandDark(Highcharts);\n","scripts":["https://code.highcharts.com/maps/11.0.0/highmaps.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/10.3.3/themes/brand-dark.js"]},"pre":"map-drilldown-preloaded","next":"rich-info"},"product":"maps","theme":"brand-dark","_global":{"scripts":["https://code.highcharts.com/maps/11.0.0/highmaps.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/10.3.3/themes/brand-dark.js"],"css":".main {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n#container {\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.main #small-world-container {\n    max-width: 150px;\n    margin-top: 1rem;\n    min-width: 75px;\n    height: 150px;\n}\n\n.main h1 {\n    font-size: 1.5rem !important;\n}\n\n.main .mt-4 {\n    margin-top: 1.5rem !important;\n    min-width: 25%;\n}\n\n.main .loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n\n.main .btn-group {\n    flex-wrap: wrap;\n}\n\n.main .btn {\n    line-height: 1.5;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    margin: 0.1rem 0;\n}\n\n#descriptions div {\n    display: none;\n}\n.highcharts-menu hr {margin: unset}","script":"(async () => {\n\n    // Get random data for this sample\n    function getRandomData(topology) {\n        return topology.objects.default.geometries.map(() =>\n            Math.round(Math.random() * 100));\n    }\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json'\n    ).then(response => response.json());\n\n    const antarctica = await fetch(\n        'https://code.highcharts.com/mapdata/custom/antarctica.topo.json'\n    ).then(response => response.json());\n\n    const data = getRandomData(topology);\n\n    // Get geometries for parallels\n    function getParallelsGeometries(parallels) {\n        return parallels.map(lat => {\n            const coordinates = [];\n            for (let lon = -180; lon <= 180; lon += 5) {\n                coordinates.push([lon, lat]);\n            }\n            return {\n                geometry: {\n                    type: 'LineString',\n                    coordinates\n                },\n                lineWidth: lat === 0 ? 2 : undefined\n            };\n        });\n    }\n\n    function getGraticule() {\n        const data = [];\n\n        // Meridians\n        for (let x = -180; x <= 180; x += 15) {\n            data.push({\n                geometry: {\n                    type: 'LineString',\n                    coordinates: x % 90 === 0 ? [\n                        [x, -90],\n                        [x, 0],\n                        [x, 90]\n                    ] : [\n                        [x, -80],\n                        [x, 80]\n                    ]\n                }\n            });\n        }\n\n        // Parallels\n        const parallels = [];\n        for (let y = -90; y <= 90; y += 10) {\n            parallels.push(y);\n        }\n        data.push(...getParallelsGeometries(parallels));\n\n        return data;\n    }\n\n    let chart, smallChart;\n\n    const drawMap = projectionKey => {\n\n        // Apply projection\n        const projection = Highcharts.merge({\n            name: undefined\n        }, {\n            equalearth: {\n                name: 'EqualEarth',\n                projectedBounds: 'world'\n            },\n            lcc: {\n                name: 'LambertConformalConic',\n                parallels: [30, 40],\n                projectedBounds: { x1: -200, y1: -200, x2: 200, y2: 200 }\n            },\n            miller: {\n                name: 'Miller',\n                projectedBounds: 'world'\n            },\n            ortho: {\n                name: 'Orthographic',\n                projectedBounds: 'world'\n            },\n            webmerc: {\n                name: 'WebMercator',\n                projectedBounds: 'world'\n            }\n        }[projectionKey] || {});\n\n        projection.rotation = [\n            document.getElementById('rotation-lambda').value,\n            document.getElementById('rotation-phi').value,\n            document.getElementById('rotation-gamma').value\n        ].map(Number);\n\n        // Initialize the chart\n        if (!chart) {\n\n            console.time('@mapChart');\n\n            chart = Highcharts.mapChart('container', {\n                chart: {\n                    height: '65%'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                mapNavigation: {\n                    enabled: true,\n                    enableDoubleClickZoomTo: true,\n                    buttonOptions: {\n                        verticalAlign: 'bottom'\n                    }\n                },\n\n                mapView: {\n                    projection\n                    /*\n                    projection: {\n                        name: 'WebMercator'\n                    },\n                    zoom: 4,\n                    center: [6.5, 61]\n                    */\n                },\n\n                colorAxis: {\n                    tickPixelInterval: 100,\n                    minColor: '#F1EEF6',\n                    maxColor: '#900037'\n                },\n\n                tooltip: {\n                    pointFormat: '{point.name}: {point.value}'\n                },\n\n                plotOptions: {\n                    series: {\n                        animationLimit: 500,\n                        states: {\n                            inactive: {\n                                opacity: 1\n                            }\n                        }\n                    },\n                    mapline: {\n                        enableMouseTracking: false\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    nullColor: '#e8e8e8',\n                    color: '#e8e8e8'\n                }, {\n                    data,\n                    mapData: topology,\n                    joinBy: null,\n                    name: 'Random data',\n                    dataLabels: {\n                        enabled: false,\n                        format: '{point.name}'\n                    },\n                    clip: false\n                }, {\n                    mapData: antarctica,\n                    allAreas: true,\n                    name: 'Antarctica',\n                    clip: false,\n                    opacity: 0.75\n                }, {\n                    type: 'mapline',\n                    data: [{\n                        geometry: {\n                            type: 'LineString',\n                            coordinates: [\n                                [4.90, 53.38], // Amsterdam\n                                [-118.24, 34.05] // Los Angeles\n                            ]\n                        },\n                        color: '#3030d0'\n                    }],\n                    lineWidth: 2\n                }, {\n                    type: 'mappoint',\n                    data: [{\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [4.90, 53.38]\n                        },\n                        name: 'Amsterdam'\n                    }, {\n                        geometry: {\n                            type: 'Point',\n                            coordinates: [-118.24, 34.05]\n                        },\n                        name: 'LA'\n                    }],\n                    color: '#3030d0'\n                }]\n            });\n            console.timeEnd('@mapChart');\n\n        } else {\n            chart.update({\n                mapView: {\n                    projection\n                }\n            });\n        }\n\n\n        if (projection.name === 'LambertConformalConic') {\n            smallChart = Highcharts.mapChart('small-world-container', {\n                chart: {\n                    backgroundColor: 'transparent'\n                },\n\n                title: {\n                    text: undefined\n                },\n\n                credits: {\n                    enabled: false\n                },\n\n                legend: {\n                    enabled: false\n                },\n\n                exporting: {\n                    enabled: false\n                },\n\n                mapView: {\n                    projection: {\n                        name: 'Orthographic',\n                        rotation: [0, -10, 0]\n                    }\n                },\n\n                plotOptions: {\n                    series: {\n                        enableMouseTracking: false\n                    },\n                    map: {\n                        animationLimit: 500,\n                        allAreas: true,\n                        clip: false,\n                        nullColor: '#e0e0e0',\n                        borderColor: '#ffffff',\n                        borderWidth: 0.25\n                    },\n                    mapline: {\n                        color: Highcharts.getOptions().colors[0]\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    color: '#f8f8f8'\n                }, {\n                    mapData: topology\n                }, {\n                    mapData: antarctica\n                }, {\n                    data: getParallelsGeometries(projection.parallels),\n                    type: 'mapline',\n                    id: 'parallels'\n                }]\n            });\n        }\n\n        // Toggle buttons\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.classList.remove('active')\n        );\n        const button = document.querySelector(\n            `#projection-buttons #${projectionKey}`\n        );\n        button.classList.add('active');\n\n        // Toggle descriptions\n        document.querySelectorAll('#descriptions div').forEach(div => {\n            div.style.display = 'none';\n        });\n        const div = document.querySelector(\n            `#descriptions #description-${projectionKey}`\n        );\n        div.style.display = 'block';\n\n\n        // Toggle projection-dependent panels\n        const panels = (button.getAttribute('data-panels') || '').split(',');\n        document.querySelectorAll('.toggle-panel').forEach(panel => {\n            panel.style.display = panels.includes(panel.id) ? '' : 'none';\n        });\n\n\n    };\n\n\n    const enableInputs = () => {\n\n        document.querySelectorAll('#projection-buttons button').forEach(btn =>\n            btn.addEventListener('click', e => drawMap(e.target.id))\n        );\n\n        document.querySelectorAll('.rotation').forEach(input => {\n            input.addEventListener('input', () => {\n                const rotation = [\n                    document.getElementById('rotation-lambda').value,\n                    document.getElementById('rotation-phi').value,\n                    document.getElementById('rotation-gamma').value\n                ].map(Number);\n\n                document.getElementById('rotation-lambda-output')\n                    .innerText = rotation[0];\n                document.getElementById('rotation-phi-output')\n                    .innerText = rotation[1];\n                document.getElementById('rotation-gamma-output')\n                    .innerText = rotation[2];\n\n                chart.mapView.update({\n                    projection: {\n                        rotation\n                    }\n                }, true, false);\n            });\n        });\n\n        document.querySelectorAll('.preset-rotations a').forEach(input => {\n            input.addEventListener('click', () => {\n                const rotation = input.getAttribute('data-rotation')\n                    .split(',')\n                    .map(Number);\n                rotation.push(0);\n\n                const geodesic = Highcharts.Projection.greatCircle(\n                    chart.mapView.projection.options.rotation,\n                    rotation\n                );\n\n                geodesic.forEach((rotationStep, i) => {\n                    setTimeout(() => {\n                        rotationStep.push(0);\n                        chart.mapView.update({\n                            projection: {\n                                rotation: rotationStep\n                            }\n                        }, true, false);\n\n                        rotationStep.forEach((value, i) => {\n                            const name = ['lambda', 'phi', 'gamma'][i];\n                            document.getElementById(`rotation-${name}`)\n                                .value = Math.round(value);\n                            document.getElementById(`rotation-${name}-output`)\n                                .innerText = Math.round(value);\n                        });\n                    }, 25 * i);\n                });\n            });\n        });\n\n        document.querySelectorAll('.parallels').forEach(input => {\n            input.addEventListener('input', () => {\n                const parallels = [\n                    Number(document.getElementById('parallels-0').value),\n                    Number(document.getElementById('parallels-1').value)\n                ];\n                chart.mapView.update({\n                    projection: {\n                        parallels\n                    }\n                }, true, false);\n                document.getElementById('parallels-0-output')\n                    .innerText = parallels[0];\n                document.getElementById('parallels-1-output')\n                    .innerText = parallels[1];\n\n                if (smallChart) {\n                    smallChart.get('parallels').remove();\n                    smallChart.addSeries({\n                        data: getParallelsGeometries(parallels),\n                        type: 'mapline',\n                        id: 'parallels'\n                    }, true, false);\n                }\n            });\n        });\n    };\n\n    drawMap('equalearth');\n\n    enableInputs();\n})();"},"hidePageCover":true}}]
