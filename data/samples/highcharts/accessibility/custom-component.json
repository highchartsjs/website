{"js":"/*\n    This is an advanced demo showing how to create custom accessibility\n    functionality for a chart. This allows us to add elements to the\n    keyboard navigation, as well as perform accessibility related tasks\n    whenever updates are made to the chart.\n*/\n\n// Create a basic chart\nvar chart = Highcharts.chart('container', {\n    xAxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    },\n\n    series: [{\n        data: [29.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6,\n            148.5, 216.4, 194.1, 95.6, 54.4]\n    }]\n});\n\n\n// Add a custom button. We add this to the chart, and store it in our own\n// namespace to avoid conflicts with other chart properties.\nchart.myNamespace = {};\nchart.myNamespace.myButton = chart.renderer.button(\n    'Custom button', 60, 10, function () {\n        alert('Custom Button Pressed');\n    }\n).add();\n\n\n// Create the custom accessibility component for the chart. This class inherits\n// from the AccessibilityComponent class.\nvar CustomComponent = function (chart) {\n    this.initBase(chart);\n};\nCustomComponent.prototype = new Highcharts.AccessibilityComponent();\nHighcharts.extend(CustomComponent.prototype, {\n\n    // Perform tasks to be done when the chart is updated\n    onChartUpdate: function () {\n        // Get our button if it exists, and set attributes on it\n        var namespace = this.chart.myNamespace || {};\n        if (namespace.myButton) {\n            namespace.myButton.attr({\n                role: 'button',\n                tabindex: -1\n            });\n            Highcharts.A11yChartUtilities.unhideChartElementFromAT(\n                this.chart, namespace.myButton.element\n            );\n        }\n    },\n\n    // Define keyboard navigation for this component\n    getKeyboardNavigation: function () {\n        var keys = this.keyCodes,\n            chart = this.chart,\n            namespace = chart.myNamespace || {},\n            component = this;\n\n        return new Highcharts.KeyboardNavigationHandler(chart, {\n            keyCodeMap: [\n                // On arrow/tab we just move to the next chart element.\n                // If we had multiple buttons we wanted to group together,\n                // we could move between them here.\n                [[\n                    keys.tab, keys.up, keys.down, keys.left, keys.right\n                ], function (keyCode, e) {\n                    return this.response[\n                        keyCode === this.tab && e.shiftKey ||\n                        keyCode === keys.left || keyCode === keys.up ?\n                            'prev' : 'next'\n                    ];\n                }],\n\n                // Space/enter means we click the button\n                [[\n                    keys.space, keys.enter\n                ], function () {\n                    // Fake a click event on the button element\n                    var buttonElement = namespace.myButton &&\n                            namespace.myButton.element;\n                    if (buttonElement) {\n                        component.fakeClickEvent(buttonElement);\n                    }\n                    return this.response.success;\n                }]\n            ],\n\n            // Focus button initially\n            init: function () {\n                var buttonElement = namespace.myButton &&\n                        namespace.myButton.element;\n                if (buttonElement && buttonElement.focus) {\n                    buttonElement.focus();\n                }\n            }\n        });\n    }\n});\n\n\n// Update the chart with the new component, also adding it in the keyboard\n// navigation order\nchart.update({\n    accessibility: {\n        customComponents: {\n            customComponent: new CustomComponent(chart)\n        },\n        keyboardNavigation: {\n            order: ['customComponent', 'series', 'chartMenu', 'legend']\n        }\n    }\n});\n","css":"#container {\n    max-width: 800px;\n    height: 400px;\n    margin: 1em auto;\n}\n\ncaption {\n    padding-bottom: 15px;\n    font-family: Verdana, sans-serif;\n    font-size: 1.2em;\n    color: #555;\n}\n\ntable {\n    font-family: Verdana, sans-serif;\n    font-size: 12pt;\n    border-collapse: collapse;\n    border: 1px solid #ebebeb;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n}\n\ntable tr:nth-child(odd) {\n    background-color: #fff;\n}\n\ntable tr:nth-child(even) {\n    background-color: #fcf9f9;\n}\n\nth {\n    font-weight: 600;\n    padding: 10px;\n}\n","html":"<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts    from 'highcharts';\nimport Exporting     from 'highcharts/modules/exporting';\nimport ExportData    from 'highcharts/modules/export-data';\nimport Accessibility from 'highcharts/modules/accessibility';\nimport Zh_cn         from 'https://code.hcharts.cn/plugins/zh_cn.js';\n\n// 初始化模块\nExporting(Highcharts);\nExportData(Highcharts);\nAccessibility(Highcharts);\nZh_cn(Highcharts);\n","scripts":["https://code.hcharts.cn/10.3.2/highcharts.js","https://code.hcharts.cn/10.3.2/modules/exporting.js","https://code.hcharts.cn/10.3.2/modules/export-data.js","https://code.hcharts.cn/10.3.2/modules/accessibility.js","https://code.hcharts.cn/plugins/zh_cn.js"]}