{"js":"var minute = 1000 * 60,\n    startTime = +new Date(),\n    dateTimeLabelFormats = {\n        day: '%H:%M',\n        hour: '%H:%M',\n        minute: '%H:%M',\n        second: '%H:%M:%S',\n        millisecond: '%H:%M:%S'\n    },\n    chart = Highcharts.chart('balanceChart', {\n        chart: {\n            type: 'spline'\n        },\n        title: {\n            text: 'Account balance'\n        },\n        legend: {\n            enabled: false\n        },\n        caption: {\n            text: 'Displays balance of your bank accounts over time.'\n        },\n        accessibility: {\n            announceNewData: {\n                enabled: true,\n                announcementFormatter: function (allSeries, newSeries, newPoint) {\n                    var describer = Highcharts.SeriesAccessibilityDescriber,\n                        getPointXDescription = describer.getPointXDescription,\n                        getPointValueDescription = describer.getPointValueDescription;\n\n                    if (newPoint) {\n                        return 'Account balance updated. New data point: Time ' +\n                            getPointXDescription(newPoint) + ', ' +\n                            getPointValueDescription(newPoint) + '.';\n                    }\n                    return false;\n                }\n            }\n        },\n        tooltip: {\n            dateTimeLabelFormats: dateTimeLabelFormats,\n            valuePrefix: '$',\n            pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.y}</b><br/>- Checking: ${point.checking}<br/>- Savings: ${point.savings}'\n        },\n        xAxis: {\n            type: 'datetime',\n            dateTimeLabelFormats: dateTimeLabelFormats\n        },\n        yAxis: {\n            max: 14000,\n            min: 0,\n            title: {\n                text: 'Balance'\n            },\n            labels: {\n                format: '${value}'\n            }\n        },\n        series: [{\n            id: 'balance',\n            name: 'Total account balance',\n            keys: ['x', 'y', 'checking', 'savings'],\n            data: [\n                [0, 11000, 2000, 9000],\n                [minute * 2, 12500, 3500, 9000],\n                [minute * 4, 12400, 3400, 9000],\n                [minute * 6, 11400, 2400, 9000],\n                [minute * 8, 11900, 2900, 9000],\n                [minute * 10, 12000, 3000, 9000]\n            ]\n        }]\n    });\n\n\n// Code for handling the pay bill form\nvar balance = {\n        checking: 3000,\n        savings: 9000\n    },\n    fromAccount = document.getElementById('account-select'),\n    payAmount = document.getElementById('pay-amount'),\n    accountBalance = document.getElementById('account-balance');\n\n// Update balance when account is selected\nfromAccount.onchange = function () {\n    var accountID = fromAccount.options[fromAccount.selectedIndex].value;\n    accountBalance.innerHTML = balance[accountID];\n};\n\n// Add balance data when paying a bill\ndocument.getElementById('pay').onclick = function () {\n    var time = +new Date() - startTime + 10 * minute,\n        accountID = fromAccount.options[fromAccount.selectedIndex].value,\n        newBalance = Math.round(parseFloat(accountBalance.innerHTML) -\n            parseFloat(payAmount.value));\n\n    if (newBalance >= 0) {\n        accountBalance.innerHTML = newBalance;\n        balance[accountID] = newBalance;\n        chart.get('balance').addPoint({\n            x: Math.round(time / 1000) * 1000,\n            y: balance.checking + balance.savings,\n            checking: balance.checking,\n            savings: balance.savings\n        });\n    }\n};\n\ndocument.getElementById('distribution').onclick = function () {\n    var color1 = 'rgba(180, 60, 60, 0.6)',\n        color2 = 'rgba(0, 100, 180, 0.6)',\n        newData = [\n            { name: 'Checking', y: balance.checking, color: color1 },\n            { name: 'Savings', y: balance.savings, color: color2 }\n        ],\n        distributionSeries = chart.get('distribution');\n    document.getElementById('distribution').innerHTML = 'Update distribution';\n    if (distributionSeries) {\n        distributionSeries.setData(newData);\n    } else {\n        chart.addSeries({\n            type: 'pie',\n            id: 'distribution',\n            name: 'Balance distribution',\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span><b>${point.y}</b>'\n            },\n            center: [90, 180],\n            size: 100,\n            dataLabels: {\n                distance: 0\n            },\n            showInLegend: false,\n            data: newData\n        });\n    }\n};\n","css":"#container {\n    height: 450px;\n    max-width: 1300px;\n    margin: 0 auto;\n}\n\n#balanceChart {\n    width: 70%;\n    height: 400px;\n    float: left;\n    margin: 0;\n}\n\n#payBillForm {\n    float: left;\n    width: 25%;\n    margin: 0;\n    padding-left: 5%;\n}\n\n#payBillForm > label {\n    display: block;\n    margin: 10px;\n}\n\n#pay {\n    margin: 10px;\n}\n\ncaption {\n    padding-bottom: 15px;\n    font-family: Verdana, sans-serif;\n    font-size: 1.2em;\n    color: #555;\n}\n\ntable {\n    font-family: Verdana, sans-serif;\n    font-size: 12pt;\n    border-collapse: collapse;\n    border: 1px solid #ebebeb;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n}\n\ntable tr:nth-child(odd) {\n    background-color: #fff;\n}\n\ntable tr:nth-child(even) {\n    background-color: #fcf9f9;\n}\n\nth {\n    font-weight: 600;\n    padding: 10px;\n}\n","html":"<div id=\"container\">\n    <div id=\"balanceChart\"></div>\n    <div id=\"payBillForm\">\n        <h2>Pay bill</h2>\n        <label>From account:\n            <select id=\"account-select\">\n                <option value=\"checking\" selected>Checking account</option>\n                <option value=\"savings\">Savings account</option>\n            </select>\n        </label>\n        <label>Account balance: $<span id=\"account-balance\">2900</span></label>\n        <label>To account:\n            <select>\n                <option selected>Gas bill</option>\n                <option>Water bill</option>\n                <option>Mortgage</option>\n            </select>\n        </label>\n        <label>Pay amount: $<input type=\"number\" id=\"pay-amount\" /></label>\n        <button id=\"pay\">Pay</button>\n        <button id=\"distribution\">Show distribution</button>\n    </div>\n</div>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts    from 'highcharts';\nimport Exporting     from 'highcharts/modules/exporting';\nimport ExportData    from 'highcharts/modules/export-data';\nimport Accessibility from 'highcharts/modules/accessibility';\n\n// 初始化模块\nExporting(Highcharts);\nExportData(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/11.0.0/modules/exporting.js","https://code.highcharts.com/11.0.0/modules/export-data.js","https://code.highcharts.com/11.0.0/modules/accessibility.js"]}