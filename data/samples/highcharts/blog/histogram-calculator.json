{"js":"Highcharts.setOptions({\n    global: {\n        useUTC: false\n    },\n    colors: [\n        'rgba( 0,   154, 253, 0.9 )', // bright blue\n        'rgba( 253, 99,  0,   0.9 )', // bright orange\n        'rgba( 40,  40,  56,  0.9 )', // dark\n        'rgba( 253, 0,   154, 0.9 )', // bright pink\n        'rgba( 154, 253, 0,   0.9 )', // bright green\n        'rgba( 145, 44,  138, 0.9 )', // mid purple\n        'rgba( 45,  47,  238, 0.9 )', // mid blue\n        'rgba( 177, 69,  0,   0.9 )', // dark orange\n        'rgba( 140, 140, 156, 0.9 )', // mid\n        'rgba( 238, 46,  47,  0.9 )', // mid red\n        'rgba( 44,  145, 51,  0.9 )', // mid green\n        'rgba( 103, 16,  192, 0.9 )' // dark purple\n    ],\n    chart: {\n        alignTicks: false,\n        type: '',\n        margin: [60, 25, 100, 90],\n        style: {\n            fontFamily: 'Abel,serif'\n        },\n        events: {\n            load: function () {\n                this.credits.element.onclick = function () {\n                    window.open(\n                        'https://stackoverflow.com/users/1011544/jlbriggs?tab=profile'\n                    );\n                };\n            }\n        }\n    },\n    credits: {\n        text: 'https://stackoverflow.com/users/1011544/jlbriggs',\n        href: 'https://stackoverflow.com/users/1011544/jlbriggs?tab=profile'\n    },\n    title: {\n        text: 'Generate a Histogram',\n        align: 'left',\n        margin: 10,\n        x: 50,\n        style: {\n            fontWeight: 'bold',\n            color: 'rgba(0,0,0,.9)'\n        }\n    },\n    subtitle: {\n        text: 'From raw data array',\n        align: 'left',\n        x: 52\n    },\n    legend: {\n        enabled: true\n    },\n    plotOptions: {\n        area: {\n            lineWidth: 1,\n            marker: {\n                enabled: false,\n                symbol: 'circle',\n                radius: 4\n            }\n        },\n        arearange: {\n            lineWidth: 1\n        },\n        areaspline: {\n            lineWidth: 1,\n            marker: {\n                enabled: false,\n                symbol: 'circle',\n                radius: 4\n            }\n        },\n        areasplinerange: {\n            lineWidth: 1\n        },\n        boxplot: {\n            groupPadding: 0.05,\n            pointPadding: 0.05,\n            fillColor: 'rgba(255,255,255,.75)'\n        },\n        bubble: {\n            minSize: '0.25%',\n            maxSize: '17%'\n        },\n        column: {\n            // stacking:'normal',\n            groupPadding: 0.05,\n            pointPadding: 0.05\n        },\n        columnrange: {\n            groupPadding: 0.05,\n            pointPadding: 0.05\n        },\n        errorbar: {\n            groupPadding: 0.05,\n            pointPadding: 0.05,\n            showInLegend: true\n        },\n        line: {\n            lineWidth: 1,\n            marker: {\n                enabled: false,\n                symbol: 'circle',\n                radius: 4\n            }\n        },\n        scatter: {\n            marker: {\n                symbol: 'circle',\n                radius: 5\n            }\n        },\n        spline: {\n            lineWidth: 1,\n            marker: {\n                enabled: false,\n                symbol: 'circle',\n                radius: 4\n            }\n        },\n        series: {\n            shadow: false,\n            borderWidth: 0,\n            states: {\n                hover: {\n                    lineWidthPlus: 0\n                }\n            }\n        }\n    },\n    xAxis: {\n        title: {\n            text: 'X Axis Title',\n            rotation: 0,\n            textAlign: 'center',\n            style: {\n                color: 'rgba(0,0,0,.9)'\n            }\n        },\n        labels: {\n            style: {\n                color: 'rgba(0,0,0,.9)',\n                fontSize: '9px'\n            }\n        },\n        lineWidth: 0.5,\n        lineColor: 'rgba(0,0,0,.5)',\n        tickWidth: 0.5,\n        tickLength: 3,\n        tickColor: 'rgba(0,0,0,.75)'\n    },\n    yAxis: {\n        minPadding: 0,\n        maxPadding: 0,\n        gridLineColor: 'rgba(204,204,204,.25)',\n        gridLineWidth: 0.5,\n        title: {\n            text: 'Y Axis<br/>Title',\n            rotation: 0,\n            textAlign: 'right',\n            style: {\n                color: 'rgba(0,0,0,.9)'\n            }\n        },\n        labels: {\n            style: {\n                color: 'rgba(0,0,0,.9)',\n                fontSize: '9px'\n            }\n        },\n        lineWidth: 0.5,\n        lineColor: 'rgba(0,0,0,.5)',\n        tickWidth: 0.5,\n        tickLength: 3,\n        tickColor: 'rgba(0,0,0,.75)'\n    }\n});\n\nconst randomData = (points, positive, multiplier) => {\n    points = !points ? 1 : points;\n    multiplier = !multiplier ? 1 : multiplier;\n\n    function rnd() {\n        return ((\n            Math.random() +\n            Math.random() +\n            Math.random() +\n            Math.random() +\n            Math.random() +\n            Math.random()\n        ) - 3) / 3;\n    }\n    var rData = [];\n    for (var i = 0; i < points; i++) {\n        var val = rnd();\n        val = positive === true ? Math.abs(val) : val;\n        val = multiplier > 1 ? (val * multiplier) : val;\n        rData.push(val);\n    }\n    return rData;\n};\n\nconst binData = data => {\n    var hData = [], // the output array\n        size = data.length, // how many data points\n        bins = Math.round(Math.sqrt(size)); // determine how many bins we need\n    bins = bins > 50 ? 50 : bins; // adjust if more than 50 cells\n    var max = Math.max.apply(null, data), // lowest data value\n        min = Math.min.apply(null, data), // highest data value\n        range = max - min, // total range of the data\n        width = range / bins, // size of the bins\n        binBottom, // place holders for the bounds of each bin\n        binTop;\n\n    // loop through the number of cells\n    for (var i = 0; i < bins; i++) {\n\n        // set the upper and lower limits of the current cell\n        binBottom = min + (i * width);\n        binTop = binBottom + width;\n\n        // . check for and set the x value of the bin\n        if (!hData[i]) {\n            hData[i] = [];\n            hData[i][0] = binBottom + (width / 2);\n        }\n\n        // loop through the data to see if it fits in this bin\n        for (var j = 0; j < size; j++) {\n            var x = data[j];\n\n            // adjust if it's the first pass\n            binBottom = i === 0 && j === 0 ? binBottom -= 1 : binBottom;\n\n            // if it fits in the bin, add it\n            if (x > binBottom && x <= binTop) {\n                hData[i][1] = !hData[i][1] ? 1 : hData[i][1] += 1;\n            }\n        }\n    }\n    hData.forEach((point, i) => {\n        if (typeof point[1] === 'undefined') {\n            hData[i][1] = null;\n        }\n    });\n    return hData;\n};\n\nconst numSort = (a, b) => a - b;\n\n\n// get any percentile from an array\nconst getPercentile = (data, percentile) => {\n    data.sort(numSort);\n    var index = (percentile / 100) * data.length;\n    var result;\n    if (Math.floor(index) === index) {\n        result = (data[(index - 1)] + data[index]) / 2;\n    } else {\n        result = data[Math.floor(index)];\n    }\n    return result;\n};\n// get the median absolute deviation\nconst getMad = data => {\n    var median = getPercentile(data, 50);\n    var devs = [];\n    data.forEach(point => {\n        devs.push(Math.abs(point - median));\n    });\n    var mad = getPercentile(devs, 50);\n    var output = {};\n    output.median = median;\n    output.mad = mad;\n    return output;\n};\n\nvar chart, mad, binnedData, rawData;\n\nrawData = randomData(10000); // generate random normal data points\nbinnedData = binData(rawData); // bin the data\nmad = getMad(rawData); // return the median, and the median absolute deviation\n\nchart = Highcharts.chart('container', {\n    chart: {\n        type: 'column',\n        margin: [100, 25, 100, 50]\n    },\n    legend: {\n        enabled: true\n    },\n    tooltip: {},\n    plotOptions: {\n        series: {\n            pointPadding: 0,\n            groupPadding: 0,\n            borderWidth: 0.5,\n            borderColor: 'rgba(255,255,255,0.5)'\n        }\n    },\n    xAxis: [{\n        title: {\n            text: 'Range'\n        }\n\n    }, {\n        linkedTo: 0,\n        opposite: true,\n        gridLineWidth: 0.5,\n        gridLineColor: 'rgba(0,0,0,0.25)',\n        gridZIndex: 8,\n        tickPositions: [\n            mad.median - (mad.mad * 3),\n            mad.median - (mad.mad * 2),\n            mad.median - mad.mad,\n            mad.median,\n            mad.median + mad.mad,\n            mad.median + (mad.mad * 2),\n            mad.median + (mad.mad * 3)\n        ],\n        title: {\n            text: 'Median and MAD'\n        },\n        labels: {\n            style: {\n                color: 'rgba(0,0,0,1)',\n                fomntWeight: 'bold'\n            },\n            formatter: function () {\n                return Highcharts.numberFormat(this.value, 2);\n            }\n        }\n    }],\n    yAxis: {\n        title: {\n            text: 'Frequency'\n        },\n        min: 0\n    }\n});\n\n// add the data series to the chart\nchart.addSeries({\n    name: 'Distribution',\n    data: binnedData\n});\n\n// add MAD plotbands\n/*\nchart.xAxis[0].addPlotBand({\n  from: mad.median - (mad.mad * 3),\n  to: mad.median + (mad.mad * 3),\n  color: 'rgba(255,255,255,0.25)',\n  zIndex: 5\n});\nchart.xAxis[0].addPlotBand({\n  from: mad.median - (mad.mad * 2),\n  to: mad.median + (mad.mad * 2),\n  color: 'rgba(255,255,255,0.25)',\n  zIndex: 6\n});\nchart.xAxis[0].addPlotBand({\n  from: mad.median - mad.mad,\n  to: mad.median + mad.mad,\n  color: 'rgba(255,255,255,0.25)',\n  zIndex: 7\n});\n*/\n// add Median plotline\nchart.xAxis[0].addPlotLine({\n    value: mad.median,\n    width: 1,\n    color: 'rgba(0,0,0,0.5)',\n    zIndex: 8\n});\n","css":"@import \"https://fonts.googleapis.com/css?family=Changa+One|Loved+by+the+King|Fredericka+the+Great|Droid+Serif:400,700,400italic|Abel|Oswald:400,300,700\";\n\nbody {\n    font-family: Abel, Calibri, Helvetica, sans-serif;\n    font-size: 95%;\n}\n","html":"\n<div id=\"container\" style=\"width:700px;height:600px;margin:1.5em 1em;\"></div>","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts     from 'highcharts';\nimport HighchartsMore from 'highcharts/highcharts-more';\nimport Exporting      from 'highcharts/modules/exporting';\nimport Accessibility  from 'highcharts/modules/accessibility';\n\n// 初始化模块\nHighchartsMore(Highcharts);\nExporting(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/11.0.0/highcharts-more.js","https://code.highcharts.com/11.0.0/modules/exporting.js","https://code.highcharts.com/11.0.0/modules/accessibility.js"]}