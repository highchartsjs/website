{"js":"Highcharts.addEvent(Highcharts.Chart, 'render', function () {\n    var chart = this;\n    this.series.forEach(function (s) {\n        s.points.forEach(function (p) {\n            var drilldownConnector = p.drilldownConnector && chart.get(p.drilldownConnector.seriesId),\n                path;\n            if (drilldownConnector) {\n\n                path = [\n                    'M',\n                    chart.plotLeft + p.shapeArgs.x + Math.cos(p.shapeArgs.start) * p.shapeArgs.r,\n                    chart.plotTop + p.shapeArgs.y + Math.sin(p.shapeArgs.start) * p.shapeArgs.r,\n                    'L',\n                    chart.plotLeft + drilldownConnector.center[0],\n                    chart.plotTop + drilldownConnector.center[1] - drilldownConnector.center[2] / 2,\n                    'M',\n                    chart.plotLeft + p.shapeArgs.x + Math.cos(p.shapeArgs.end) * p.shapeArgs.r,\n                    chart.plotTop + p.shapeArgs.y + Math.sin(p.shapeArgs.end) * p.shapeArgs.r,\n                    'L',\n                    chart.plotLeft + drilldownConnector.center[0],\n                    chart.plotTop + drilldownConnector.center[1] + drilldownConnector.center[2] / 2\n                ];\n\n                if (!p.drilldownConnectorGraphicUnbind) {\n                    p.drilldownConnectorGraphicUnbind = Highcharts.addEvent(s, 'afterAnimate', function () {\n                        if (!p.drilldownConnectorGraphic) {\n                            p.drilldownConnectorGraphic = chart.renderer\n                                .path([\n                                    'M',\n                                    path[1], path[2],\n                                    'L',\n                                    path[1], path[2],\n                                    'M',\n                                    path[7], path[8],\n                                    'L',\n                                    path[7], path[8]\n                                ])\n                                .attr({\n                                    stroke: 'gray',\n                                    'stroke-width': 1\n                                })\n                                .animate({\n                                    d: path\n                                })\n                                .add();\n                        }\n                    });\n                }\n\n                if (p.drilldownConnectorGraphic) {\n                    p.drilldownConnectorGraphic.animate({\n                        d: path\n                    });\n                }\n\n            }\n        });\n    });\n});\n\n\nHighcharts.chart('container', {\n\n    title: {\n        text: 'Drilldown connector'\n    },\n\n    subtitle: {\n        text: 'A Highcharts study'\n    },\n\n    plotOptions: {\n        pie: {\n            dataLabels: {\n                distance: -30\n            }\n        }\n    },\n    series: [{\n        data: [1, {\n            drilldownConnector: {\n                seriesId: 'secondary'\n            },\n            y: 1\n        }, 1, 1, 1],\n        type: 'pie',\n        center: ['25%', '50%']\n    }, {\n        data: [1, 4, 3, 5],\n        colors: [\n            Highcharts.getOptions().colors[1],\n            Highcharts.color(Highcharts.getOptions().colors[1]).brighten(0.1).get(),\n            Highcharts.color(Highcharts.getOptions().colors[1]).brighten(0.2).get(),\n            Highcharts.color(Highcharts.getOptions().colors[1]).brighten(0.3).get()\n        ],\n        type: 'pie',\n        center: ['75%', '50%'],\n        id: 'secondary'\n    }]\n});\n","css":"#container {\n    min-width: 300px;\n    max-width: 800px;\n    margin: 1em auto;\n}\n","html":"<div id=\"container\"></div>","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\nimport Exporting  from 'highcharts/modules/exporting';\n\n// 初始化模块\nExporting(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js","https://code.highcharts.com/11.0.1/modules/exporting.js"]}