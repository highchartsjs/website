{"js":"function simplifyPath(data, epsilon) {\n    function douglasPecker(data, epsilon) {\n        if (data.length <= 2) {\n            return [data[0]];\n        }\n        var result = [],\n            dmax = 0,\n            index = 0,\n            start = data[0],\n            end = data[data.length - 1],\n            point,\n            i,\n            d;\n\n        // recurring factors\n        var m = (end.y - start.y) / (end.x - start.x),\n            b = start.y - (m * start.x);\n\n        // Find furthest point\n        for (i = 1; i <= data.length - 2; i++) {\n            point = data[i];\n            d = Math.abs(point.y - (m * point.x) - b) / Math.sqrt(Math.pow(m, 2) + 1);\n            if (d > dmax) {\n                dmax = d;\n                index = i;\n            }\n        }\n        // Evaluate\n        if (dmax >= epsilon) {\n            result = result.concat(douglasPecker(data.slice(0, index + 1), epsilon));\n            result = result.concat(douglasPecker(data.slice(index + 1, data.length), epsilon));\n        } else {\n            result = [start];\n        }\n        return result;\n    }\n    // CALL RDP Function\n    var arr = douglasPecker(data, epsilon);\n    arr.push(data[data.length - 1]);\n    return arr;\n}\n\n\nfunction getData(n) {\n    var arr = [],\n        i,\n        a,\n        b,\n        c,\n        spike;\n    for (i = 0; i < n; i++) {\n        if (i % 100 === 0) {\n            a = 2 * Math.random();\n        }\n        if (i % 1000 === 0) {\n            b = 2 * Math.random();\n        }\n        if (i % 10000 === 0) {\n            c = 2 * Math.random();\n        }\n        if (i % 50000 === 0) {\n            spike = 10;\n        } else {\n            spike = 0;\n        }\n        arr.push({\n            x: i,\n            y: 2 * Math.sin(i / 100) + a + b + c + spike + Math.random()\n        });\n    }\n    return arr;\n}\n\n\nvar rawData = getData(500000),\n    simplifiedData = simplifyPath(rawData, 3);\n\nconsole.log('Raw data length:', rawData.length, 'Simplifid data length:', simplifiedData.length);\nrawData.length = 0; // clear memory\n\nconsole.time('Highcharts.Chart');\nHighcharts.chart('container', {\n\n    title: {\n        text: 'Trimmed Highcharts'\n    },\n\n    subtitle: {\n        text: 'The points are filtered through the Douglas Peucker algorithm<br>View console for benchmarks'\n    },\n\n    series: [{\n        data: simplifiedData,\n        turboThreshold: 0\n    }]\n\n});\nconsole.timeEnd('Highcharts.Chart');\n","css":"#container {\n    height: 400px;\n    width: 800px;\n    margin: 0 auto;\n}\n","html":"\n<div id=\"container\"></div>","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\n\n// 初始化模块\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js"]}