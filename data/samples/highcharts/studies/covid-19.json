{"js":"let countries;\nlet population;\n\nlet mapChart;\nlet countryChart;\n\nconst getConfig = type => ({\n    confirmed: {\n        day0Value: 200,\n        header: 'Confirmed Covid-19 Cases',\n        name: 'Confirmed cases',\n        valueSuffix: 'confirmed cases'\n    },\n    deaths: {\n        day0Value: 10,\n        header: 'Deaths caused by Covid-19',\n        name: 'Deaths',\n        valueSuffix: 'deaths'\n    }\n}[type]);\n\nconst createMap = (type = 'confirmed') => {\n\n    const config = getConfig(type);\n\n    document.getElementById('map-header').innerHTML = config.header;\n\n    // Add lower case codes to the data set for inclusion in the tooltip.pointFormat\n    const mapData = Highcharts.geojson(Highcharts.maps['custom/world']);\n    const populationByName = {};\n    mapData.forEach(function (country) {\n        country.id = country.properties['hc-key']; // for Chart.get()\n        country.flag = country.id.replace('UK', 'GB').toLowerCase();\n\n        const pop = population.find(\n            c => country.properties['hc-key'].toUpperCase() === c.code\n        );\n        populationByName[country.name] = pop && pop.z || null;\n    });\n\n    // Names used in Highcharts Map Collection\n    countries['United States of America'] = countries.US;\n    countries['South Korea'] = countries['Korea, South'];\n    countries['Czech Republic'] = countries.Czechia;\n\n    let maxValue = 0;\n    const data = Object.keys(countries).map(name => {\n        const country = countries[name];\n        const total = country[country.length - 1][type];\n        if (populationByName[name]) {\n            const value = total / populationByName[name];\n            if (populationByName[name] > 1000) {\n                maxValue = Math.max(value, maxValue);\n            }\n            return { name, value, total };\n        }\n        return { name, value: null };\n    });\n\n\n    // Initiate the map chart\n    if (!mapChart) {\n        mapChart = Highcharts.mapChart('container', {\n\n            chart: {\n                spacingLeft: 1,\n                spacingRight: 1\n            },\n\n            title: {\n                text: null\n            },\n\n            mapNavigation: {\n                enabled: true,\n                buttonOptions: {\n                    verticalAlign: 'bottom'\n                }\n            },\n\n            colorAxis: {\n                minColor: 'rgba(196, 0, 0, 0.1)',\n                maxColor: 'rgba(196, 0, 0, 1)'\n            },\n\n            tooltip: {\n                headerFormat: '<b>{point.point.name}</b><br>',\n                footerFormat: '<span style=\"font-size: 10px\">(Click for details)</span>'\n            },\n\n            legend: {\n                title: {\n                    text: 'Per 1000 inhabitants',\n                    style: {\n                        fontWeight: 'normal'\n                    }\n                }\n            },\n\n            series: [{\n                id: 'map',\n                mapData,\n                joinBy: ['name', 'name'],\n                cursor: 'pointer',\n                states: {\n                    select: {\n                        color: undefined,\n                        borderColor: '#333'\n                    }\n                },\n                borderWidth: 1,\n                borderColor: 'rgba(0, 0, 0, 0.05)'\n            }]\n        });\n    }\n    mapChart.update({\n        colorAxis: {\n            max: maxValue\n        },\n        tooltip: {\n            pointFormat: '<b>{point.total}</b> ' + config.valueSuffix + '<br>' +\n                '<b>{point.value:.2f}</b> per 1000 inhabitants<br>'\n        },\n        series: [{\n            data,\n            name: config.name\n        }]\n    }, true, true);\n\n    // Wrap point.select to get to the total selected points\n    const onCountryClick = e => {\n\n        // Accumulate using modifier keys, or on touch\n        if (e && e.target && e.target.point) {\n            e.preventDefault();\n            e.target.point.select(\n                null,\n                e.ctrlKey || e.metaKey || e.shiftKey || e.type === 'touchstart'\n            );\n            if (e.target.point.selected) {\n                e.target.point.graphic.toFront();\n            }\n        }\n\n        const points = mapChart.getSelectedPoints();\n        if (points.length) {\n            if (e && e.type === 'touchstart') {\n                // document.querySelector('#reset').style.display = 'block';\n            }\n\n            if (points.length === 1) {\n\n                document.querySelector('#info #flag').style.display = 'block';\n                document.querySelector('#info #flag')\n                    .className = 'flag ' + points[0].flag;\n                document.querySelector('#info .header-text').style.paddingLeft = '40px';\n                document.querySelector('#info .header-text').innerHTML = points[0].name;\n                document.querySelector('#info .subheader')\n                    .innerHTML = `${config.name}, starting the day of the\n                        ${config.day0Value}th case<br>`;\n\n                if (e && e.type === 'touchstart') {\n                    document.querySelector('#info .subheader')\n                        .innerHTML += '<small><em>Tap on map to compare multiple countries</em></small>';\n                } else {\n                    document.querySelector('#info .subheader')\n                        .innerHTML += '<small><em>Shift+Click on map to compare multiple countries</em></small>';\n                }\n\n            } else {\n                document.querySelector('#info #flag').style.display = 'none';\n                document.querySelector('#info .header-text').style.paddingLeft = 0;\n                document.querySelector('#info .header-text').innerHTML = 'Comparing countries';\n                document.querySelector('#info .subheader')\n                    .innerHTML = `${config.name}, starting the day of the\n                        ${config.day0Value}th case<br>`;\n            }\n\n            if (!countryChart) {\n                countryChart = Highcharts.chart('country-chart', {\n                    chart: {\n                        spacingLeft: 0\n                    },\n                    credits: {\n                        enabled: false\n                    },\n                    title: {\n                        text: null\n                    },\n                    subtitle: {\n                        text: null\n                    },\n                    xAxis: {\n                        crosshair: true,\n                        allowDecimals: false,\n                        labels: {\n                            format: 'Day #{value}'\n                        }\n                    },\n                    yAxis: {\n                        title: null,\n                        opposite: true\n                    },\n                    tooltip: {\n                        headerFormat: '<small>{series.name}</small><br>',\n                        pointFormat: '<b>Day {point.x}: {point.date:%b %e, %Y}</b><br>{point.y}Â ' + config.valueSuffix\n                    },\n                    legend: {\n                        enabled: false\n                    },\n                    plotOptions: {\n                        series: {\n                            animation: {\n                                duration: 50\n                            },\n                            label: {\n                                enabled: true\n                            },\n                            marker: {\n                                enabled: false\n                            },\n                            threshold: 0\n                        }\n                    }\n                });\n            }\n\n            const store = [];\n            const series = points\n                .filter(p => countries[p.name])\n                .map(p => {\n\n                    store.push(p.id);\n\n                    const firstDayAbove200 = countries[p.name].findIndex(\n                        point => point[type] >= config.day0Value\n                    );\n                    const data = countries[p.name]\n                        .slice(Math.max(firstDayAbove200 - 1, 0))\n                        .map((point, x) => {\n                            const [year, month, date] = point.date.split('-');\n                            const d = Date.UTC(year, month - 1, date);\n                            return {\n                                date: d,\n                                x,\n                                y: point[type]\n                            };\n                        });\n\n                    return {\n                        id: p.id,\n                        name: p.name,\n                        data,\n                        type: points.length > 1 ? 'line' : 'area',\n                        color: points.length > 1 ? undefined : '#aa0000',\n                        fillColor: points.length > 1 ? undefined : p.color\n                    };\n                });\n\n            countryChart.update({ series }, true, true);\n            location.hash = store.join(',');\n\n        // No selected points\n        } else {\n            // document.querySelector('#reset').style.display = 'none';\n            document.querySelector('#info #flag').className = '';\n            document.querySelector('#info .header-text').innerHTML = '';\n            document.querySelector('#info .subheader').innerHTML = '';\n            if (countryChart) {\n                countryChart = countryChart.destroy();\n            }\n        }\n    };\n    mapChart.container.querySelectorAll('.highcharts-point').forEach(\n        graphic => {\n            graphic.addEventListener('click', onCountryClick);\n            graphic.addEventListener('touchstart', onCountryClick);\n        }\n    );\n\n    // Pre-select countries\n    let selected = 'cn,it,us';\n    if (location.hash) {\n        selected = location.hash.replace('#', '');\n    }\n    selected.split(',').forEach(id => {\n        if (/^[a-z]{2}$/.test(id)) {\n            const country = mapChart.get(id);\n            if (country) {\n                mapChart.get(id).select(true, true);\n            }\n        }\n    });\n    onCountryClick();\n\n};\n\nconst activateButtons = () => {\n    const buttons = document.querySelectorAll('input[name=\"source\"]');\n    buttons.forEach(button => {\n        button.addEventListener('click', () => {\n            button.parentNode.classList.add('active');\n\n            buttons.forEach(otherButton => {\n                if (otherButton !== button) {\n                    otherButton.parentNode.classList.remove('active');\n                }\n            });\n\n            createMap(button.id);\n        });\n    });\n};\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n    const countriesResp = await fetch('https://pomber.github.io/covid19/timeseries.json');\n    countries = await countriesResp.json();\n    const populationResp = await fetch('https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/world-population.json');\n    population = await populationResp.json();\n\n    activateButtons();\n\n    createMap();\n});\n","css":".container-fluid {\n    margin-top: 10px;\n}\n\n#info .f32 .flag {\n    position: absolute;\n    top: 8px;\n}\n\n.clearfix {\n    clear: both;\n}\n\n.card-header.subheader {\n    font-size: 0.9rem;\n    color: rgb(0 0 0 / 75%);\n    background-color: transparent;\n    border-bottom: none;\n}\n\n.card {\n    height: 80vh;\n    min-height: 400px;\n    margin-bottom: 1em;\n}\n\n@media screen and (max-width: 780px) {\n    .card {\n        max-height: 400px;\n    }\n\n    .col-12 {\n        padding-left: 2px !important;\n        padding-right: 2px !important;\n    }\n}\n","html":"\n<!-- Flag sprites service provided by Martijn Lafeber, https://github.com/lafeber/world-flags-sprite/blob/master/LICENSE -->\n<link rel=\"stylesheet\" type=\"text/css\" href=\"//github.com/downloads/lafeber/world-flags-sprite/flags32.css\" />\n\n<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n\n\n<div class=\"container-fluid\">\n\n    <div class=\"btn-group btn-group-toggle mb-1\">\n        <label class=\"btn btn-outline-primary active\">\n            <input type=\"radio\" name=\"source\" id=\"confirmed\" autocomplete=\"off\"> Confirmed\n        </label>\n        <label class=\"btn btn-outline-primary\">\n            <input type=\"radio\" name=\"source\" id=\"deaths\" autocomplete=\"off\" checked> Deaths\n        </label>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-12 col-md-6\">\n            <div class=\"card\">\n                <div class=\"card-header\" id=\"map-header\">\n                </div>\n                <div class=\"card-body\" id=\"container\"></div>\n            </div>\n        </div>\n        <div class=\"col-12 col-md-6\" id=\"info\">\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <span class=\"f32\"><span id=\"flag\"></span></span>\n                    <span class=\"header-text\"></span>\n                </div>\n                <div class=\"card-header subheader\">\n                    Click countries to view history\n                </div>\n                <div class=\"card-body\" id=\"country-chart\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <small>This visualization is created by the Highcharts team using <a href=\"https://www.highcharts.com\" target=\"_top\">\n        Highcharts</a> and data from  <a href=\"https://github.com/pomber/covid19\" target=\"_top\">pomber/covid19</a>.</small>\n</div>\n","npm":"// å®è£\nnpm install highcharts@11.0.1 --save\n\n// import æ¨¡å \nimport Highcharts  from 'highcharts';\nimport Data        from 'highcharts/modules/data';\nimport SeriesLabel from 'highcharts/modules/series-label';\nimport Map         from 'highcharts/modules/map';\nimport World       from 'highcharts/mapdata/custom/world';\n\n// åå§åæ¨¡å\nData(Highcharts);\nSeriesLabel(Highcharts);\nMap(Highcharts);\nWorld(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js","https://code.highcharts.com/11.0.1/modules/data.js","https://code.highcharts.com/11.0.1/modules/series-label.js","https://code.highcharts.com/maps/11.0.1/modules/map.js","https://code.highcharts.com/11.0.1/mapdata/custom/world.js"]}