{"js":"const libs = {\n    d3: window.d3,\n    proj4: window.proj4\n};\ndelete window.d3;\ndelete window.proj4;\n\n// Get random data for this sample\nfunction getRandomData(geojson) {\n    return geojson.features.map(() => Math.round(Math.random() * 100));\n}\n\nfunction getGraticule() {\n    const data = [];\n\n    // Meridians\n    for (let x = -180; x <= 180; x += 15) {\n        data.push({\n            geometry: {\n                type: 'LineString',\n                coordinates: x % 90 === 0 ? [\n                    [x, -90],\n                    [x, 0],\n                    [x, 90]\n                ] : [\n                    [x, -80],\n                    [x, 80]\n                ]\n            }\n        });\n    }\n\n    // Latitudes\n    for (let y = -90; y <= 90; y += 10) {\n        const coordinates = [];\n        for (let x = -180; x <= 180; x += 5) {\n            coordinates.push([x, y]);\n        }\n        data.push({\n            geometry: {\n                type: 'LineString',\n                coordinates\n            },\n            lineWidth: y === 0 ? 2 : undefined\n        });\n    }\n\n    return data;\n}\n\nconst static = {\n    geojson: undefined,\n    data: undefined\n};\n\nlet chart;\n\nconst drawMap = projectionKey => {\n\n    const geojson = JSON.parse(static.geojson);\n\n    // geojson.features = geojson.features.filter(f => f.properties.name === 'Antarctica');\n\n    // Apply projection using Proj4\n    const projection = Highcharts.merge({\n        name: undefined,\n        projString: undefined,\n        rotation: [\n            parseInt(document.getElementById('rotation-lambda').value, 10),\n            parseInt(document.getElementById('rotation-phi').value, 10),\n            parseInt(document.getElementById('rotation-gamma').value, 10)\n        ]\n    }, {\n        /*\n        'gall-peters': {\n            name: 'cea',\n            lon0: 0,\n            latTS: 45\n        },\n        eqc: {\n            name: 'eqc'\n        },\n        */\n        equalearth: {\n            name: 'EqualEarth'\n        },\n        lcc: {\n            name: 'LambertConformalConic',\n            parallels: [-30, -40]\n        },\n        miller: {\n            name: 'Miller'\n        },\n        'ortho-africa': {\n            name: 'Orthographic',\n            rotation: [-15, 0]\n        },\n        'ortho-antarctica': {\n            name: 'Orthographic',\n            rotation: [0, 90]\n        },\n        'ortho-asia': {\n            name: 'Orthographic',\n            rotation: [-90, -40]\n        },\n        'ortho-australia': {\n            name: 'Orthographic',\n            rotation: [-140, 30]\n        },\n        'ortho-europe': {\n            name: 'Orthographic',\n            rotation: [-15, -40]\n        },\n        'ortho-north-america': {\n            name: 'Orthographic',\n            rotation: [100, -45]\n        },\n        'ortho-south-america': {\n            name: 'Orthographic',\n            rotation: [60, 10]\n        },\n        /*\n        robin: {\n            name: 'robin'\n        },\n        */\n        webmerc: {\n            name: 'WebMercator'\n        }\n    }[projectionKey] || {});\n\n    // Initialize the chart\n    if (!chart) {\n\n\n        // projection.proj4 = libs.proj4;\n        // projection.d3 = libs.d3;\n\n        console.time('@mapChart');\n\n        chart = Highcharts.mapChart('container', {\n            chart: {\n                map: geojson\n            },\n\n            title: {\n                text: 'Highcharts projection study',\n                floating: true,\n                align: 'left',\n                style: {\n                    textOutline: '2px white'\n                }\n            },\n\n            legend: {\n                enabled: false\n            },\n\n            mapNavigation: {\n                enabled: true,\n                enableDoubleClickZoomTo: true,\n                buttonOptions: {\n                    verticalAlign: 'bottom'\n                }\n            },\n\n            mapView: {\n                projection\n                /*\n                projection: {\n                    name: 'WebMercator'\n                },\n                zoom: 4,\n                center: [6.5, 61]\n                */\n            },\n\n            colorAxis: {\n                tickPixelInterval: 100,\n                minColor: '#F1EEF6',\n                maxColor: '#900037'\n            },\n\n            tooltip: {\n                pointFormat: '{point.name}: {point.value}'\n            },\n\n            series: [{\n                name: 'Graticule',\n                type: 'mapline',\n                data: getGraticule(),\n                nullColor: '#e8e8e8',\n                color: '#e8e8e8'\n            },\n            /*\n            {\n                type: 'mapline',\n                data: [{\n                    type: 'LineString',\n                    coordinates: [\n                        [120, 30],\n                        [-120, 30]\n                    ],\n                    name: 'MapLine'\n\n                }],\n                color: 'blue'\n\n            },\n            // */\n\n            //*\n            {\n                data: static.data,\n                joinBy: null,\n                name: 'Random data',\n                states: {\n                    hover: {\n                        color: '#a4edba',\n                        borderColor: '#333333'\n                    }\n                },\n                dataLabels: {\n                    enabled: false,\n                    format: '{point.name}'\n                },\n                clip: false\n            }, {\n                type: 'mapline',\n                data: [{\n                    geometry: {\n                        type: 'LineString',\n                        coordinates: [\n                            [4.90, 53.38], // Amsterdam\n                            [-118.24, 34.05] // Los Angeles\n                        ]\n                    },\n                    color: '#3030d0'\n                }],\n                lineWidth: 2\n            }, {\n                type: 'mappoint',\n                data: [{\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [4.90, 53.38]\n                    },\n                    name: 'Amsterdam'\n                }, {\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [-118.24, 34.05]\n                    },\n                    name: 'LA'\n                }],\n                color: '#3030d0'\n            }\n            //*/\n            ]\n        });\n        console.timeEnd('@mapChart');\n\n        /*\n        setTimeout(function () {\n            chart.mapView.setView([4.90, 53.38], 4);\n            console.log(chart.mapView.center, chart.mapView.zoom)\n        }, 1200);\n        */\n\n    /* else if (\n        projection.name === 'ortho' &&\n        chart.mapView.projection.options.name === 'ortho'\n    ) {\n        let lon0 = chart.mapView.projection.options.lon0,\n            lat0 = chart.mapView.projection.options.lat0;\n        const toLon0 = projection.lon0,\n            toLat0 = projection.lat0;\n\n        const steps = 10;\n        const stepLon = (lon0 - toLon0) / steps;\n        const stepLat = (lat0 - toLat0) / steps;\n\n        for (let i = 0; i < steps; i++) {\n            setTimeout(() => {\n                lon0 -= stepLon;\n                lat0 -= stepLat;\n                chart.update({\n                    mapView: {\n                        projection: {\n                            lon0,\n                            lat0\n                        }\n                    }\n                }, undefined, undefined, false);\n            }, i * 25);\n        }\n\n    } */\n    } else {\n        chart.update({\n            mapView: {\n                projection\n            }\n        });\n\n        /*\n        if (projectionKey === 'ortho-europe') {\n            let lon0 = projection.lon0;\n            setInterval(() => {\n                lon0 += 0.5;\n                projection.lon0 = lon0;\n                chart.update({\n                    mapView: {\n                        projection\n                    }\n                });\n            }, 25);\n        }\n        */\n    }\n\n    document.querySelectorAll('#projection-buttons button').forEach(btn =>\n        btn.classList.remove('active')\n    );\n    document.querySelector(`#projection-buttons #${projectionKey}`).classList.add('active');\n};\n\nfunction setLibrary(btnId) {\n    const projection = {\n        'btn-d3': {\n            d3: libs.d3,\n            proj4: undefined\n        },\n        'btn-proj4': {\n            d3: undefined,\n            proj4: libs.proj4\n        }\n    }[btnId];\n    chart.update({\n        mapView: {\n            projection\n        }\n    });\n\n    document.querySelectorAll('#library-buttons button').forEach(btn =>\n        btn.classList.remove('active')\n    );\n    document.querySelector(`#library-buttons #${btnId}`).classList.add('active');\n}\n\nconst enableInputs = () => {\n    document.querySelectorAll('#projection-buttons button').forEach(btn =>\n        btn.addEventListener('click', e => drawMap(e.target.id))\n    );\n    document.querySelectorAll('#library-buttons button').forEach(btn =>\n        btn.addEventListener('click', e => setLibrary(e.target.id))\n    );\n    document.querySelectorAll('.rotation').forEach(input => {\n        input.addEventListener('input', () => {\n            const lambda = document.getElementById('rotation-lambda').value;\n            const phi = document.getElementById('rotation-phi').value;\n            const gamma = document.getElementById('rotation-gamma').value;\n            document.getElementById('rotation-lambda-output')\n                .innerText = lambda;\n            document.getElementById('rotation-phi-output').innerText = phi;\n            document.getElementById('rotation-gamma-output').innerText = gamma;\n\n            const rotation = chart.mapView.projection.options.rotation ||\n                [0, 0];\n            rotation[0] = parseInt(lambda, 10);\n            rotation[1] = parseInt(phi, 10);\n            rotation[2] = parseInt(gamma, 10);\n            chart.mapView.update({\n                projection: {\n                    rotation\n                }\n            }, true, false);\n        });\n    });\n};\n\nHighcharts.getJSON(\n    'https://cdn.jsdelivr.net/gh/highcharts/highcharts@2e11000c966a20f08afc4e0927b91df99821de99/samples/data/world-countries.topo.json',\n    topology => {\n\n        // Convert the topoJSON feature into geoJSON\n        const geojson = window.topojson.feature(\n            topology,\n            // For this demo, get the first of the named objects\n            topology.objects[Object.keys(topology.objects)[0]]\n        );\n        geojson.copyrightUrl = topology.copyrightUrl;\n        geojson.copyrightShort = topology.copyrightShort;\n\n        const data = getRandomData(geojson);\n\n        static.geojson = JSON.stringify(geojson);\n        static.data = data;\n\n        drawMap('equalearth');\n\n        enableInputs();\n\n    }\n);\n","css":"#container {\n    height: 500px;\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n","html":"\n\n\n\n<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n\n<div id=\"container\"></div>\n\n<hr>\n\n<div id=\"library-buttons\">\n    <h4>Library</h4>\n    <div class=\"btn-group\">\n        <button id=\"btn-native\" class=\"btn btn-outline-secondary active\">None</button>\n        <button id=\"btn-proj4\" class=\"btn btn-outline-secondary disabled\">Proj4</button>\n        <button id=\"btn-d3\" class=\"btn btn-outline-secondary disabled\">d3-geo</button>\n    </div>\n</div>\n\n<div id=\"projection-buttons\" class=\"buttons\">\n    <h4 class=\"mt-4\">Flat projections</h4>\n    <div class=\"btn-group\">\n        <button id=\"equalearth\" class=\"btn btn-outline-secondary\">Equal Earth</button>\n        <button id=\"lcc\" class=\"btn btn-outline-secondary\">Lambert Conformal Conic</button>\n        <button id=\"miller\" class=\"btn btn-outline-secondary\">Miller</button>\n        <button id=\"webmerc\" class=\"btn btn-outline-secondary\">Web Mercator</button>\n        <button id=\"eqc\" class=\"btn btn-outline-secondary\">None (Equirectangular)</button>\n    </div>\n\n    <h4 class=\"mt-4\">Rotation</h4>\n    <div>\n        <label>\n            <input class=\"rotation\" id=\"rotation-lambda\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n            Lambda → <span class=\"text-muted\" id=\"rotation-lambda-output\"></span>\n        </label>\n        <br>\n        <label>\n            <input class=\"rotation\" id=\"rotation-phi\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n            Phi ↑ <span class=\"text-muted\" id=\"rotation-phi-output\"></span>\n        </label>\n        <br>\n        <label>\n            <input class=\"rotation\" id=\"rotation-gamma\" type=\"range\" min=\"-180\" max=\"180\" value=\"0\" />\n            Gamma ⟲ <span class=\"text-muted\" id=\"rotation-gamma-output\"></span>\n        </label>\n    </div>\n\n    <h4 class=\"mt-4\">Ortographic projections</h4>\n    <div class=\"btn-group\">\n        <button id=\"ortho-africa\" class=\"btn btn-outline-secondary\">Africa</button>\n        <button id=\"ortho-antarctica\" class=\"btn btn-outline-secondary\">Antarctica</button>\n        <button id=\"ortho-asia\" class=\"btn btn-outline-secondary\">Asia</button>\n        <button id=\"ortho-australia\" class=\"btn btn-outline-secondary\">Australia</button>\n        <button id=\"ortho-europe\" class=\"btn btn-outline-secondary\">Europe</button>\n        <button id=\"ortho-north-america\" class=\"btn btn-outline-secondary\">North America</button>\n        <button id=\"ortho-south-america\" class=\"btn btn-outline-secondary\">South America</button>\n    </div>\n</div>\n","scripts":["https://unpkg.com/topojson-client@3","https://cdnjs.cloudflare.com/ajax/libs/proj4js/2.7.2/proj4-src.min.js","https://d3js.org/d3-array.v2.js","https://d3js.org/d3-geo.v2.js","https://d3js.org/d3-geo-projection.v3.js","https://code.highcharts.com/maps/9.3.2/highmaps.js","https://code.highcharts.com/maps/9.3.2/modules/data.js","https://code.highcharts.com/maps/9.3.2/modules/exporting.js","https://code.highcharts.com/maps/9.3.2/modules/offline-exporting.js","https://code.highcharts.com.cn/highcharts-plugins/highcharts-zh_CN.js"]}