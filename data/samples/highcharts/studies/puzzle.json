{"js":"(function (H) {\n    var addEvent = H.addEvent,\n        Chart = H.Chart,\n        each = H.each,\n        seriesTypes = H.seriesTypes,\n        SVGElement = H.SVGElement;\n\n    if (!SVGElement.prototype.removeClass) {\n        SVGElement.prototype.removeClass = function (className) {\n            this.element.setAttribute(\n                'class',\n                this.element.getAttribute('class').replace(className, '')\n            );\n            return this;\n        };\n    }\n\n    Chart.prototype.presentNext = function presentNext() {\n        var point;\n        for (var sI = 0; sI < this.series.length && !point; sI++) {\n            for (\n                var pI = 0;\n                pI < this.series[sI].points.length && !point;\n                pI++\n            ) {\n                if (this.series[sI].points[pI].inPuzzle) {\n                    point = this.series[sI].points[pI];\n                }\n            }\n        }\n        if (point) {\n            point.graphic.attr({\n                display: ''\n            }).animate({\n                opacity: 1\n            }, {\n                duration: 500\n            });\n        }\n    };\n\n\n    Chart.prototype.callbacks.push(function (chart) {\n        var total = 0;\n        each(chart.series, function (series) {\n            if (series.initPuzzle) {\n                total += series.initPuzzle();\n            }\n        });\n        chart.puzzle = {\n            total: total,\n            remaining: total\n        };\n        chart.puzzleCount = chart.renderer.label('', 10, 5)\n            .css({\n                fontSize: '30px'\n            })\n            .add();\n\n        function updateCount(diff) {\n            chart.puzzle.remaining += diff;\n            chart.puzzleCount.attr({\n                text: (chart.puzzle.total - chart.puzzle.remaining) + ' / ' + chart.puzzle.total\n            });\n        }\n        updateCount(0);\n\n        function stopDrag(point) {\n            point.dragStart = null;\n            chart.dragPoint = null;\n        }\n\n        function drop(point) {\n            point.graphic\n                .attr({\n                    translateX: 0,\n                    translateY: 0,\n                    scaleX: 1,\n                    scaleY: 1\n                })\n                .removeClass('highcharts-puzzle-dragging')\n                .addClass('highcharts-puzzle-dropped');\n\n            point.inPuzzle = false;\n            stopDrag(point);\n            updateCount(-1);\n            chart.presentNext();\n\n        }\n\n        function pointerDown(e) {\n            var point = e.target.point,\n                graphic;\n\n            if (point) {\n                graphic = point.graphic;\n\n                graphic.toFront();\n\n                e = chart.pointer.normalize(e);\n                point.dragStart = {\n                    chartX: e.chartX,\n                    chartY: e.chartY,\n                    scale: graphic.scaleX,\n                    translateX: graphic.translateX,\n                    translateY: graphic.translateY\n                };\n                chart.dragPoint = point;\n            }\n        }\n\n        function pointerMove(e) {\n            var point = chart.dragPoint,\n                dragStart = point && point.inPuzzle && point.dragStart,\n                startTranslateX,\n                startTranslateY,\n                translateX,\n                translateY,\n                dist;\n\n            e = chart.pointer.normalize(e);\n            e.preventDefault();\n            if (dragStart) {\n                // Un-scale to find the true pixel translation\n                startTranslateX = dragStart.translateX / dragStart.scale;\n                startTranslateY = dragStart.translateY / dragStart.scale;\n\n                // Get the movement\n                translateX = startTranslateX + e.chartX - dragStart.chartX;\n                translateY = startTranslateY + e.chartY - dragStart.chartY;\n\n\n                // Pixel distance to target\n                dist = Math.sqrt(\n                    Math.pow(translateX, 2) +\n                    Math.pow(translateY, 2)\n                );\n\n\n                // Proximity snap to the true position\n                if (dist < 20) {\n                    drop(point);\n\n                // Else, move it along\n                } else {\n                    point.graphic\n                        .attr({\n                            scaleX: 1,\n                            scaleY: 1,\n                            translateX: translateX,\n                            translateY: translateY\n                        })\n                        .addClass('highcharts-puzzle-dragging');\n                }\n            }\n        }\n\n        function pointerUp() {\n            if (chart.dragPoint) {\n                stopDrag(chart.dragPoint);\n            }\n        }\n\n\n        // Set events on the container\n        addEvent(this.container, 'mousedown', pointerDown);\n        addEvent(this.container, 'touchstart', pointerDown);\n        addEvent(this.container, 'mousemove', pointerMove);\n        addEvent(this.container, 'touchmove', pointerMove);\n        addEvent(this.container, 'mouseup', pointerUp);\n        addEvent(this.container, 'touchend', pointerUp);\n    });\n\n    seriesTypes.map.prototype.initPuzzle = function () {\n        var total = 0;\n\n        if (this.options.puzzle) {\n\n            each(this.points, function (point) {\n                var bBox = point.graphic.getBBox(),\n                    scale = Math.min(100 / bBox.width, 100 / bBox.height);\n\n                // Small items are hard to place\n                if (bBox.width > 5 && bBox.height > 5) {\n\n                    // Put it in the dock\n                    point.graphic.attr({\n                        scaleX: scale,\n                        scaleY: scale,\n                        translateX: -bBox.x * scale,\n                        translateY: -bBox.y * scale,\n                        opacity: 0,\n                        display: 'none'\n                    });\n\n                    point.inPuzzle = true;\n                    total++;\n                }\n\n            });\n\n            this.chart.presentNext();\n        }\n        return total;\n    };\n\n}(Highcharts));\n\nvar n,\n    mapData,\n    data = [],\n    maps = Highcharts.maps;\n\nfor (n in maps) {\n    if (Object.hasOwnProperty.call(maps, n)) {\n        mapData = maps[n];\n        break;\n    }\n}\nmapData.forEach(feature => {\n    data.push({\n        'hc-key': feature.properties['hc-key'],\n        value: 1\n    });\n});\n\n// Initialize the chart\nHighcharts.mapChart('container', {\n\n    title: {\n        text: 'Highmaps puzzle',\n        style: {\n            fontSize: '30px'\n        }\n    },\n\n    legend: {\n        enabled: false\n    },\n\n    tooltip: {\n        headerFormat: '',\n        pointFormat: '{point.name}',\n        style: {\n            fontSize: '20px'\n        }\n    },\n\n    plotOptions: {\n        series: {\n            states: {\n                inactive: {\n                    opacity: 1\n                }\n            }\n        }\n    },\n\n    series: [{\n        borderColor: '#e8e8e8',\n        mapData: mapData,\n        nullColor: 'transparent'\n    }, {\n        mapData: mapData,\n        colorByPoint: true,\n        data: data,\n        borderColor: '#000000',\n        joinBy: 'hc-key',\n        puzzle: true,\n        states: {\n            hover: {\n                color: Highcharts.getOptions().colors[2]\n            }\n        }\n    }]\n});\n","css":"* {\n    font-family: sans-serif;\n}\n\n#report {\n    min-height: 1rem;\n}\n\n#container {\n    border: 1px solid silver;\n    height: 500px;\n    width: 600px;\n    margin: 0 auto;\n}\n\n.loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n\n.highcharts-puzzle-dragging {\n    stroke-dasharray: 2px;\n}\n\n.highcharts-puzzle-dropped {\n    stroke: #e0e0e0;\n}\n","html":"Verify that the pieces are draggable and attach to their locations.","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \n\n// 初始化模块\n","scripts":[]}