{"js":"// FUNCTION SERIES DEFINITION\n(function (Highcharts) {\n    // create shortcuts\n    var defaultOptions = Highcharts.getOptions(),\n        defaultPlotOptions = defaultOptions.plotOptions,\n        seriesTypes = Highcharts.Series.types,\n        merge = Highcharts.merge,\n        each = Highcharts.each;\n\n    defaultPlotOptions.functionseries = merge(defaultPlotOptions.line, {\n        marker: {\n            enabled: false\n        }\n    });\n\n    seriesTypes.functionseries = Highcharts.extendClass(\n        Highcharts.Series.types.line,\n        {\n            type: 'functionseries',\n\n            setData: function () {\n                var series = this,\n                    dataFunction = series.options.dataFunction,\n                    xAxis = series.xAxis,\n                    points = xAxis.len,\n                    min = xAxis.userMin || series.options.min,\n                    max = xAxis.userMax || series.options.max,\n                    data = [],\n                    x,\n                    y,\n                    i;\n\n                for (i = 0; i < points; i += 1) {\n                    x = min + (i * ((max - min) / points));\n                    y = dataFunction(x);\n                    data.push([x, y]);\n                }\n\n                arguments[0] = data;\n\n                Highcharts.Series.prototype.setData.apply(this, arguments);\n            },\n            bindAxes: function () {\n                Highcharts.Series.prototype.bindAxes.apply(this, arguments);\n                var series = this,\n                    xAxis = this.xAxis;\n\n                xAxis.setExtremes = function ()  {\n                    Highcharts.Axis.prototype.setExtremes\n                        .apply(this, arguments);\n                    series.setData([]);\n                };\n            }\n\n        }\n    );\n\n    Highcharts.wrap(Highcharts.Chart.prototype, 'init', function (proceed) {\n        proceed.apply(this, [].slice.call(arguments, 1));\n\n        each(this.series, function (serie) {\n            if (serie.type === 'functionseries') {\n                serie.setData([]);\n            }\n        });\n\n    });\n}(Highcharts));\n// END OF FUNCTION SERIES\n\nvar scatterData = [],\n    i;\n\nfor (i = 0; i < 100; i += 0.1) {\n    scatterData.push([i, Math.sin(i / 10) + Math.random() - 0.5]);\n}\n\nHighcharts.chart('container', {\n    chart: {\n        zoomType: 'x'\n    },\n    title: {\n        text: 'Measured vs Expected Data'\n    },\n    subtitle: {\n        text: 'y = sin(x)'\n    },\n    series: [{\n        type: 'scatter',\n        name: 'Measured',\n        data: scatterData,\n        marker: {\n            radius: 1\n        }\n    }, {\n        type: 'functionseries',\n        name: 'Expected',\n        min: 0,\n        max: 100,\n        dataFunction: function (x) {\n            return Math.sin(x / 10);\n        }\n    }]\n});","css":"#container {\n    height: 600px;\n}\n","html":"\n<div id=\"container\"></div>","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\nimport Zh_cn      from 'https://code.hcharts.cn/plugins/zh_cn.js';\n\n// 初始化模块\nZh_cn(Highcharts);\n","scripts":["https://code.hcharts.cn/10.3.2/highcharts.js","https://code.hcharts.cn/plugins/zh_cn.js"]}