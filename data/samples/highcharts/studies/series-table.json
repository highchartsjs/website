{"js":"","css":"","html":"\n<div id=\"chart\"></div>\n<button type=\"button\" id=\"line\">Line</button>\n<button type=\"button\" id=\"column\">Column</button>\n<button type=\"button\" id=\"pie\">Pie</button>\n<button type=\"button\" id=\"benchmark\">Benchmark</button>\n<table id=\"benchmarks\"></table>\n","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\nimport Boost      from 'highcharts/modules/boost';\nimport Zh_cn      from 'https://code.hcharts.cn/plugins/zh_cn.js';\n\n// 初始化模块\nBoost(Highcharts);\nZh_cn(Highcharts);\n","scripts":["https://code.hcharts.cn/10.3.2/highcharts.js","https://code.hcharts.cn/10.3.2/modules/boost.js","https://code.hcharts.cn/plugins/zh_cn.js"],"mjs":"/* eslint-disable no-use-before-define */\n\nimport DataSeriesComposition from '../../../../code/es-modules/Data/DataSeriesComposition.js';\nimport DataTable from '../../../../code/es-modules/Data/DataTable.js';\n\nDataSeriesComposition.compose(Highcharts.Series.types.line);\nDataSeriesComposition.compose(Highcharts.Series.types.column);\nDataSeriesComposition.compose(Highcharts.Series.types.pie);\nDataSeriesComposition.compose(Highcharts.Series.types.scatter);\n\nconst benchmarks = document.getElementById('benchmarks');\nconst benchmarkSeries = 'scatter';\nconst benchmarkSize = 1e5;\nconst chart = Highcharts.chart('chart', {\n    debug: true,\n    chart: {\n        width: 600\n    },\n    title: {\n        text: 'Series.table study'\n    },\n    subtitle: {\n        text: 'DataTable management'\n    },\n    plotOptions: {\n        series: {\n            allowMutatingData: true,\n            boostThreshold: benchmarkSize < 1e5 ? benchmarkSize + 1 : 1,\n            dataAsColumns: true,\n            enableMouseTracking: false\n        }\n    },\n    series: [{\n        type: 'line',\n        data: [\n            [11, 12, 13, 14, 15, 16, 17],\n            [13, 17, 19, 23, 29, 31, 37]\n        ]\n    }]\n});\n\nconst data = [];\n\nfor (let i = 0; i < benchmarkSize; ++i) {\n    data[i] = Math.random() * benchmarkSize;\n}\n\nconst table = new DataTable({ y: [] });\n\nfor (let i = 0; i < benchmarkSize; ++i) {\n    table.setRow([Math.random() * benchmarkSize], i);\n}\n\nfunction addResults(setData, setTable) {\n    const tr = document.createElement('tr');\n    const td1 = document.createElement('td');\n    const td2 = document.createElement('td');\n\n    td1.innerText = '' + setData;\n\n    td2.innerText = '' + setTable;\n    td2.style.backgroundColor = setData > setTable ? '#CFC' : '#FCC';\n\n    tr.appendChild(td1);\n    tr.appendChild(td2);\n    benchmarks.appendChild(tr);\n}\n\nfunction addSeries(e) {\n    if (chart.series[0]) {\n        chart.series[0].remove();\n    }\n\n    const series = chart.addSeries({\n            type: e.target.innerText.toLowerCase()\n        }),\n        table = new DataTable({\n            y: [\n                2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\n                43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n            ]\n        });\n\n    series.datas.setTable(table, true, true);\n\n    window.setTimeout(() => {\n        table.setRow([101]);\n        series.redraw();\n    }, 2000);\n\n    window.setTimeout(() => {\n        table.deleteRows(0, 1);\n        series.redraw();\n    }, 4000);\n\n    window.setTimeout(() => {\n        table.deleteRows(16, 1);\n        series.redraw();\n    }, 6000);\n}\n\nlet benchmarking;\n\nfunction benchmark(e) {\n    if (chart.series[0]) {\n        chart.series[0].remove();\n    }\n\n    if (benchmarking) {\n        e.target.innerText = 'Benchmark';\n        window.clearTimeout(benchmarking);\n        benchmarking = 0;\n    } else {\n        chart.addSeries({\n            type: benchmarkSeries,\n            data: [[0, 0], [benchmarkSize, benchmarkSize]]\n        });\n        e.target.innerText = 'Benchmarking';\n        benchmarking = window.setTimeout(benchmarkSetData, 1000);\n    }\n}\n\nfunction benchmarkSetData(vs) {\n    if (chart.series[0]) {\n        chart.series[0].remove();\n    }\n\n    const series = chart.addSeries({\n        type: benchmarkSeries\n    });\n\n    timestamp(true);\n\n    series.setData(data, true);\n\n    const result = timestamp();\n\n    if (vs) {\n        addResults(result, vs);\n    }\n\n    if (benchmarking) {\n        benchmarking = window.setTimeout(\n            benchmarkSetTable,\n            2000,\n            vs ? 0 : result\n        );\n    }\n\n    return result;\n}\n\nfunction benchmarkSetTable(vs) {\n    if (chart.series[0]) {\n        chart.series[0].remove();\n    }\n\n    const series = chart.addSeries({\n        type: benchmarkSeries\n    });\n\n    timestamp(true);\n\n    series.datas.setTable(table, true);\n\n    const result = timestamp();\n\n    if (vs) {\n        addResults(vs, result);\n    }\n\n    if (benchmarking) {\n        benchmarking = window.setTimeout(\n            benchmarkSetData,\n            2000,\n            vs ? 0 : result\n        );\n    }\n}\n\nlet time;\n\nfunction timestamp(init) {\n    const now = new Date();\n\n    if (!time || init) {\n        time = now;\n        return now;\n    }\n\n    const result = now - time;\n\n    time = now;\n\n    return result;\n}\n\ndocument\n    .getElementById('line')\n    .addEventListener('click', addSeries);\n\ndocument\n    .getElementById('column')\n    .addEventListener('click', addSeries);\n\ndocument\n    .getElementById('pie')\n    .addEventListener('click', addSeries);\n\ndocument\n    .getElementById('benchmark')\n    .addEventListener('click', benchmark);\n\nconsole.log(chart);"}