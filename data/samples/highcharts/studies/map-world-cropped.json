{"js":"/*\n * To do\n * - Create the TopoJSON map and put in in the map collection\n * - Use it in samples where it makes sense\n */\n\n\nconst getBBox = geometry => {\n    let lonMin = Number.MAX_VALUE,\n        lonMax = -Number.MAX_VALUE,\n        latMin = Number.MAX_VALUE,\n        latMax = -Number.MAX_VALUE;\n\n    if (geometry.type === 'Polygon') {\n        for (const polygon of geometry.coordinates) {\n            for (const point of polygon) {\n                lonMin = Math.min(lonMin, point[0]);\n                lonMax = Math.max(lonMax, point[0]);\n                latMin = Math.min(latMin, point[1]);\n                latMax = Math.max(latMax, point[1]);\n            }\n        }\n\n        const pad = 0.1;\n        return {\n            type: 'Polygon',\n            coordinates: [\n                [\n                    [lonMax + pad, latMin - pad],\n                    [lonMin - pad, latMin - pad],\n                    [lonMin - pad, latMax + pad],\n                    [lonMax + pad, latMax + pad]\n                ]\n            ]\n        };\n    }\n};\n\n(async () => {\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json'\n    ).then(response => response.json());\n\n    // Move these shapes towards center\n    const toBeMoved = [\n        'AS', 'FJ', 'FM', 'KI', 'MH', 'NR', 'SB', 'TO', 'TV', 'UM', 'VU', 'WS'\n    ];\n\n    /* eslint-disable-next-line no-underscore-dangle */\n    const topo2geo = Highcharts._modules['Extensions/GeoJSON.js'].topo2geo;\n\n\n    // Remove minor parts of some countries\n    // Hawaii, USA\n    topology.objects.default.geometries.find(g => g.id === 'US').arcs\n        .splice(36, 1);\n    topology.objects.default.geometries.find(g => g.id === 'US').arcs\n        .splice(31, 2);\n\n    // Aleutes, USA\n    topology.objects.default.geometries.find(g => g.id === 'US').arcs\n        .splice(23, 1);\n\n    // New Caledonia, France\n    topology.objects.default.geometries.find(g => g.id === 'FR').arcs\n        .splice(2, 1);\n\n    // Centers\n    const cn = topology.objects.default.geometries.find(g => g.id === 'CN');\n    cn.properties['hc-middle-x'] = 0.65;\n\n    const fr = topology.objects.default.geometries.find(g => g.id === 'FR');\n    fr.properties['hc-middle-x'] = 0.53;\n\n    const ind = topology.objects.default.geometries.find(g => g.id === 'IN');\n    ind.properties['hc-middle-y'] = 0.6;\n\n    const uk = topology.objects.default.geometries.find(g => g.id === 'GB');\n    uk.properties['hc-middle-x'] = 0.71;\n    uk.properties['hc-middle-y'] = 0.055;\n\n    const ru = topology.objects.default.geometries.find(g => g.id === 'RU');\n    ru.properties['hc-middle-x'] = 0.65;\n    ru.properties['hc-middle-y'] = 0.4;\n\n    const geoJSON = topo2geo(topology);\n\n    const insets = [];\n\n    toBeMoved.forEach((code, i) => {\n        const p = geoJSON.features.find(p => p.properties['iso-a2'] === code);\n\n        if (p) {\n            const geoBounds = getBBox(p.geometry);\n\n            // Approximately retain the latitude\n            const lat = p.geometry.coordinates[0][0][1],\n                y = -lat * 50 / 75 + 55;\n\n            const lon = p.geometry.coordinates[0][0][0],\n                x = lon > 0 ? 99 + (lon - 180) / 20 : (lon + 180) / 5;\n\n            const box = geoBounds.coordinates[0],\n                width = (box[0][0] - box[1][0]) / 360 * 100,\n                height = (box[2][1] - box[1][1]) / 180 * 100;\n\n            insets.push({\n                borderWidth: 0,\n                padding: 0,\n                id: code,\n                field: {\n                    type: 'Polygon',\n                    coordinates: [\n                        [\n                            [x, y],\n                            [x + width, y],\n                            [x + width, y + height],\n                            [x, y + height]\n                        ]\n                    ]\n                },\n                geoBounds\n            });\n\n            const g = topology.objects.default.geometries\n                .find(g => g.id === code);\n            if (g) {\n                delete g.properties['hc-middle-x'];\n                delete g.properties['hc-middle-y'];\n                //g.properties.lon = lon;\n                //g.properties.lat = lat;\n            }\n        }\n\n\n    });\n\n    const data = await fetch(\n        'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/world-population.json'\n    ).then(response => response.json());\n\n    /*\n    toBeMoved.forEach(code => {\n        const p = data.find(p => p.code === code);\n        if (p) {\n            p.color = 'orange';\n        }\n    });\n    */\n\n    Highcharts.mapChart('container', {\n        chart: {\n            plotBorderWidth: 1,\n            map: topology,\n            height: '65%'\n        },\n\n        title: {\n            text: 'Cropped map',\n            align: 'left'\n        },\n\n        subtitle: {\n            text: 'Study for a separate map (world-cropped.topo.json) where Pacific islands are inset to allow a better fit for the continents',\n            align: 'left'\n        },\n\n        accessibility: {\n            description: 'We see how China and India by far are the countries with the largest population.'\n        },\n\n        legend: {\n            enabled: false\n        },\n\n        mapNavigation: {\n            enabled: true,\n            buttonOptions: {\n                verticalAlign: 'bottom'\n            }\n        },\n\n        mapView: {\n            insets\n        },\n\n        colorAxis: {\n            min: 1,\n            max: 1000,\n            type: 'logarithmic'\n        },\n\n        series: [\n            /*\n            {\n                data: data,\n                mapData: topology,\n                joinBy: ['iso-a2', 'code'],\n                name: 'Population density',\n                states: {\n                    hover: {\n                        color: '#a4edba'\n                    }\n                },\n                tooltip: {\n                    valueSuffix: '/km²'\n                }\n            }\n            */\n            {\n                name: 'Countries',\n                color: '#E0E0E0',\n                enableMouseTracking: false\n            }, {\n                type: 'mapbubble',\n                name: 'Population 2016',\n                joinBy: ['iso-a3', 'code3'],\n                data: data,\n                minSize: 4,\n                maxSize: '12%',\n                tooltip: {\n                    pointFormat: '{point.properties.name} ({point.properties.hc-a2}): {point.z} thousands'\n                }\n            }\n        ]\n    });\n})();","css":"#container {\n    margin: 0 auto;\n}\n\n.loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n","html":"\n\n\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts from 'highcharts/highmaps';\nimport Data       from 'highcharts/modules/data';\nimport Zh_cn      from 'https://code.hcharts.cn/plugins/zh_cn.js';\n\n// 初始化模块\nData(Highcharts);\nZh_cn(Highcharts);\n","scripts":["https://code.hcharts.cn/maps/10.3.2/highmaps.js","https://code.hcharts.cn/maps/10.3.2/modules/data.js","https://code.hcharts.cn/plugins/zh_cn.js"]}