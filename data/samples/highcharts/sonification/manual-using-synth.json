{"js":"var chart;\n\nHighcharts.getJSON('https://demo-live-data.highcharts.com/aapl-c.json', function (data) {\n    chart = Highcharts.chart('container', {\n        chart: {\n            backgroundColor: 'transparent'\n        },\n\n        title: {\n            text: '2 Years of AAPL Stock Price',\n            align: 'left'\n        },\n\n        xAxis: {\n            type: 'datetime',\n            crosshair: {\n                enabled: true,\n                width: 3,\n                color: '#9080a0'\n            }\n        },\n\n        yAxis: {\n            labels: {\n                format: '${value}'\n            },\n            title: {\n                enabled: false\n            }\n        },\n\n        legend: {\n            enabled: false\n        },\n\n        series: [{\n            name: 'AAPL',\n            data: data\n        }]\n    });\n});\n\n\n// Naive data grouping that builds a new data array from the min and max\n// point for each bin\nfunction groupData(data, numPerBin) {\n    var grouped = [];\n    for (var i = 0, len = data.length; i < len; i += numPerBin) {\n        var bin = data.slice(i, i + numPerBin).map(function (p) {\n            return p.y;\n        });\n        grouped.push(Math.min.apply(null, bin), Math.max.apply(null, bin));\n    }\n    return grouped;\n}\n\n\n// Sonify the chart manually\nfunction sonifyChart(synth, chart) {\n    var noteToFreq = Highcharts.sonification.SonificationInstrument\n        .musicalNoteToFrequency;\n    var binSize = 20,\n        data = groupData(chart.series[0].points, binSize),\n        duration = 7000,\n        len = data.length,\n        minVal = chart.yAxis[0].dataMin,\n        maxVal = chart.yAxis[0].dataMax,\n        minNote = 22, // note number 0 is c0\n        maxNote = 84,\n        hoverPoint;\n\n    data.forEach(function (y, ix) {\n        // Map y value to note\n        var note = Math.round(\n                (y - minVal) /\n                (maxVal - minVal) * (maxNote - minNote) + minNote\n            ),\n            // Offset of note in milliseconds\n            msOffset = ix / len * duration;\n\n        // Schedule the synth to play this note at the desired time\n        synth.playFreqAtTime(\n            msOffset / 1000,\n            noteToFreq(note),\n            400\n        );\n\n        // Naively find the connected data point, and schedule the\n        // crosshair drawing\n        var point = chart.series[0].points[ix * binSize / 2 + 2];\n        setTimeout(function () {\n            if (point) {\n                point.series.xAxis.drawCrosshair(null, point);\n                point.setState('hover');\n                hoverPoint = point;\n            } else if (hoverPoint) {\n                chart.xAxis[0].hideCrosshair();\n                hoverPoint.setState();\n            }\n        }, msOffset);\n    });\n\n    setTimeout(function () {\n        document.getElementById('play').style.visibility = 'visible';\n    }, duration);\n}\n\n\n// When we click play, set up an audio context and the synth, then sonify\ndocument.getElementById('play').onclick = function () {\n    if (!chart) {\n        return;\n    }\n\n    var audioContext = new AudioContext(),\n        synth = new Highcharts.sonification.SynthPatch(\n            audioContext,\n            // Use a preset or send in options to the synth directly here\n            Highcharts.sonification.InstrumentPresets.piano\n        );\n    synth.connect(audioContext.destination);\n    synth.startSilently();\n\n    sonifyChart(synth, chart);\n\n    // Hide button so we don't have to handle starting/stopping multiple\n    // sonifications at the same time, just to keep this demo simple\n    this.style.visibility = 'hidden';\n};\n","css":".highcharts-figure {\n    max-width: 900px;\n    margin: 0 auto;\n    position: relative;\n}\n\n#play {\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    z-index: 10;\n    background-color: #fff;\n    border: 1px solid #25386f;\n    color: #25386f;\n    font-size: 0.9rem;\n    min-height: 30px;\n    font-weight: 500;\n    border-radius: 4px;\n    padding: 0.375rem 0;\n    width: 6rem;\n    margin-bottom: 0.25rem;\n    margin-top: 0.25rem;\n    text-align: center;\n    cursor: pointer;\n}\n\n#play:hover {\n    background-color: #25386f;\n    color: #fff;\n}\n","html":"\n<figure class=\"highcharts-figure\">\n    <button id=\"play\">Play</button>\n    <div id=\"container\"></div>\n    <p class=\"highcharts-description\">\n        This chart shows an extra lightweight and customizable way of working, where only the Synth capabilities of the sonification module are leveraged. The sonification logic is custom, and handled manually. This allows for bespoke implementations, either for performance reasons, or to achieve sonifications beyond what is possible with the built-in features.\n    </p>\n</figure>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts    from 'highcharts/highstock';\nimport Data          from 'highcharts/modules/data';\nimport Sonification  from 'highcharts/modules/sonification';\nimport Accessibility from 'highcharts/modules/accessibility';\n\n// 初始化模块\nData(Highcharts);\nSonification(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://code.highcharts.com/stock/11.0.1/highstock.js","https://code.highcharts.com/stock/11.0.1/modules/data.js","https://code.highcharts.com/11.0.1/modules/sonification.js","https://code.highcharts.com/11.0.1/modules/accessibility.js"]}