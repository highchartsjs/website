{"js":"/**\n * Synth patch editor for Highcharts Sonification Instruments\n * */\n\nlet audioContext;\nlet uidCounter = 0; // For control IDs\nconst el = document.getElementById.bind(document),\n    childValue = (parent, childSelector) =>\n        parent.querySelector(childSelector).value,\n    SynthPatch = Highcharts.sonification.SynthPatch,\n    synths = [],\n    presets = Highcharts.sonification.InstrumentPresets;\n\n// Note: always plays the sequence on the first synth.\nfunction playSequence(notes, durationMultiplier) {\n    if (audioContext && synths[0]) {\n        notes.forEach(\n            (freq, i) => synths[0].synthPatch.playFreqAtTime(\n                i * 0.1 * durationMultiplier, freq, 150 * durationMultiplier\n            )\n        );\n    }\n}\nconst playJingle = () => playSequence([261.63, 329.63, 392, 523.25], 1);\nconst playWideRange = () => playSequence([\n    49.00, 65.41, 82.41, 87.31, 130.81, 174.61, 220.00, 261.63, 329.63,\n    392.00, 493.88, 523.25, 659.25, 783.99, 1046.50, 1318.51, 1567.98,\n    1975.53, 2093.00\n], 1.5);\n\n\n// Create a chart for defining a volume envelope (attack or release)\nfunction createEnvelopeChart(type, containerEl, onEdit) {\n    function cleanSeriesData(series) {\n        const newData = series.points.map(o => [o.x, o.y])\n            .sort((a, b) => a[0] - b[0]);\n        if (newData[0] && newData[0][0] > 1) {\n            newData.unshift([0, type === 'attack' ? 0 : 1]);\n        }\n        series.setData(newData);\n        onEdit();\n    }\n\n    return Highcharts.chart(containerEl, {\n        title: { text: null },\n        credits: { enabled: false },\n        accessibility: { enabled: false },\n        legend: { enabled: false },\n        tooltip: { enabled: false },\n        chart: {\n            backgroundColor: 'transparent',\n            plotBorderWidth: 1,\n            spacing: [10, 5, 0, 0],\n            events: {\n                click: function (e) {\n                    this.series[0].addPoint([\n                        Math.round(e.xAxis[0].value),\n                        Math.round(e.yAxis[0].value * 100) / 100\n                    ]);\n                    cleanSeriesData(this.series[0]);\n                    onEdit();\n                },\n                load: function () {\n                    const btn = document.createElement('button');\n                    let hideTimeout;\n                    this.container.appendChild(btn);\n                    btn.classList.add('chartReset', 'hidden');\n                    btn.textContent = 'Reset';\n                    btn.onclick = e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        this.series[0].setData([]);\n                        onEdit();\n                    };\n                    this.renderTo.addEventListener('mouseenter', () => {\n                        clearTimeout(hideTimeout);\n                        btn.classList.remove('hidden');\n                    });\n                    this.renderTo.addEventListener('mouseleave', () => {\n                        hideTimeout = setTimeout(() => btn.classList.add('hidden'), 400);\n                    });\n                }\n            }\n        },\n        yAxis: {\n            min: 0,\n            max: 1,\n            tickAmount: 3,\n            minPadding: 0,\n            maxPadding: 0,\n            minRange: 0,\n            startOnTick: false,\n            endOnTick: false,\n            title: {\n                enabled: false\n            }\n        },\n        xAxis: {\n            min: 0,\n            max: 600,\n            minPadding: 0,\n            maxPadding: 0,\n            tickAmount: 3,\n            minRange: 0,\n            startOnTick: false,\n            endOnTick: false\n        },\n        series: [{\n            cursor: 'pointer',\n            pointInterval: 50,\n            marker: {\n                enabled: true\n            },\n            dragDrop: {\n                draggableY: true,\n                draggableX: true,\n                dragMaxX: 600,\n                dragMinX: 1,\n                dragMaxY: 1,\n                dragMinY: 0\n            },\n            point: {\n                events: {\n                    click: function () {\n                        const series = this.series;\n                        this.remove(false);\n                        cleanSeriesData(series);\n                    },\n                    drop: function (e) {\n                        const point = e.newPoints[e.newPointId].point,\n                            { x, y } = e.newPoint;\n                        e.preventDefault();\n                        point.update({\n                            x: Math.round(x),\n                            y: Math.round(y * 100) / 100\n                        }, false);\n                        cleanSeriesData(point.series);\n                    }\n                }\n            },\n            data: []\n        }]\n    });\n}\n\n\nfunction addOscControls(controlsContainerEl, options) {\n    let content = '';\n    const opts = options || {},\n        typeOptions = ['sine', 'sawtooth', 'triangle', 'square', 'whitenoise', 'pulse']\n            .reduce((str, option) => `${str}<option value=\"${option}\">${option}</option>`, ''),\n        addChartContainer = (id, label) => {\n            const uid = `${id}-${uidCounter++}`;\n            content += `<div class=\"chart span2\" id=\"${uid}\"></div>\n                <label class=\"chartlabel\">${label}</label>`;\n            return uid;\n        },\n        addControl = (type, className, label, controlContent, step) => {\n            const uid = `${className}-${uidCounter++}`,\n                shared = `id=\"${uid}\" class=\"span2 ${className}\" name=\"${uid}\"`;\n            content += `<label for=\"${uid}\">${label}</label>`;\n            if (type === 'select') {\n                content += `<select ${shared}>${controlContent}</select>`;\n            } else if (type === 'input') {\n                // eslint-disable-next-line\n                content += `<input type=\"number\" ${shared} value=\"${controlContent}\" step=\"${step}\">`;\n            }\n            return uid;\n        };\n\n    const controlIds = {\n        type: addControl('select', 'Type', 'Waveform type', typeOptions),\n        freqMultiplier: addControl('input', 'FreqMultiplier', 'Freq multiplier',\n            opts.freqMultiplier || '', 1),\n        fixedFrequency: addControl('input', 'FixedFreq', 'Fixed frequency',\n            opts.fixedFrequency || '', 1),\n        volume: addControl('input', 'Vol', 'Volume',\n            opts.volume || '0.5', 0.05),\n        detune: addControl('input', 'Detune', 'Detune (cents)',\n            opts.detune || '', 1),\n        pulseWidth: addControl('input', 'PulseWidth', 'Pulse width',\n            opts.pulseWidth || '', 0.05),\n        volPitchTrackingMult: addControl('input', 'VolPitchTrackingMult', 'Volume tracking multiplier',\n            opts.volumePitchTrackingMultiplier || '', 0.05),\n        lowpassFreq: addControl('input', 'LowpassFreq', 'Lowpass frequency',\n            opts.lowpass && opts.lowpass.frequency || '', 1),\n        lowpassPitchTrackingMult: addControl('input', 'LowpassPitchTrackingMult', 'Lowpass tracking multiplier',\n            opts.lowpass && opts.lowpass.frequencyPitchTrackingMultiplier || '', 0.1),\n        lowpassQ: addControl('input', 'LowpassQ', 'Lowpass resonance',\n            opts.lowpass && opts.lowpass.Q || '', 0.1),\n        highpassFreq: addControl('input', 'HighpassFreq', 'Highpass frequency',\n            opts.highpass && opts.highpass.frequency || '', 1),\n        highpassPitchTrackingMult: addControl('input', 'HighpassPitchTrackingMult', 'Highpass tracking multiplier',\n            opts.highpass && opts.highpass.frequencyPitchTrackingMultiplier || '', 0.1),\n        highpassQ: addControl('input', 'HighpassQ', 'Highpass resonance',\n            opts.highpass && opts.highpass.Q || '', 0.1),\n        fmOsc: addControl('select', 'FMOsc', 'FM oscillator', ''),\n        vmOsc: addControl('select', 'VMOsc', 'VM oscillator', ''),\n        attackEnvChart: addChartContainer('AttackEnv', 'Attack envelope'),\n        releaseEnvChart: addChartContainer('ReleaseEnv', 'Release envelope')\n    };\n\n    controlsContainerEl.innerHTML = content;\n    return controlIds;\n}\n\n\nclass Synth {\n    constructor(htmlContainerEl) {\n        const synth = this;\n        this.container = htmlContainerEl;\n        this.oscIdCounter = 1;\n        this.synthPatch = null;\n        this.oscillators = [];\n\n        // TODO: HTML should probably be generated.\n        this.child('.playWideRange').onclick = playWideRange;\n        this.child('.addOsc').onclick = this.addOscillator.bind(this);\n        this.child('.resetEQ').onclick = this.resetEQ.bind(this);\n        this.child('.masterVolume').onchange = this.child('.glideDuration').onchange =\n            this.updateFromUI.bind(this);\n        this.child('.preset').innerHTML = Object.keys(presets)\n            .reduce((str, p) => `${str}<option value=\"${p}\">${p}</option>`, '');\n        this.child('.preset').onchange = function () {\n            synth.applyPreset(this.value);\n            this.blur();\n        };\n        this.charts = {\n            masterAttackEnvChart: createEnvelopeChart(\n                'attack', this.child('.masterAttackEnvChart'), this.updateFromUI.bind(this)\n            ),\n            masterReleaseEnvChart: createEnvelopeChart(\n                'release', this.child('.masterReleaseEnvChart'), this.updateFromUI.bind(this)\n            )\n        };\n        this.populateEQSliders();\n        setTimeout(() => this.applyPreset('piano'), 0);\n    }\n\n\n    addOscillator(options) {\n        const synth = this,\n            id = this.oscIdCounter++,\n            oscContainer = this.child('.oscillators'),\n            cardContainer = document.createElement('div'),\n            controls = document.createElement('div'),\n            oscillator = {\n                id,\n                controlIds: addOscControls(controls, options),\n                remove() {\n                    oscContainer.removeChild(cardContainer);\n                    synth.oscillators.splice(\n                        synth.oscillators.indexOf(oscillator), 1\n                    );\n                    synth.charts[oscillator.controlIds.attackEnvChart]\n                        .destroy();\n                    synth.charts[oscillator.controlIds.releaseEnvChart]\n                        .destroy();\n                    delete synth.charts[oscillator.controlIds.attackEnvChart];\n                    delete synth.charts[oscillator.controlIds.releaseEnvChart];\n                    synth.updateModulationLists();\n                }\n            };\n\n        this.oscillators.push(oscillator);\n        controls.className = 'controlsContainer';\n        cardContainer.className = 'oscillator';\n        const heading = document.createElement('h3');\n        heading.textContent = '#' + id;\n        const remove = document.createElement('button');\n        remove.textContent = 'Remove #' + id;\n        remove.onclick = oscillator.remove;\n\n        cardContainer.appendChild(heading);\n        cardContainer.appendChild(remove);\n        cardContainer.appendChild(controls);\n        oscContainer.appendChild(cardContainer);\n\n        setTimeout(() => {\n            this.charts[\n                oscillator.controlIds.attackEnvChart\n            ] = createEnvelopeChart(\n                'attack', oscillator.controlIds.attackEnvChart, this.updateFromUI.bind(this)\n            );\n            this.charts[\n                oscillator.controlIds.releaseEnvChart\n            ] = createEnvelopeChart(\n                'release', oscillator.controlIds.releaseEnvChart, this.updateFromUI.bind(this)\n            );\n            el(oscillator.controlIds.vmOsc).onchange =\n            el(oscillator.controlIds.fmOsc).onchange = function () {\n                if (this.value === '' + id) {\n                    alert('Oscillator can\\'t modulate itself - please assign to a different oscillator.');\n                    this.value = '';\n                }\n            };\n            Object.values(oscillator.controlIds).forEach(id => el(id)\n                .addEventListener('change', synth.updateModulationLists.bind(synth)));\n            synth.updateModulationLists();\n        }, 0);\n    }\n\n\n    applyEqToUI(eqDefinitions) {\n        const defs = eqDefinitions.slice(0),\n            eqContainers = this.container.querySelectorAll('.eqSlider'),\n            defaultFrequencies = [200, 400, 800, 1600, 2200, 3600, 6400, 12800];\n\n        let i = 0;\n        while (defs.length < eqContainers.length) {\n            defs.push({ frequency: defaultFrequencies[i++], gain: 0, Q: 1 });\n        }\n\n        defs.sort((a, b) => a.frequency - b.frequency).forEach((def, ix) => {\n            const sliderContainer = eqContainers[ix];\n            sliderContainer.querySelector('.gain').value = def.gain || 0;\n            sliderContainer.querySelector('.freq').value = def.frequency;\n            sliderContainer.querySelector('.q').value = def.Q !== void 0 ? def.Q : 1;\n        });\n    }\n\n\n    applyPreset(presetId) {\n        const options = presets[presetId],\n            envToChart = (chart, env) => this.charts[chart].series[0].setData(\n                (env || []).map(o => [o.t, o.vol])\n            );\n\n        // Reset first\n        let i = this.oscillators.length;\n        while (i--) {\n            this.oscillators[i].remove();\n        }\n        this.oscIdCounter = 1;\n\n        this.child('.masterVolume').value = options.masterVolume || 1;\n        this.child('.glideDuration').value = options.noteGlideDuration || '';\n        envToChart('masterAttackEnvChart', options.masterAttackEnvelope);\n        envToChart('masterReleaseEnvChart', options.masterReleaseEnvelope);\n        this.applyEqToUI(options.eq || []);\n        options.oscillators.forEach(this.addOscillator.bind(this));\n\n        setTimeout(() => { // Settimeout to allow charts etc to build\n            const opts = options.oscillators;\n            this.oscillators.forEach((osc, i) => {\n                el(osc.controlIds.type).value = opts[i].type;\n                el(osc.controlIds.fmOsc).value =\n                    opts[i].fmOscillator !== null ? opts[i].fmOscillator + 1 : '';\n                el(osc.controlIds.vmOsc).value =\n                    opts[i].vmOscillator !== null ? opts[i].vmOscillator + 1 : '';\n                envToChart(osc.controlIds.attackEnvChart,\n                    opts[i].attackEnvelope);\n                envToChart(osc.controlIds.releaseEnvChart,\n                    opts[i].releaseEnvelope);\n            });\n            setTimeout(this.updateFromUI.bind(this), 0);\n            setTimeout(playJingle, 150);\n        }, 0);\n    }\n\n\n    child(elSelector) {\n        return this.container.querySelector(elSelector);\n    }\n\n\n    getEnvelopeFromChart(chartContainerId) {\n        const chart = this.charts[chartContainerId];\n        return chart ? chart.series[0].points\n            .map(p => ({ t: p.x, vol: p.y })) : [];\n    }\n\n\n    getEqFromUI() {\n        return [...this.container.querySelectorAll('.eqSlider')]\n            .reduce((definitions, sliderContainer) => {\n                const gain = parseFloat(childValue(sliderContainer, '.gain'));\n                if (gain < -0.01 || gain > 0.01) {\n                    const frequency = parseFloat(childValue(sliderContainer, '.freq')) || 0,\n                        Q = parseFloat(childValue(sliderContainer, '.q')) || 1;\n                    definitions.push({ frequency, Q, gain });\n                }\n                return definitions;\n            }, []);\n    }\n\n\n    getPatchOptionsFromUI() {\n        const val = id => el(id).value,\n            getIfNum = (parser, id) => {\n                const x = parser(val(id));\n                return isNaN(x) ? void 0 : x;\n            },\n            floatVal = id => getIfNum(parseFloat, id),\n            intVal = id => getIfNum(n => parseInt(n, 10), id),\n            removeUnusedProps = obj => {\n                for (const [key, val] of Object.entries(obj)) {\n                    if (\n                        typeof val === 'undefined' ||\n                        val.length === 0 ||\n                        typeof val === 'object' && !Object.values(val)\n                            .some(n => typeof n !== 'undefined')\n                    ) {\n                        delete obj[key];\n                    }\n                }\n                return obj;\n            };\n\n        const options = {\n            masterVolume: childValue(this.container, '.masterVolume'),\n            noteGlideDuration: childValue(this.container, '.glideDuration'),\n            masterAttackEnvelope: this.getEnvelopeFromChart('masterAttackEnvChart'),\n            masterReleaseEnvelope: this.getEnvelopeFromChart('masterReleaseEnvChart'),\n            eq: this.getEqFromUI(),\n            oscillators: this.oscillators.map(osc => {\n                const i = osc.controlIds,\n                    getOscWithId = id => this.oscillators\n                        .findIndex(osc => osc.id === id),\n                    fmIndex = getOscWithId(intVal(i.fmOsc)),\n                    vmIndex = getOscWithId(intVal(i.vmOsc));\n\n                const oscOptions = {\n                    type: val(i.type),\n                    freqMultiplier: floatVal(i.freqMultiplier),\n                    fixedFrequency: floatVal(i.fixedFrequency),\n                    volume: floatVal(i.volume),\n                    detune: intVal(i.detune),\n                    pulseWidth: floatVal(i.pulseWidth),\n                    volumePitchTrackingMultiplier:\n                        floatVal(i.volPitchTrackingMult),\n                    lowpass: {\n                        frequency: floatVal(i.lowpassFreq),\n                        frequencyPitchTrackingMultiplier:\n                            floatVal(i.lowpassPitchTrackingMult),\n                        Q: floatVal(i.lowpassQ)\n                    },\n                    highpass: {\n                        frequency: floatVal(i.highpassFreq),\n                        frequencyPitchTrackingMultiplier:\n                            floatVal(i.highpassPitchTrackingMult),\n                        Q: floatVal(i.highpassQ)\n                    },\n                    fmOscillator: fmIndex > -1 ? fmIndex : void 0,\n                    vmOscillator: vmIndex > -1 ? vmIndex : void 0,\n                    attackEnvelope: this.getEnvelopeFromChart(i.attackEnvChart),\n                    releaseEnvelope:\n                        this.getEnvelopeFromChart(i.releaseEnvChart)\n                };\n\n                return removeUnusedProps(oscOptions);\n            })\n        };\n        removeUnusedProps(options);\n        return options;\n    }\n\n\n    populateEQSliders() {\n        const container = this.child('.eqSliders');\n        for (let i = 0; i < 8; ++i) {\n            const col = document.createElement('div');\n            col.className = 'eqSlider';\n            // eslint-disable-next-line\n            col.innerHTML = `<input class=\"gain\" orient=\"vertical\" type=\"range\" min=\"-40\" max=\"20\" step=\"2\">\n            <input class=\"freq\" type=\"number\">\n            <input class=\"q\" type=\"number\">\n            `;\n            container.appendChild(col);\n        }\n        setTimeout(() => this.container.querySelectorAll('.eqSliders input')\n            .forEach(input => (input.onchange = this.updateFromUI.bind(this))),\n        0);\n    }\n\n\n    resetEQ() {\n        this.container.querySelectorAll('.eqSliders .gain').forEach(input => (input.value = 0));\n        this.updateFromUI();\n    }\n\n\n    updateFromUI() {\n        const options = this.getPatchOptionsFromUI();\n        this.child('.json').textContent = JSON.stringify(options, null, ' ');\n\n        if (this.synthPatch) {\n            this.synthPatch.stop();\n        }\n        if (audioContext) {\n            this.synthPatch = new SynthPatch(audioContext, options);\n            this.synthPatch.connect(audioContext.destination);\n            this.synthPatch.startSilently();\n        }\n    }\n\n\n    // Update the lists of oscillators we can modulate in the UI\n    updateModulationLists() {\n        const newList = this.oscillators.reduce(\n            (str, osc) => `${str}<option value=\"${osc.id}\">#${osc.id}</option>`,\n            '<option value=\"\"></option>'\n        );\n        this.oscillators.forEach(o => {\n            const valInList = val => newList.indexOf(`value=\"${val}\"`) > 0,\n                fmSel = el(o.controlIds.fmOsc),\n                vmSel = el(o.controlIds.vmOsc),\n                oldFMVal = fmSel.value,\n                oldVMVal = vmSel.value;\n            vmSel.innerHTML = fmSel.innerHTML = newList;\n            // Don't remove existing values if we don't have to\n            if (valInList(oldFMVal)) {\n                fmSel.value = oldFMVal;\n            }\n            if (valInList(oldVMVal)) {\n                vmSel.value = oldVMVal;\n            }\n        });\n        this.updateFromUI();\n    }\n}\n\n\n// Use synth --------------------------------------------------------------------------------------------\n\nel('startSynth').onclick = function () {\n    audioContext = new AudioContext();\n    synths.push(new Synth(el('synthContainer')));\n\n    el('controls').classList.remove('hidden');\n    this.classList.add('hidden');\n    el('keyStatus').textContent = 'No synth key pressed';\n    setTimeout(playJingle, 250);\n};\n\n\ndocument.querySelectorAll('.json').forEach(el => (el.onclick = () => el.select()));\nel('showHelp').onclick = () => el('help').classList.toggle('hidden');\n\n\nconst synthKeysPressed = new Set();\ndocument.addEventListener('keydown', e => {\n    const freq = {\n        KeyA: 261.63, // C4\n        KeyW: 277.18,\n        KeyS: 293.66,\n        KeyE: 311.13,\n        KeyD: 329.63,\n        KeyF: 349.23,\n        KeyT: 369.99,\n        KeyG: 392,\n        KeyY: 415.30,\n        KeyH: 440,\n        KeyU: 466.16,\n        KeyJ: 493.88,\n        KeyK: 523.25, // C5\n        KeyO: 554.37,\n        KeyL: 587.33\n    }[e.code];\n    if (freq && !synthKeysPressed.has(e.code) && synths[0].synthPatch) {\n        synthKeysPressed.add(e.code);\n        el('keyStatus').textContent = 'Synth key pressed';\n        synths[0].synthPatch.playFreqAtTime(0, freq); // Play indefinitely\n    }\n});\n\ndocument.addEventListener('keyup', e => {\n    synthKeysPressed.delete(e.code);\n    if (!synthKeysPressed.size) {\n        el('keyStatus').textContent = 'No synth key pressed';\n        if (synths[0].synthPatch) {\n            synths[0].synthPatch.silenceAtTime(0);\n        }\n    }\n});\n","css":"h2 {\n    font-size: 1.3rem;\n    font-weight: normal;\n    margin-top: 30px;\n}\n\n.code {\n    font-family: monospace;\n    background-color: #efefef;\n    padding: 1px 4px;\n}\n\n#startSynth {\n    height: 2.5rem;\n}\n\n#help {\n    font-size: 0.8rem;\n    padding: 20px 40px;\n    max-width: 895px;\n    margin-top: 10px;\n    margin-bottom: 10px;\n    background-color: #f8f8f8;\n}\n\n#help h2 {\n    font-size: 1rem;\n    text-align: center;\n    margin-top: 0;\n}\n\n#help p {\n    margin: 0;\n    margin-top: 8px;\n}\n\n#showHelp {\n    margin-bottom: 20px;\n    padding: 5px 20px;\n}\n\n.json {\n    font-family: monospace;\n    background-color: #444;\n    color: #d6eed6;\n    padding: 10px;\n    height: 200px;\n    width: 100%;\n    overflow-y: scroll;\n    resize: none;\n}\n\n.row {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    gap: 20px;\n}\n\n.firstrow {\n    align-items: stretch;\n    gap: 2px;\n    margin-bottom: 20px;\n    max-width: 1500px;\n}\n\n.firstrow p {\n    margin: 0;\n}\n\n#intro {\n    font-size: 1.1rem;\n    padding: 20px;\n    background-color: #e1f6fe;\n}\n\n#keyStatus {\n    background-color: #f3f2fc;\n    padding: 20px;\n    text-align: center;\n    flex: 1;\n}\n\n.chart {\n    height: 200px;\n}\n\n.hidden {\n    display: none;\n}\n\n.globalControls {\n    display: inline-flex;\n    align-items: flex-start;\n    margin-top: 30px;\n    background-color: #fcfcfc;\n    border: 1px solid #f0f0f0;\n    padding: 20px;\n}\n\n.globalControls h2 {\n    margin-top: 0;\n}\n\n.globalControls h3 {\n    margin-top: 5px;\n    margin-left: 30px;\n    font-size: 0.8rem;\n    font-weight: normal;\n}\n\n.globalControls .chart {\n    width: 250px;\n    margin-left: 20px;\n}\n\n.globalControls input {\n    display: block;\n    margin-top: 5px;\n}\n\n.globalControls label {\n    margin-top: 20px;\n    display: block;\n}\n\nbutton {\n    height: 1.9rem;\n    background: none;\n    cursor: pointer;\n    padding: 2px 16px;\n    border-radius: 3px;\n    border: 1px solid #aaa;\n    background-color: #fafafa;\n}\n\nbutton:hover {\n    background-color: #efefef;\n}\n\nbutton:active {\n    background-color: #e0e0e0;\n}\n\n.masterVolume {\n    display: block;\n    margin-top: 7px;\n}\n\n.presetLabel {\n    font-size: 1rem;\n    margin: 10px 5px;\n}\n\n.preset {\n    width: 150px;\n    height: 1.8rem;\n    margin-left: 5px;\n}\n\n.masterEQ {\n    margin-left: 20px;\n}\n\n.eqSliders {\n    gap: 0;\n    flex-wrap: nowrap;\n}\n\n.eqSlider .gain {\n    -webkit-appearance: slider-vertical;\n    width: 50px;\n}\n\n.eqSlider input[type=\"number\"] {\n    width: 3.5rem;\n    text-align: center;\n}\n\n.resetEQ {\n    height: 1.3rem;\n    font-size: 0.7rem;\n    justify-self: flex-end;\n    margin-bottom: 6px;\n}\n\n.addOsc {\n    height: 30px;\n    margin-top: 10px;\n    background-color: #d5f3d5;\n    border: 1px solid #616161;\n}\n\n.addOsc:hover {\n    background-color: #e6f2e6;\n    border: 1px solid #455;\n}\n\n.addOsc:active {\n    background-color: #dcece9;\n}\n\n.span2 {\n    grid-column-end: span 2;\n}\n\n.oscillator {\n    background-color: #fafafa;\n    border: 1px solid #d7d7d7;\n    padding: 15px;\n    border-radius: 4px;\n}\n\n.oscillator .controlsContainer {\n    display: grid;\n    column-gap: 2px;\n    align-items: center;\n    row-gap: 5px;\n    grid-template-columns: 11rem 3rem 3.5rem;\n}\n\n.oscillator h3 {\n    font-size: 1.4rem;\n    display: inline-block;\n    margin-top: 0;\n}\n\n.oscillator button:not(.chartReset) {\n    background-color: #af1919;\n    color: white;\n    padding: 5px;\n    float: right;\n}\n\n.oscillator select {\n    height: 1.4rem;\n}\n\n.oscillator .chart {\n    margin-top: 20px;\n}\n\n.chartlabel {\n    font-size: 0.85rem;\n    margin-left: 3px;\n}\n\n.chartReset {\n    position: absolute;\n    right: 8px;\n    font-size: 0.8rem;\n    height: 1.2rem;\n}\n","html":"\n<main>\n  <h1>Synth Patch Editor</h1>\n  <div class=\"row firstrow\">\n    <p id=\"intro\">Play the synth using the <span class=\"code\">A</span> to <span class=\"code\">L</span> and <span class=\"code\">W</span> to <span class=\"code\">O</span> keys on your keyboard, simulating white and black keys on a piano.</p>\n    <p id=\"keyStatus\">Synth not started</p>\n  </div>\n\n  <button id=\"startSynth\">Start synth</button>\n\n  <div id=\"controls\" class=\"hidden\">\n      <div id=\"help\" class=\"hidden\">\n        <h2>Help</h2>\n        <p>Note: The synth can overdrive if you set volume too high or add many oscillators to play at once without lowering their volumes.</p>\n        <p>To create volume envelopes, click in the charts to add points. The points can be dragged, or clicked to delete. The master envelopes run in addition to the oscillator envelopes if defined.</p>\n        <p>The pulse width parameter only applies to oscillators with waveform type \"pulse\".</p>\n        <p>The frequency parameters do not apply to oscillators with waveform type \"whitenoise\".</p>\n        <p>The tracking multiplier parameters are used for frequency dependent behavior. For example, by setting the volume tracking multiplier to 0.01, the volume will be lower at higher notes. The multiplier is a logarithmic function, where 1 is at ca 50Hz, and you define the output for an input frequency around 3.2kHz.</p>\n        <p>The FM and VM oscillator parameters are used for frequency modulation (FM) and volume modulation (VM). Set this parameter to one of the other oscillators to modulate its frequency or volume. Note: With pulse waveforms, the FM parameter actually controls PWM (pulse width modulation) instead of FM.</p>\n      </div>\n\n      <button id=\"showHelp\">Help</button>\n\n      <div id=\"synthContainer\">\n        <div class=\"row\">\n          <label class=\"presetLabel\">Preset <select class=\"preset\"></select></label>\n          <button class=\"playWideRange\">Play wide range</button>\n        </div>\n\n        <div class=\"globalControls\">\n          <div>\n            <h2>Global controls</h2>\n            <label>Master volume <input class=\"masterVolume\" min=\"0.1\" max=\"1\" step=\"0.05\" type=\"range\" value=\"0.8\"></label>\n            <label>Glide between notes <input class=\"glideDuration\" type=\"number\" value=\"0\"></label>\n          </div>\n          <div>\n            <h3>Master Attack Envelope</h3>\n            <div class=\"masterAttackEnvChart chart\"></div>\n          </div>\n          <div>\n            <h3>Master Release Envelope</h3>\n            <div class=\"masterReleaseEnvChart chart\"></div>\n          </div>\n          <div class=\"masterEQ\">\n            <div class=\"row\">\n              <h3>Master Parametric EQ (gain, frequency, Q)</h3>\n              <button class=\"resetEQ\">Reset</button>\n            </div>\n            <div class=\"eqSliders row\"></div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <h2>Oscillators</h2>\n          <button class=\"addOsc\">+ Add oscillator</button>\n        </div>\n        <div class=\"oscillators row\">\n        </div>\n  \n        <h2>Generated Patch JSON</h2>\n        <textarea readonly class=\"json\">{}</textarea>\n      </div>\n  </div>\n</main>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts      from 'highcharts';\nimport DraggablePoints from 'highcharts/modules/draggable-points';\nimport Sonification    from 'highcharts/modules/sonification';\n\n// 初始化模块\nDraggablePoints(Highcharts);\nSonification(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/11.0.0/modules/draggable-points.js","https://code.highcharts.com/11.0.0/modules/sonification.js"]}