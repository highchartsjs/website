{"js":"const  mapbuttons = {\n    theme: {\n        fill: '#46465C',\n        'stroke-width': 1,\n        stroke: '#BBBAC5',\n        r: 2,\n        style: {\n            color: '#fff'\n        },\n        states: {\n            hover: {\n                fill: '#000',\n                'stroke-width': 1,\n                stroke: '#f0f0f0',\n                style: {\n                    color: '#fff'\n                }\n            },\n\n            select: {\n                fill: '#000',\n                'stroke-width': 1,\n                stroke: '#f0f0f0',\n                style: {\n                    color: '#fff'\n                }\n            }\n        }\n    },\n    verticalAlign: 'bottom'\n};\n\nlet chartToShow = 'spider';\n\nconst params = (new URL(document.location)).search;\n\nconst pArray = params.split('&');\n\nlet chartStr = '';\n\npArray.forEach(function (element) {\n    if (element.indexOf('charts=') !== -1) {\n        chartStr = element;\n    }\n});\n\nconst chartArray = chartStr.split('=');\nif (chartArray.length > 1) {\n    chartToShow = chartArray[1];\n}\n\nfunction spider() {\n    (async () => {\n\n        const topology = await fetch(\n            'https://code.highcharts.com/mapdata/custom/world.topo.json'\n        ).then(response => response.json());\n\n        const data = [\n            ['Atlanta', 'USA', '1996', 33.75, -84.38, 7, 2, 2, 3],\n            ['Sydney', 'Australia', '2020', -33.87, 151.20, 10, 4, 3, 3],\n            ['Athens', 'Greece', '2004', 38, 23.72, 6, 5, 0, 1],\n            ['Beijing', 'China', '2008', 39.92, 116.38, 9, 3, 5, 1],\n            ['London', 'Great Britain', '2012', 51.5, -0.12, 4, 2, 1, 1],\n            ['Rio de Janeiro', 'Brazil', '2016', -22.91, -43.20, 4, 0, 0, 4],\n            ['Tokyo', 'Japan', '2020', 35.69, 139.69, 8, 4, 2, 2]\n        ];\n\n        Highcharts.mapChart('container', {\n\n            chart: {\n                map: topology,\n                margin: [0, 0, 10, 0]\n            },\n\n            legend: {\n                enabled: false\n            },\n            exporting: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            mapView: {\n                zoom: 1.25\n            },\n            mapNavigation: {\n                enabled: true,\n                enableMouseWheelZoom: false,\n                buttons: {\n                    zoomIn: {\n                        x: 5,\n                        y: 5\n                    },\n                    zoomOut: {\n                        x: 5,\n                        y: 31\n                    }\n                },\n                buttonOptions: mapbuttons\n            },\n\n            title: {\n                text: '',\n                floating: true\n            },\n\n            subtitle: {\n                text: '',\n                floating: true\n            },\n\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '{point.city} ({point.country}, {point.year})<br/>' +\n                    'Total medals: {point.z}<br/>' +\n                    '<span style=\"color: #ffd700;\">\\u25CF</span> {point.gold}<br/>' +\n                    '<span style=\"color: #c0c0c0;\">\\u25CF</span> {point.silver}<br/>' +\n                    '<span style=\"color: #cd7f32;\">\\u25CF</span> {point.bronze}<br/>'\n            },\n\n            series: [{\n                name: 'World map',\n                nullColor: '#fad3cf'\n            }, {\n                name: 'Olympic games',\n                type: 'mapbubble',\n                color: '#fe5f55',\n                lineWidth: 1,\n                keys: ['city', 'country', 'year', 'lat', 'lon', 'z', 'gold', 'silver', 'bronze'],\n                data: data,\n                minSize: '5%',\n                maxSize: '12.5%',\n                accessibility: {\n                    point: {\n                        valueDescriptionFormat: '{point.city}, {point.country}, {point.year}. Total medals: {point.z}. Gold: {point.gold}, silver: {point.silver}, bronze: {point.bronze}.'\n                    }\n                }\n            }],\n            responsive: {\n                rules: [\n                    // up to 219\n                    {\n                        condition: {\n                            // /up tp this\n                            maxWidth: 219\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 150\n                            },\n                            mapView: {\n                                zoom: 0.5\n                            }\n                        }\n                    },\n                    {\n                        condition: {\n                            minWidth: 220\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 260\n                            },\n                            colorAxis: {\n                                visible: false\n                            }\n                        }\n                    }\n                ]\n            }\n\n        });\n\n    })();\n\n}\n\nfunction temps() {\n    (async () => {\n\n        const topology = await fetch(\n            'https://code.highcharts.com/mapdata/custom/europe.topo.json'\n        ).then(response => response.json());\n\n        // The demo uses https://api.met.no/ API. Every AJAX\n        // call downloads the XML format data, basing on specific capital\n        // city latitude and longitude values.\n\n\n        async function getJSON(url, cb) {\n            const request = await fetch(url).then(response => response.json());\n            return cb(request);\n        }\n\n        // Data structure: [country_code, latitude, longitude, capital_city]\n        const newData = [\n            ['dk', 55.66, 12.58, 'Copenhagen'],\n            ['fo', 62, -6.79, 'Torshavn'],\n            ['hr', 45.8, 16, 'Zagreb'],\n            ['nl', 52.35, 4.91, 'Amsterdam'],\n            ['ee', 59.43, 24.71, 'Tallinn'],\n            ['bg', 42.68, 23.31, 'Sofia'],\n            ['es', 40.4, -3.68, 'Madrid'],\n            ['it', 41.9, 12.48, 'Rome'],\n            ['sm', 43.93, 12.41, 'San Marino'],\n            ['va', 41.9, 12.45, 'Vatican'],\n            ['tr', 39.93, 32.86, 'Ankara'],\n            ['mt', 35.88, 14.5, 'Valetta'],\n            ['fr', 48.86, 2.33, 'Paris'],\n            ['no', 59.91, 10.75, 'Oslo'],\n            ['de', 52.51, 13.4, 'Berlin'],\n            ['ie', 53.31, -6.23, 'Dublin'],\n            ['ua', 50.43, 30.51, 'Kyiv'],\n            ['fi', 60.16, 24.93, 'Helsinki'],\n            ['se', 59.33, 18.05, 'Stockholm'],\n            ['ru', 55.75, 37.6, 'Moscow'],\n            ['gb', 51.5, -0.08, 'London'],\n            ['cy', 35.16, 33.36, 'Nicosia'],\n            ['pt', 38.71, -9.13, 'Lisbon'],\n            ['gr', 37.98, 23.73, 'Athens'],\n            ['lt', 54.68, 25.31, 'Vilnius'],\n            ['si', 46.05, 14.51, 'Ljubljana'],\n            ['ba', 43.86, 18.41, 'Sarajevo'],\n            ['mc', 43.73, 7.41, 'Monaco'],\n            ['al', 41.31, 19.81, 'Tirana'],\n            ['nc', 35.18, 33.36, 'North Nicosia'],\n            ['rs', 44.83, 20.5, 'Belgrade'],\n            ['ro', 44.43, 26.1, 'Bucharest'],\n            ['me', 42.43, 19.26, 'Podgorica'],\n            ['li', 47.13, 9.51, 'Vaduz'],\n            ['at', 48.2, 16.36, 'Vienna'],\n            ['sk', 48.15, 17.11, 'Bratislava'],\n            ['hu', 47.5, 19.08, 'Budapest'],\n            ['ad', 42.2, 1.24, 'Andorra la Vella'],\n            ['lu', 49.6, 6.11, 'Luxembourg'],\n            ['ch', 46.91, 7.46, 'Bern'],\n            ['be', 50.83, 4.33, 'Brussels'],\n            ['pl', 52.25, 21, 'Warsaw'],\n            ['mk', 42, 21.43, 'Skopje'],\n            ['lv', 56.95, 24.1, 'Riga'],\n            ['by', 53.9, 27.56, 'Minsk'],\n            ['is', 64.15, -21.95, 'Reykjavik'],\n            ['md', 47, 28.85, 'Chisinau'],\n            ['cz', 50.08, 14.46, 'Prague']\n        ];\n        // Get temperature for specific localization, and add it to the chart.\n        // It takes point as first argument, countries series as second\n        // and capitals series as third. Capitals series have to be the\n        // 'mappoint' series type, and it should be defined before in the\n        // series array.\n        function getTemp(point, countries, capitals) {\n\n            const url = 'https://api.met.no/weatherapi/locationforecast/2.0/?lat=' +\n            point[1] + '&lon=' + point[2];\n\n            const callBack = json => {\n\n                const temp = json.properties.timeseries[0].data.instant.details\n                    .air_temperature;\n                const colorAxis = countries.chart.colorAxis[0];\n\n                const country = {\n                    'hc-key': point[0],\n                    value: parseInt(temp, 10) || null\n                };\n                const capital = {\n                    name: point[3],\n                    lat: point[1],\n                    lon: point[2],\n                    color: colorAxis.toColor(temp),\n                    temp: parseInt(temp, 10) || 'No data'\n                };\n\n                countries.addPoint(country);\n                capitals.addPoint(capital);\n                return temp;\n            };\n\n            getJSON(url, callBack);\n        }\n\n        // Create the chart\n        Highcharts.mapChart('container', {\n            chart: {\n                map: topology,\n                animation: false,\n                margin: [0, 0, 10, 0],\n                events: {\n                    load: function () {\n                        var countries = this.series[0];\n                        var capitals = this.series[1];\n                        newData.forEach(function (elem) {\n                            getTemp(elem, countries, capitals);\n                        });\n                    }\n                }\n            },\n            exporting: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            title: {\n                text: ''\n            },\n\n            subtitle: {\n                text: ''\n            },\n\n            mapNavigation: {\n                enabled: true,\n                enableMouseWheelZoom: false,\n                buttonOptions: mapbuttons,\n                buttons: {\n                    zoomIn: {\n                        x: 5,\n                        y: 5\n                    },\n                    zoomOut: {\n                        x: 5,\n                        y: 31\n                    }\n                }\n            },\n            mapView: {\n                zoom: 4\n            },\n\n            colorAxis: {\n                min: -25,\n                max: 40,\n                labels: {\n                    format: '{value}°C'\n                },\n                stops: [\n                    [0, '#0000ff'],\n                    [0.3, '#6da5ff'],\n                    [0.6, '#ffff00'],\n                    [1, '#ff0000']\n                ]\n\n            },\n\n            legend: {\n                layout: 'vertical',\n                align: 'right',\n                verticalAlign: 'top',\n                margin: 20,\n                floating: false,\n                padding: 8,\n                y: 20,\n                navigation: {\n                    enabled: false\n                }\n            },\n\n            tooltip: {\n                headerFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {point.key}:<br/>',\n                pointFormatter: function () {\n                    var value = Number.isInteger(this.temp) ? this.temp + '°C' : 'No data';\n                    return 'Temperature: <b>' + value + '</b>';\n                }\n            },\n\n            series: [{\n                name: 'Temperatures',\n                states: {\n                    hover: {\n                        color: '#BADA55'\n                    }\n                },\n                dataLabels: {\n                    enabled: false\n                },\n                enableMouseTracking: false,\n                accessibility: {\n                    point: {\n                        valueDescriptionFormat: '{xDescription}, {point.value}°C.'\n                    }\n                }\n            }, {\n                name: 'Capitals of Europe',\n                type: 'mappoint',\n                showInLegend: false,\n                marker: {\n                    lineWidth: 1,\n                    lineColor: '#000'\n                },\n                dataLabels: {\n                    crop: true,\n                    formatter: function () {\n                        var value = Number.isInteger(this.point.temp) ? this.point.temp + '°C' : 'No data';\n                        return '<span>' + this.key + '</span><br/><span>' + value + '</span>';\n                    }\n                },\n                accessibility: {\n                    point: {\n                        valueDescriptionFormat: '{xDescription}, {point.temp}°C.'\n                    }\n                }\n            }],\n            responsive: {\n                rules: [\n                    // /up to 219\n                    {\n                        condition: {\n                            // /up tp this\n                            maxWidth: 219\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 150\n                            },\n                            mapView: {\n                                zoom: 4\n                            },\n                            legend: {\n                                enabled: false\n                            },\n                            colorAxis: {\n                                visible: false\n                            }\n                        }\n                    },\n                    {\n                        condition: {\n                            minWidth: 220\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 260\n                            },\n                            colorAxis: {\n                                visible: false\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n\n    })();\n}\n\nfunction clusters() {\n    (async () => {\n\n        const topology = await fetch(\n            'https://code.highcharts.com/mapdata/custom/europe.topo.json'\n        ).then(response => response.json());\n\n        const data = await fetch(\n            'https://cdn.jsdelivr.net/gh/highcharts/highcharts@1e9e659c2d60fbe27ef0b41e2f93112dd68fb7a3/samples/data/european-train-stations-near-airports.json'\n        ).then(response => response.json());\n\n        Highcharts.mapChart('container', {\n            chart: {\n                map: topology,\n                margin: [0, 0, 10, 0]\n            },\n            title: {\n                text: ''\n            },\n            subtitle: {\n                text: ''\n            },\n            exporting: {\n                enabled: false\n            },\n            credits: {\n                enabled: false\n            },\n            mapNavigation: {\n                enabled: true,\n                buttonOptions: mapbuttons,\n                buttons: {\n                    zoomIn: {\n                        x: 5,\n                        y: 5\n                    },\n                    zoomOut: {\n                        x: 5,\n                        y: 31\n                    }\n                },\n                enableMouseWheelZoom: false\n            },\n            mapView: {\n                center: [17, 54],\n                zoom: 3.8\n            },\n            tooltip: {\n                formatter: function () {\n                    if (this.point.clusteredData) {\n                        return 'Clustered points: ' + this.point.clusterPointsAmount;\n                    }\n                    return '<b>' + this.key + '</b><br>Lat: ' + this.point.lat.toFixed(2) + ', Lon: ' + this.point.lon.toFixed(2);\n                }\n            },\n            legend: {\n                layout: 'vertical',\n                align: 'right',\n                verticalAlign: 'top',\n                margin: 20,\n                floating: false,\n                padding: 8,\n                y: 20,\n                navigation: {\n                    enabled: false\n                }\n            },\n            colorAxis: {\n                lineColor: 'black',\n                minColor: '#D9DBF8',\n                maxColor: '#E1D369',\n                style: {\n                    fontSize: '10px'\n                }\n            },\n            plotOptions: {\n                mappoint: {\n                    cluster: {\n                        enabled: true,\n                        allowOverlap: false,\n                        animation: {\n                            duration: 450\n                        },\n                        marker: {\n                            lineColor: '#000',\n                            lineWidth: 1\n                        },\n                        dataLabels: {\n                            style: {\n                                color: '#000',\n                                textOutline: '#fff',\n                                fontWeight: 'bold'\n                            }\n                        },\n                        layoutAlgorithm: {\n                            type: 'grid',\n                            gridSize: 70\n                        },\n                        zones: [{\n                            from: 1,\n                            to: 4,\n                            marker: {\n                                radius: 13\n                            }\n                        }, {\n                            from: 5,\n                            to: 9,\n                            marker: {\n                                radius: 15\n                            }\n                        }, {\n                            from: 10,\n                            to: 15,\n                            marker: {\n                                radius: 17\n                            }\n                        }, {\n                            from: 16,\n                            to: 20,\n                            marker: {\n                                radius: 19\n                            }\n                        }, {\n                            from: 21,\n                            to: 100,\n                            marker: {\n                                radius: 21\n                            }\n                        }]\n                    }\n                }\n            },\n            series: [{\n                name: 'Basemap',\n                borderColor: '#A0A0A0',\n                nullColor: '#A3EDBA',\n                showInLegend: false\n            }, {\n                type: 'mappoint',\n                enableMouseTracking: true,\n                colorKey: 'clusterPointsAmount',\n                name: 'Cities',\n                color: '#5749AD',\n                data: data\n            }],\n            responsive: {\n                rules: [\n                    // /up to 219\n                    {\n                        condition: {\n                            // /up tp this\n                            maxWidth: 219\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 150\n                            },\n                            mapView: {\n                                zoom: 2\n                            },\n                            colorAxis: {\n                                visible: false\n                            }\n                        }\n                    },\n                    {\n                        condition: {\n                            minWidth: 220\n                        },\n                        chartOptions: {\n                            chart: {\n                                height: 260\n                            },\n                            colorAxis: {\n                                visible: false\n                            },\n                            mapView: {\n                                zoom: 3.8\n                            }\n                        }\n                    }\n                ]\n            }\n        });\n\n    })();\n}\n\nfunction projection() {\n    const data = [\n        {\n            name: 'United States of America',\n            value: 1477\n        },\n        {\n            name: 'Brazil',\n            value: 490\n        },\n        {\n            name: 'Mexico',\n            value: 882\n        },\n        {\n            name: 'Canada',\n            value: 161\n        },\n        {\n            name: 'Russia',\n            value: 74\n        },\n        {\n            name: 'Argentina',\n            value: 416\n        },\n        {\n            name: 'Bolivia',\n            value: 789\n        },\n        {\n            name: 'Colombia',\n            value: 805\n        },\n        {\n            name: 'Paraguay',\n            value: 2011\n        },\n        {\n            name: 'Indonesia',\n            value: 372\n        },\n        {\n            name: 'South Africa',\n            value: 466\n        },\n        {\n            name: 'Papua New Guinea',\n            value: 1239\n        },\n        {\n            name: 'Germany',\n            value: 1546\n        },\n        {\n            name: 'China',\n            value: 54\n        },\n        {\n            name: 'Chile',\n            value: 647\n        },\n        {\n            name: 'Australia',\n            value: 62\n        },\n        {\n            name: 'France',\n            value: 844\n        },\n        {\n            name: 'United Kingdom',\n            value: 1901\n        },\n        {\n            name: 'Venezuela',\n            value: 503\n        },\n        {\n            name: 'Ecuador',\n            value: 1560\n        },\n        {\n            name: 'India',\n            value: 116\n        },\n        {\n            name: 'Iran',\n            value: 208\n        },\n        {\n            name: 'Guatemala',\n            value: 2716\n        },\n        {\n            name: 'Philippines',\n            value: 828\n        },\n        {\n            name: 'Sweden',\n            value: 563\n        },\n        {\n            name: 'Saudi Arabia',\n            value: 100\n        },\n        {\n            name: 'Democratic Republic of the Congo',\n            value: 87\n        },\n        {\n            name: 'Kenya',\n            value: 346\n        },\n        {\n            name: 'Zimbabwe',\n            value: 507\n        },\n        {\n            name: 'Peru',\n            value: 149\n        },\n        {\n            name: 'Ukraine',\n            value: 323\n        },\n        {\n            name: 'Angola',\n            value: 141\n        },\n        {\n            name: 'Japan',\n            value: 480\n        },\n        {\n            name: 'United Republic of Tanzania',\n            value: 187\n        },\n        {\n            name: 'Costa Rica',\n            value: 3153\n        },\n        {\n            name: 'Algeria',\n            value: 66\n        },\n        {\n            name: 'Pakistan',\n            value: 196\n        },\n        {\n            name: 'Spain',\n            value: 301\n        },\n        {\n            name: 'Finland',\n            value: 487\n        },\n        {\n            name: 'Nicaragua',\n            value: 1225\n        },\n        {\n            name: 'Libya',\n            value: 83\n        },\n        {\n            name: 'Cuba',\n            value: 1211\n        },\n        {\n            name: 'Uruguay',\n            value: 760\n        },\n        {\n            name: 'Oman',\n            value: 426\n        },\n        {\n            name: 'Italy',\n            value: 439\n        },\n        {\n            name: 'Czech Republic',\n            value: 1657\n        },\n        {\n            name: 'Poland',\n            value: 414\n        },\n        {\n            name: 'New Zealand',\n            value: 465\n        },\n        {\n            name: 'Guyana',\n            value: 594\n        },\n        {\n            name: 'Panama',\n            value: 1574\n        },\n        {\n            name: 'Malaysia',\n            value: 347\n        },\n        {\n            name: 'Namibia',\n            value: 136\n        },\n        {\n            name: 'South Korea',\n            value: 1145\n        },\n        {\n            name: 'Honduras',\n            value: 921\n        },\n        {\n            name: 'Iraq',\n            value: 233\n        },\n        {\n            name: 'Thailand',\n            value: 198\n        },\n        {\n            name: 'Mozambique',\n            value: 125\n        },\n        {\n            name: 'Turkey',\n            value: 127\n        },\n        {\n            name: 'Iceland',\n            value: 958\n        },\n        {\n            name: 'Kazakhstan',\n            value: 36\n        },\n        {\n            name: 'Norway',\n            value: 312\n        },\n        {\n            name: 'Syria',\n            value: 484\n        },\n        {\n            name: 'Zambia',\n            value: 118\n        },\n        {\n            name: 'South Sudan',\n            value: 132\n        },\n        {\n            name: 'Egypt',\n            value: 83\n        },\n        {\n            name: 'Madagascar',\n            value: 143\n        },\n        {\n            name: 'North Korea',\n            value: 681\n        },\n        {\n            name: 'Denmark',\n            value: 1885\n        },\n        {\n            name: 'Greece',\n            value: 589\n        },\n        {\n            name: 'Botswana',\n            value: 131\n        },\n        {\n            name: 'Sudan',\n            value: 43\n        },\n        {\n            name: 'Croatia',\n            value: 1233\n        },\n        {\n            name: 'Bulgaria',\n            value: 627\n        },\n        {\n            name: 'El Salvador',\n            value: 3282\n        },\n        {\n            name: 'Belarus',\n            value: 320\n        },\n        {\n            name: 'Myanmar',\n            value: 98\n        },\n        {\n            name: 'Portugal',\n            value: 700\n        },\n        {\n            name: 'Switzerland',\n            value: 1575\n        },\n        {\n            name: 'The Bahamas',\n            value: 6094\n        },\n        {\n            name: 'Lithuania',\n            value: 973\n        },\n        {\n            name: 'Somalia',\n            value: 97\n        },\n        {\n            name: 'Chad',\n            value: 47\n        },\n        {\n            name: 'Ethiopia',\n            value: 52\n        },\n        {\n            name: 'Yemen',\n            value: 108\n        },\n        {\n            name: 'Morocco',\n            value: 123\n        },\n        {\n            name: 'Suriname',\n            value: 353\n        },\n        {\n            name: 'French Polynesia',\n            value: 14110\n        },\n        {\n            name: 'Nigeria',\n            value: 59\n        },\n        {\n            name: 'Uzbekistan',\n            value: 125\n        },\n        {\n            name: 'Afghanistan',\n            value: 80\n        },\n        {\n            name: 'Austria',\n            value: 631\n        },\n        {\n            name: 'Belize',\n            value: 2061\n        },\n        {\n            name: 'Israel',\n            value: 2186\n        },\n        {\n            name: 'Nepal',\n            value: 328\n        },\n        {\n            name: 'Uganda',\n            value: 238\n        },\n        {\n            name: 'Romania',\n            value: 196\n        },\n        {\n            name: 'Vietnam',\n            value: 145\n        },\n        {\n            name: 'Gabon',\n            value: 171\n        },\n        {\n            name: 'Mongolia',\n            value: 28\n        },\n        {\n            name: 'United Arab Emirates',\n            value: 514\n        },\n        {\n            name: 'Latvia',\n            value: 675\n        },\n        {\n            name: 'Belgium',\n            value: 1354\n        },\n        {\n            name: 'Hungary',\n            value: 458\n        },\n        {\n            name: 'Laos',\n            value: 178\n        },\n        {\n            name: 'Ireland',\n            value: 581\n        },\n        {\n            name: 'Central African Republic',\n            value: 63\n        },\n        {\n            name: 'Azerbaijan',\n            value: 448\n        },\n        {\n            name: 'Taiwan',\n            value: 1147\n        },\n        {\n            name: 'Dominican Republic',\n            value: 745\n        },\n        {\n            name: 'Solomon Islands',\n            value: 1286\n        },\n        {\n            name: 'Slovakia',\n            value: 728\n        },\n        {\n            name: 'Cameroon',\n            value: 70\n        },\n        {\n            name: 'Malawi',\n            value: 340\n        },\n        {\n            name: 'Vanuatu',\n            value: 2543\n        },\n        {\n            name: 'Mauritania',\n            value: 29\n        },\n        {\n            name: 'Niger',\n            value: 24\n        },\n        {\n            name: 'Liberia',\n            value: 301\n        },\n        {\n            name: 'Netherlands',\n            value: 856\n        },\n        {\n            name: 'Puerto Rico',\n            value: 3237\n        },\n        {\n            name: 'Tunisia',\n            value: 187\n        },\n        {\n            name: 'Fiji',\n            value: 1532\n        },\n        {\n            name: 'Jamaica',\n            value: 2585\n        },\n        {\n            name: 'Kyrgyzstan',\n            value: 146\n        },\n        {\n            name: 'Republic of the Congo',\n            value: 79\n        },\n        {\n            name: 'Ivory Coast',\n            value: 85\n        },\n        {\n            name: 'Republic of Serbia',\n            value: 336\n        },\n        {\n            name: 'Turkmenistan',\n            value: 55\n        },\n        {\n            name: 'Mali',\n            value: 20\n        },\n        {\n            name: 'New Caledonia',\n            value: 1368\n        },\n        {\n            name: 'Bosnia and Herzegovina',\n            value: 469\n        },\n        {\n            name: 'Lesotho',\n            value: 791\n        },\n        {\n            name: 'Tajikistan',\n            value: 170\n        },\n        {\n            name: 'Antarctica',\n            value: 2\n        },\n        {\n            name: 'Burkina Faso',\n            value: 84\n        },\n        {\n            name: 'Georgia',\n            value: 316\n        },\n        {\n            name: 'Senegal',\n            value: 104\n        },\n        {\n            name: 'Kiribati',\n            value: 23428\n        },\n        {\n            name: 'Sri Lanka',\n            value: 294\n        },\n        {\n            name: 'Bangladesh',\n            value: 138\n        },\n        {\n            name: 'Estonia',\n            value: 425\n        },\n        {\n            name: 'Jordan',\n            value: 203\n        },\n        {\n            name: 'Cambodia',\n            value: 91\n        },\n        {\n            name: 'Guinea',\n            value: 65\n        },\n        {\n            name: 'Slovenia',\n            value: 794\n        },\n        {\n            name: 'Northern Cyprus',\n            value: 1623\n        },\n        {\n            name: 'Greenland',\n            value: 7\n        },\n        {\n            name: 'Marshall Islands',\n            value: 82873\n        },\n        {\n            name: 'Swaziland',\n            value: 814\n        },\n        {\n            name: 'Haiti',\n            value: 508\n        },\n        {\n            name: 'Seychelles',\n            value: 30769\n        },\n        {\n            name: 'Djibouti',\n            value: 561\n        },\n        {\n            name: 'Eritrea',\n            value: 129\n        },\n        {\n            name: 'Armenia',\n            value: 390\n        },\n        {\n            name: 'Cook Islands',\n            value: 46610\n        },\n        {\n            name: 'Ghana',\n            value: 44\n        },\n        {\n            name: 'Macedonia',\n            value: 393\n        },\n        {\n            name: 'Cape Verde',\n            value: 2232\n        },\n        {\n            name: 'Maldives',\n            value: 30201\n        },\n        {\n            name: 'Singapore',\n            value: 12690\n        },\n        {\n            name: 'Guinea Bissau',\n            value: 284\n        },\n        {\n            name: 'Lebanon',\n            value: 782\n        },\n        {\n            name: 'Sierra Leone',\n            value: 112\n        },\n        {\n            name: 'Togo',\n            value: 147\n        },\n        {\n            name: 'Turks and Caicos Islands',\n            value: 8439\n        },\n        {\n            name: 'Burundi',\n            value: 273\n        },\n        {\n            name: 'Equatorial Guinea',\n            value: 250\n        },\n        {\n            name: 'Falkland Islands',\n            value: 575\n        },\n        {\n            name: 'Kuwait',\n            value: 393\n        },\n        {\n            name: 'Moldova',\n            value: 213\n        },\n        {\n            name: 'Rwanda',\n            value: 284\n        },\n        {\n            name: 'Benin',\n            value: 54\n        },\n        {\n            name: 'East Timor',\n            value: 403\n        },\n        {\n            name: 'Kosovo',\n            value: 551\n        },\n        {\n            name: 'Micronesia',\n            value: 8547\n        },\n        {\n            name: 'Qatar',\n            value: 518\n        },\n        {\n            name: 'Saint Vincent and the Grenadines',\n            value: 15424\n        },\n        {\n            name: 'Tonga',\n            value: 8368\n        },\n        {\n            name: 'Western Sahara',\n            value: 23\n        },\n        {\n            name: 'Guam',\n            value: 9191\n        },\n        {\n            name: 'Mauritius',\n            value: 2463\n        },\n        {\n            name: 'Montenegro',\n            value: 372\n        },\n        {\n            name: 'Northern Mariana Islands',\n            value: 10776\n        },\n        {\n            name: 'Albania',\n            value: 146\n        },\n        {\n            name: 'Bahrain',\n            value: 5263\n        },\n        {\n            name: 'British Virgin Islands',\n            value: 26490\n        },\n        {\n            name: 'Comoros',\n            value: 1790\n        },\n        {\n            name: 'French Southern and Antarctic Lands',\n            value: 522\n        },\n        {\n            name: 'Samoa',\n            value: 1418\n        },\n        {\n            name: 'Spratly Islands',\n            value: 800000\n        },\n        {\n            name: 'Svalbard',\n            value: 64\n        },\n        {\n            name: 'Trinidad and Tobago',\n            value: 780\n        },\n        {\n            name: 'American Samoa',\n            value: 13393\n        },\n        {\n            name: 'Antigua and Barbuda',\n            value: 6778\n        },\n        {\n            name: 'Cayman Islands',\n            value: 11364\n        },\n        {\n            name: 'Grenada',\n            value: 8721\n        },\n        {\n            name: 'Palau',\n            value: 6536\n        },\n        {\n            name: 'Palestinian Territories',\n            value: 500\n        },\n        {\n            name: 'Anguilla',\n            value: 21978\n        },\n        {\n            name: 'Bhutan',\n            value: 52\n        },\n        {\n            name: 'Dominica',\n            value: 2663\n        },\n        {\n            name: 'Guernsey',\n            value: 25608\n        },\n        {\n            name: 'Hong Kong',\n            value: 1864\n        },\n        {\n            name: 'Luxembourg',\n            value: 773\n        },\n        {\n            name: 'Saint Kitts and Nevis',\n            value: 7663\n        },\n        {\n            name: 'Saint Lucia',\n            value: 3300\n        },\n        {\n            name: 'Saint Pierre and Miquelon',\n            value: 8264\n        },\n        {\n            name: 'São Tomé and Príncipe',\n            value: 2075\n        },\n        {\n            name: 'Virgin Islands of the U.S.',\n            value: 5780\n        },\n        {\n            name: 'Wallis and Futuna',\n            value: 14085\n        },\n        {\n            name: 'Aruba',\n            value: 5556\n        },\n        {\n            name: 'Barbados',\n            value: 2326\n        },\n        {\n            name: 'Bermuda',\n            value: 18657\n        },\n        {\n            name: 'British Indian Ocean Territory',\n            value: 16667\n        },\n        {\n            name: 'Brunei',\n            value: 190\n        },\n        {\n            name: 'Faroe Islands',\n            value: 718\n        },\n        {\n            name: 'Gambia',\n            value: 99\n        },\n        {\n            name: 'Gibraltar',\n            value: 153846\n        },\n        {\n            name: 'Jan Mayen',\n            value: 2653\n        },\n        {\n            name: 'Jersey',\n            value: 8621\n        },\n        {\n            name: 'Macau',\n            value: 35461\n        },\n        {\n            name: 'Malta',\n            value: 3165\n        },\n        {\n            name: 'Isle of Man',\n            value: 1748\n        },\n        {\n            name: 'Montserrat',\n            value: 9804\n        },\n        {\n            name: 'Nauru',\n            value: 47170\n        },\n        {\n            name: 'Niue',\n            value: 3846\n        },\n        {\n            name: 'Paracel Islands',\n            value: 129032\n        },\n        {\n            name: 'Saint Barthelemy',\n            value: 40000\n        },\n        {\n            name: 'Saint Helena, Ascension and Tristan da Cunha',\n            value: 2538\n        },\n        {\n            name: 'Saint Martin',\n            value: 18382\n        },\n        {\n            name: 'Sint Maarten',\n            value: 29412\n        },\n        {\n            name: 'Tuvalu',\n            value: 39063\n        },\n        {\n            name: 'Wake Island',\n            value: 153846\n        }\n    ];\n\n    const getGraticule = () => {\n        const data = [];\n\n        // Meridians\n        for (let x = -180; x <= 180; x += 15) {\n            data.push({\n                geometry: {\n                    type: 'LineString',\n                    coordinates: x % 90 === 0 ? [\n                        [x, -90],\n                        [x, 0],\n                        [x, 90]\n                    ] : [\n                        [x, -80],\n                        [x, 80]\n                    ]\n                }\n            });\n        }\n\n        // Latitudes\n        for (let y = -90; y <= 90; y += 10) {\n            const coordinates = [];\n            for (let x = -180; x <= 180; x += 5) {\n                coordinates.push([x, y]);\n            }\n            data.push({\n                geometry: {\n                    type: 'LineString',\n                    coordinates\n                },\n                lineWidth: y === 0 ? 2 : undefined\n            });\n        }\n\n        return data;\n    };\n\n    // Add flight route after initial animation\n    const afterAnimate = e => {\n        const chart = e.target.chart;\n\n        if (!chart.get('flight-route')) {\n            chart.addSeries({\n                type: 'mapline',\n                name: 'Flight route, Amsterdam - Los Angeles',\n                animation: false,\n                id: 'flight-route',\n                data: [{\n                    geometry: {\n                        type: 'LineString',\n                        coordinates: [\n                            [4.90, 53.38], // Amsterdam\n                            [-118.24, 34.05] // Los Angeles\n                        ]\n                    },\n                    color: '#313f77'\n                }],\n                lineWidth: 2,\n                accessibility: {\n                    exposeAsGroupOnly: true\n                }\n            }, false);\n            chart.addSeries({\n                type: 'mappoint',\n                animation: false,\n                data: [{\n                    name: 'Amsterdam',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [4.90, 53.38]\n                    }\n                }, {\n                    name: 'LA',\n                    geometry: {\n                        type: 'Point',\n                        coordinates: [-118.24, 34.05]\n                    }\n                }],\n                color: '#313f77',\n                accessibility: {\n                    enabled: false\n                }\n            }, false);\n            chart.redraw(false);\n        }\n    };\n\n\n    Highcharts.getJSON(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json',\n        topology => {\n\n            const chart = Highcharts.mapChart('container', {\n                chart: {\n                    map: topology,\n                    margin: [0, 0, 10, 0]\n                },\n\n                title: {\n                    text: '',\n                    floating: true,\n                    align: 'left',\n                    style: {\n                        textOutline: '2px white'\n                    }\n                },\n\n                subtitle: {\n                    text: '',\n                    floating: true,\n                    y: 34,\n                    align: 'left'\n                },\n\n                legend: {\n                    enabled: false\n                },\n                exporting: {\n                    enabled: false\n                },\n                credits: {\n                    enabled: false\n                },\n                mapNavigation: {\n                    enabled: true,\n                    enableDoubleClickZoomTo: true,\n                    enableMouseWheelZoom: false,\n                    buttonOptions: mapbuttons,\n                    buttons: {\n                        zoomIn: {\n                            x: 5,\n                            y: 5\n                        },\n                        zoomOut: {\n                            x: 5,\n                            y: 31\n                        }\n                    }\n                },\n\n                mapView: {\n                    maxZoom: 30,\n                    projection: {\n                        name: 'Orthographic',\n                        rotation: [60, -30]\n                    }\n                },\n\n                colorAxis: {\n                    tickPixelInterval: 100,\n                    minColor: '#BFCFAD',\n                    maxColor: '#31784B',\n                    max: 1000\n                },\n\n                tooltip: {\n                    pointFormat: '{point.name}: {point.value}'\n                },\n\n                plotOptions: {\n                    series: {\n                        animation: {\n                            duration: 750\n                        },\n                        clip: false\n                    }\n                },\n\n                series: [{\n                    name: 'Graticule',\n                    id: 'graticule',\n                    type: 'mapline',\n                    data: getGraticule(),\n                    nullColor: 'rgba(0, 0, 0, 0.05)',\n                    accessibility: {\n                        enabled: false\n                    }\n                }, {\n                    data,\n                    joinBy: 'name',\n                    name: 'Airports per million km²',\n                    dataLabels: {\n                        enabled: false,\n                        format: '{point.name}'\n                    },\n                    events: {\n                        afterAnimate\n                    },\n                    accessibility: {\n                        exposeAsGroupOnly: true\n                    }\n                }],\n                responsive: {\n                    rules: [\n                        // /up to 219\n                        {\n                            condition: {\n                                // /up tp this\n                                maxWidth: 219\n                            },\n                            chartOptions: {\n                                chart: {\n                                    height: 150\n                                },\n                                mapView: {\n                                    zoom: 0.5\n                                }\n                            }\n                        },\n                        {\n                            condition: {\n                                minWidth: 220\n                            },\n                            chartOptions: {\n                                chart: {\n                                    height: 260\n                                },\n                                colorAxis: {\n                                    visible: false\n                                },\n                                mapView: {\n                                    zoom: 1.6\n                                }\n                            }\n                        }\n                    ]\n                }\n            });\n\n            // Render a circle filled with a radial gradient behind the globe to\n            // make it appear as the sea around the continents\n            const renderSea = () => {\n                let verb = 'animate';\n                if (!chart.sea) {\n                    chart.sea = chart.renderer\n                        .circle()\n                        .attr({\n                            fill: {\n                                radialGradient: {\n                                    cx: 0.4,\n                                    cy: 0.4,\n                                    r: 1\n                                },\n                                stops: [\n                                    [0, 'white'],\n                                    [1, 'lightblue']\n                                ]\n                            },\n                            zIndex: -1\n                        })\n                        .add(chart.get('graticule').group);\n                    verb = 'attr';\n                }\n\n                const bounds = chart.get('graticule').bounds,\n                    p1 = chart.mapView.projectedUnitsToPixels({\n                        x: bounds.x1,\n                        y: bounds.y1\n                    }),\n                    p2 = chart.mapView.projectedUnitsToPixels({\n                        x: bounds.x2,\n                        y: bounds.y2\n                    });\n                chart.sea[verb]({\n                    cx: (p1.x + p2.x) / 2,\n                    cy: (p1.y + p2.y) / 2,\n                    r: Math.min(p2.x - p1.x, p1.y - p2.y) / 2\n                });\n            };\n            renderSea();\n            Highcharts.addEvent(chart, 'redraw', renderSea);\n\n        }\n    );\n}\n\nconst charts = {\n    spider: spider,\n    temps: temps,\n    clusters: clusters,\n    projection: projection\n};\n\ncharts[chartToShow]();","css":"body {\n    background-color: #f0f0f0;\n    padding: 0;\n    color: #000;\n}\n\n.chart-container {\n    border: 0 solid #000;\n    width: 100%;\n}\n\na,\na:hover {\n    color: #000;\n}\n\na:hover {\n    text-decoration: underline;\n}\n\n#demo-content { margin: 0; }\n","html":"\n\n\n<div class=\"chart-container\" id=\"container\"></div>\n\n\n\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts       from 'highcharts/highmaps';\nimport Data             from 'highcharts/modules/data';\nimport MarkerClusters   from 'highcharts/modules/marker-clusters';\nimport Exporting        from 'highcharts/modules/exporting';\nimport OfflineExporting from 'highcharts/modules/offline-exporting';\nimport Accessibility    from 'highcharts/modules/accessibility';\nimport BrandLight       from 'highcharts/themes/brand-light';\n\n// 初始化模块\nData(Highcharts);\nMarkerClusters(Highcharts);\nExporting(Highcharts);\nOfflineExporting(Highcharts);\nAccessibility(Highcharts);\nBrandLight(Highcharts);\n","scripts":["https://code.highcharts.com/maps/11.0.0/highmaps.js","https://code.highcharts.com/maps/11.0.0/modules/data.js","https://code.highcharts.com/11.0.0/modules/marker-clusters.js","https://code.highcharts.com/maps/11.0.0/modules/exporting.js","https://code.highcharts.com/maps/11.0.0/modules/offline-exporting.js","https://code.highcharts.com/maps/11.0.0/modules/accessibility.js","https://code.highcharts.com/11.0.0/themes/brand-light.js"]}