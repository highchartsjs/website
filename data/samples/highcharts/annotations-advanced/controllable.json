{"js":"var positioner = function (target) {\n    var xy = Highcharts.Annotation.MockPoint.pointToPixels(\n        target.points[this.index]\n    );\n\n    return {\n        x: xy.x - this.graphic.width / 2,\n        y: xy.y - this.graphic.height / 2\n    };\n};\n\nvar chart = Highcharts.chart('container', {\n\n    title: {\n        text: 'Controlling elements by dragging'\n    },\n\n    chart: {\n        // inverted: true,\n        zoomType: 'x',\n        events: {\n            load: function () {\n                this.annotations.forEach(function (annotation) {\n                    // showControlPoints/hide\n                    annotation.setControlPointsVisibility(true);\n                });\n            }\n        }\n    },\n\n    annotations: [{\n        shapes: [{\n            type: 'path',\n            strokeWidth: 4,\n            points: [{\n                x: 1,\n                y: 5,\n                xAxis: 0,\n                yAxis: 0\n            }, {\n                x: 4,\n                y: 5,\n                xAxis: 0,\n                yAxis: 0\n            }, {\n                x: 4,\n                y: 8,\n                xAxis: 0,\n                yAxis: 0\n            }, {\n                x: 1,\n                y: 8,\n                xAxis: 0,\n                yAxis: 0\n            }],\n\n            controlPoints: [{\n                positioner: positioner,\n                events: {\n                    mousedown: function (e, target) {\n                        var xy = Highcharts.Annotation.MockPoint.pointToPixels(\n                            target.points[2]\n                        );\n\n                        this.transformOrigin = xy;\n                    },\n\n                    // ROTATE\n                    drag: function (e, target) {\n                        var center = this.transformOrigin,\n                            radians = this.mouseMoveToRadians(\n                                e,\n                                center.x,\n                                center.y\n                            );\n\n                        target.rotate(\n                            center.x - chart.plotLeft,\n                            center.y - chart.plotTop,\n                            radians\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: positioner,\n\n                events: {\n                    // SCALE\n                    drag: function (e, target) {\n                        var chart = this.chart,\n                            bbox = target.graphic.getBBox(true),\n                            center = {\n                                x: bbox.x + bbox.width / 2,\n                                y: bbox.y + bbox.height / 2\n                            },\n                            scale = this.mouseMoveToScale(\n                                e,\n                                center.x,\n                                center.y\n                            );\n\n                        target.scale(\n                            center.x - chart.plotLeft,\n                            center.y - chart.plotTop,\n                            scale.x,\n                            scale.y\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }]\n        }, {\n            type: 'path',\n            points: [{\n                x: 8,\n                y: 2,\n                xAxis: 0,\n                yAxis: 0\n            }, {\n                x: 12,\n                y: 2,\n                xAxis: 0,\n                yAxis: 0\n            }],\n            controlPoints: [{\n                positioner: positioner,\n\n                // TRANSLATE Y\n                events: {\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e);\n\n                        target.translate(0, translation.y);\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: positioner,\n                events: {\n\n                    // TRANSLATE X\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e);\n\n                        target.translate(translation.x, 0);\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: function (target) {\n                    var toPixels = Highcharts.Annotation.MockPoint\n                            .pointToPixels,\n                        xy1 = toPixels(target.points[0]),\n                        xy2 = toPixels(target.points[1]);\n\n                    return {\n                        x: xy1.x + (xy2.x - xy1.x - this.graphic.width) / 2,\n                        y: xy2.y + (xy1.y - xy2.y - this.graphic.height) / 2\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e);\n\n                        target.translate(translation.x, translation.y);\n                        target.redraw(false);\n                    }\n                }\n            }]\n        }, {\n            type: 'circle',\n            point: { x: 250, y: 250 },\n            r: 10,\n            controlPoints: [{\n                positioner: function (target) {\n                    var xy = Highcharts.Annotation.MockPoint.pointToPixels(\n                        target.points[0]\n                    );\n\n                    return {\n                        x: xy.x - this.graphic.width / 2,\n                        y: xy.y - this.graphic.height / 2 - target.options.r\n                    };\n                },\n                events: {\n                    // TRANSFORM RADIUS ACCORDING TO Y TRANSLATION\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e),\n                            radiusTranslation = target.chart.inverted ?\n                                translation.x :\n                                translation.y;\n\n                        target.setRadius(\n                            Math.max(target.options.r - radiusTranslation, 5)\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }]\n        }, {\n            type: 'ellipse',\n            xAxis: 0,\n            yAxis: 0,\n            points: [{\n                x: 8,\n                y: 4\n            }, {\n                x: 12,\n                y: 6\n            }],\n            ry: 1,\n            controlPoints: [{\n                positioner: function (target) {\n                    return {\n                        x: target.chart.plotLeft + target.points[0].plotX -\n                            this.graphic.width / 2,\n                        y: target.chart.plotTop + target.points[0].plotY -\n                            this.graphic.height / 2\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        target.translatePoint(\n                            e.chartX - (\n                                target.points[0].plotX + target.chart.plotLeft\n                            ),\n                            e.chartY - (\n                                target.points[0].plotY + target.chart.plotTop\n                            ),\n                            0\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: function (target) {\n                    return {\n                        x: target.chart.plotLeft + target.points[1].plotX -\n                            this.graphic.width / 2,\n                        y: target.chart.plotTop + target.points[1].plotY -\n                            this.graphic.height / 2\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        target.translatePoint(\n                            e.chartX - (\n                                target.points[1].plotX + target.chart.plotLeft\n                            ),\n                            e.chartY - (\n                                target.points[1].plotY + target.chart.plotTop\n                            ),\n                            1\n                        );\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: function (target) {\n                    const position = target.getAbsolutePosition(\n                            target.points[0]\n                        ),\n                        position2 = target.getAbsolutePosition(\n                            target.points[1]\n                        ),\n                        attrs = target.getAttrs(position, position2);\n\n                    return {\n                        x: attrs.cx - this.graphic.width / 2 +\n                            attrs.ry * Math.sin((attrs.angle * Math.PI) / 180),\n                        y: attrs.cy - this.graphic.height / 2 -\n                            attrs.ry * Math.cos((attrs.angle * Math.PI) / 180)\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        const position = target.getAbsolutePosition(\n                                target.points[0]\n                            ),\n                            position2 = target.getAbsolutePosition(\n                                target.points[1]\n                            ),\n                            newR = target.getDistanceFromLine(\n                                position,\n                                position2,\n                                e.chartX,\n                                e.chartY\n                            ),\n                            yAxis = target.getYAxis(),\n                            newRY = Math.abs(\n                                yAxis.toValue(0) - yAxis.toValue(newR)\n                            );\n\n                        target.setYRadius(newRY);\n                        target.redraw(false);\n                    }\n                }\n            }]\n        }\n\n        ],\n\n        labels: [{\n            point: 'c',\n            format: '{y:.2f}',\n            controlPoints: [{\n                symbol: 'triangle-down',\n                positioner: function (target) {\n                    if (!target.graphic.placed) {\n                        return {\n                            x: 0,\n                            y: -9e7\n                        };\n                    }\n\n                    var xy = Highcharts.Annotation.MockPoint.pointToPixels(\n                        target.points[0]\n                    );\n\n                    return {\n                        x: xy.x - this.graphic.width / 2,\n                        y: xy.y - this.graphic.height / 2\n                    };\n                },\n\n                // TRANSLATE POINT/ANCHOR\n                events: {\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e);\n\n                        target.translatePoint(translation.x, translation.y);\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                symbol: 'square',\n                positioner: function (target) {\n                    if (!target.graphic.placed) {\n                        return {\n                            x: 0,\n                            y: -9e7\n                        };\n                    }\n\n                    return {\n                        x: target.graphic.alignAttr.x - this.graphic.width / 2,\n                        y: target.graphic.alignAttr.y - this.graphic.height / 2\n                    };\n                },\n\n                // TRANSLATE POSITION WITHOUT CHANGING THE ANCHOR\n                events: {\n                    drag: function (e, target) {\n                        var translation = this.mouseMoveToTranslation(e);\n\n                        target.translate(translation.x, translation.y);\n                        target.redraw(false);\n                    }\n                }\n            }],\n            overflow: 'none',\n            crop: true\n        }]\n    }],\n\n    series: [{\n        data: [\n            1, 2, 3, { y: 4, id: 'a' }, 5, { y: 6, id: 'b' },\n            2, 3, 4, 5, 6, 7, 8, 3, 2, 4, { y: 8, id: 'c' }, 4, 4, 3\n        ]\n    }]\n});\n","css":"#container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n","html":"\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts          from 'highcharts';\nimport AnnotationsAdvanced from 'highcharts/modules/annotations-advanced';\n\n// 初始化模块\nAnnotationsAdvanced(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js","https://code.highcharts.com/11.0.1/modules/annotations-advanced.js"]}