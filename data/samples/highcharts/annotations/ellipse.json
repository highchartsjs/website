{"js":"Highcharts.chart('container', {\n    chart: {\n        zoomType: 'x',\n        events: {\n            load: function () {\n                this.annotations.forEach(function (annotation) {\n                    // Show control points.\n                    annotation.setControlPointsVisibility(true);\n                });\n            }\n        }\n    },\n\n    annotations: [{\n        shapes: [{\n            type: 'ellipse',\n            xAxis: 0,\n            yAxis: 0,\n            points: [{\n                x: 30,\n                y: -20\n            }, {\n                x: 60,\n                y: 20\n            }],\n            ry: 10,\n            stroke: '#00f',\n            strokeWidth: 4,\n            controlPoints: [{\n                positioner: function (target) {\n                    const position = target.getAbsolutePosition(\n                        target.points[0]\n                    );\n\n                    return {\n                        x: position.x - this.graphic.width / 2,\n                        y: position.y - this.graphic.height / 2\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        const position = target.getAbsolutePosition(\n                            target.points[0]\n                        );\n\n                        target.translatePoint(\n                            e.chartX - position.x,\n                            e.chartY - position.y,\n                            0\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: function (target) {\n                    const position = target.getAbsolutePosition(\n                        target.points[1]\n                    );\n\n                    return {\n                        x: position.x - this.graphic.width / 2,\n                        y: position.y - this.graphic.height / 2\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        const position = target.getAbsolutePosition(\n                            target.points[1]\n                        );\n\n                        target.translatePoint(\n                            e.chartX - position.x,\n                            e.chartY - position.y,\n                            1\n                        );\n\n                        target.redraw(false);\n                    }\n                }\n            }, {\n                positioner: function (target) {\n                    const position = target.getAbsolutePosition(\n                            target.points[0]\n                        ),\n                        position2 = target.getAbsolutePosition(\n                            target.points[1]\n                        ),\n                        attrs = target.getAttrs(position, position2);\n\n                    return {\n                        x: attrs.cx - this.graphic.width / 2 +\n                            attrs.ry * Math.sin((attrs.angle * Math.PI) / 180),\n                        y: attrs.cy - this.graphic.height / 2 -\n                            attrs.ry * Math.cos((attrs.angle * Math.PI) / 180)\n                    };\n                },\n                events: {\n                    drag: function (e, target) {\n                        const position = target.getAbsolutePosition(\n                                target.points[0]\n                            ),\n                            position2 = target.getAbsolutePosition(\n                                target.points[1]\n                            ),\n                            newR = target.getDistanceFromLine(\n                                position,\n                                position2,\n                                e.chartX,\n                                e.chartY\n                            ),\n                            yAxis = target.getYAxis(),\n                            newRY = Math.abs(\n                                yAxis.toValue(0) - yAxis.toValue(newR)\n                            );\n\n                        target.setYRadius(newRY);\n                        target.redraw(false);\n                    }\n                }\n            }]\n        }]\n    }],\n    series: [{\n        data: Array.from(\n            {\n                length: 100\n            },\n            (_, x) => Math.floor(Math.cos(x / 10) * 20)\n        )\n    }]\n});\n","css":"#container {\n    height: 400px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n","html":"\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts  from 'highcharts';\nimport Annotations from 'highcharts/modules/annotations';\n\n// 初始化模块\nAnnotations(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.0/highcharts.js","https://code.highcharts.com/11.0.0/modules/annotations.js"]}