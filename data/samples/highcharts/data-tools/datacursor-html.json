{"js":"const container1 = document.querySelector('#container1');\nconst container2 = document.querySelector('#container2');\nconst sort = new Highcharts.DataModifier.types.Sort({\n    direction: 'asc',\n    orderByColumn: 'City'\n});\nconst table = new Highcharts.DataTable({\n    columns: {\n        Rank: [1, 2, 3, 4, 5, 6],\n        City: ['Sydney', 'Melbourne', 'Brisbane', 'Perth', 'Adelaide', 'Canberra'],\n        State: ['NSW', 'VIC', 'QLD', 'WA', 'SA', 'ACT'],\n        Population: [5259764, 4976157, 2568927, 2192229, 1402393, 453558]\n    }\n});\nconst tableModified = sort.modifyTable(table.clone());\n\n\n// Render HTML Tables\n\nfunction renderTable(container, table) {\n    const columnNames = table.getColumnNames();\n    const html = [];\n\n    html.push('<table>');\n    // Render column header\n    html.push('<thead>');\n    html.push('<tr>');\n    for (const columnName of columnNames) {\n        html.push(`<th>${columnName}</th>`);\n    }\n    html.push('</tr>');\n    html.push('</thead>');\n    // Render row body\n    html.push('<tbody>');\n    for (let j = 0, jEnd = table.getRowCount(), row; j < jEnd; ++j) {\n        row = table.getRow(j);\n        // We use the values of the \"Rank\" column to identify each row\n        html.push(`<tr data-rank=\"${row[0]}\">`);\n        for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n            html.push(\n                // We use the column name to identify a cell\n                `<td data-column=\"${columnNames[i]}\">`,\n                `${row[i]}`,\n                '</td>'\n            );\n        }\n        html.push('</tr>');\n    }\n    html.push('</tbody>');\n\n    html.push('</table>');\n\n    container.innerHTML = html.join('\\n');\n}\n\nrenderTable(container1, table);\nrenderTable(container2, tableModified);\n\n\n// Synchronize MouseOver\n\nconst cursor = new Highcharts.DataCursor();\nconst tbody1 = container1.querySelector('tbody');\nconst tbody2 = container2.querySelector('tbody');\n\nfunction synchronizeMouseOver(e) {\n    const td = e.target;\n\n    if (td.tagName !== 'TD') {\n        return;\n    }\n\n    // Both tables are based on the same data\n    cursor.emitCursor(table, {\n        column: td.dataset.column,\n        // We use the values of the \"Rank\" column to identify the rows\n        row: parseInt(td.parentNode.dataset.rank, 10),\n        state: 'table.mouseover',\n        type: 'position'\n    }, e);\n}\n\ntbody1.addEventListener('mouseover', synchronizeMouseOver);\ntbody2.addEventListener('mouseover', synchronizeMouseOver);\n\nfunction synchronizeCursor(e) {\n    const cursor = e.cursor;\n    const column = cursor.column; // The cursor column contains the column name\n    const rank = `${cursor.row}`; // The cursor row contains the Rank value\n    const tbody = this; // The function is binded to one of the HTML tables\n\n    for (const tr of tbody.querySelectorAll('tr')) {\n        // We search for the correct HTML row\n        if (tr.dataset.rank === rank) {\n            tr.classList.add('highlight');\n        } else {\n            tr.classList.remove('highlight');\n        }\n        for (const td of tr.querySelectorAll('td')) {\n            // We search for the correct HTML cell\n            if (\n                tr.dataset.rank === rank &&\n                td.dataset.column === column\n            ) {\n                td.classList.add('highlight');\n            } else {\n                td.classList.remove('highlight');\n            }\n        }\n    }\n}\n\ncursor.addListener(\n    table.id,\n    'table.mouseover',\n    synchronizeCursor.bind(tbody1)\n);\ncursor.addListener(\n    table.id,\n    'table.mouseover',\n    synchronizeCursor.bind(tbody2)\n);\n","css":"#wrapper {\n    display: flex;\n    justify-content: stretch;\n}\n\n#container1,\n#container2 {\n    flex-grow: 1;\n    text-align: center;\n}\n\ntable {\n    min-width: 100%;\n}\n\ntable td,\ntable th {\n    line-height: 1.5em;\n    padding: 0.25em 0.5em;\n    vertical-align: top;\n}\n\ntable thead th {\n    background-color: #ddd;\n}\n\ntable tbody td {\n    background-color: #eee;\n}\n\ntr.highlight td {\n    background-color: #def;\n}\n\ntr td.highlight {\n    background-color: #bdf;\n}\n","html":"\n<div id=\"wrapper\">\n    <div id=\"container1\"></div>\n    <div id=\"container2\"></div>\n</div>\n\n<p>\n    DataCursor is used in this demo to synchronize the mouse highlight in two\n    DataTable(s) and their corresponding HTML tables. It adds and removes the\n    'highlight' class on HTML table cells and rows, so that different shades of\n    blue appear.\n    <br /><br />\n    This feature is useful when you need to compare multiple tables side by side\n    and easily see which cell corresponds to the same value across all tables.\n</p>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\nimport DataTools  from 'highcharts/modules/data-tools';\n\n// 初始化模块\nDataTools(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js","https://code.highcharts.com/11.0.1/modules/data-tools.js"]}