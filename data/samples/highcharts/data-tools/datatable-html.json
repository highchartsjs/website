{"js":"const container = document.querySelector('#container');\nconst escapeStringForHTML = Highcharts.A11yHTMLUtilities.escapeStringForHTML;\nconst table = new Highcharts.DataTable({ columns: { y: [7, 42] } });\n\n\n// Add Column\n\nconst addColumnButton = document.querySelector('#add-column-button');\nconst addColumnInput = document.querySelector('#add-column-input');\n\naddColumnButton.addEventListener('click', () => {\n    // Set column name; second parameter can be an array of cell values.\n    table.setColumn(addColumnInput.value);\n    // Render changed table.\n    renderTable(container, table.modified);\n    // Reset input field\n    addColumnInput.value = '';\n});\n\n\n// Add Row\n\nconst addRowButton = document.querySelector('#add-row-button');\nconst addRowInput = document.querySelector('#add-row-input');\n\naddRowButton.addEventListener('click', () => {\n    // Set row values from input string splitted by `,` and `;`.\n    table.setRow(\n        addRowInput.value\n            .split(/[,;]/g)\n            // check for numbers in cell string and convert them\n            .map(cell => (\n                /^[.\\d\\s]+$/.test(cell) && !isNaN(parseFloat(cell)) ?\n                    parseFloat(cell) :\n                    cell\n            ))\n    );\n    // Render changed table.\n    renderTable(container, table.modified);\n    // Reset input field\n    addRowInput.value = '';\n});\n\n\n// Modifiers\n\nconst setModifierSelect = document.querySelector('#set-modifier');\nconst DataModifierTypes = Highcharts.DataModifier.types;\n\nsetModifierSelect.addEventListener('change', async () => {\n    const type = setModifierSelect.value;\n\n    if (type !== 'off') {\n        await table.setModifier(new DataModifierTypes[type]({}));\n    } else {\n        await table.setModifier();\n    }\n\n    // without modifier table.modified = table\n    renderTable(container, table.modified);\n});\n\n\n// Render Simple HTML Table\n\nfunction renderTable(container, table) {\n    const html = [];\n\n    html.push('<table>');\n    html.push('<thead>');\n    html.push('<tr>');\n    for (const column of table.getColumnNames()) {\n        html.push('<th>', escapeStringForHTML(column), '</th>');\n    }\n    html.push('</tr>');\n    html.push('</thead>');\n    html.push('<tbody>');\n    for (const row of table.getRows()) {\n        html.push('<tr>');\n        for (const value of row) {\n            html.push('<td>', escapeStringForHTML('' + value), '</td>');\n        }\n        html.push('</tr>');\n    }\n    html.push('</tbody>');\n    html.push('</table>');\n\n    container.innerHTML = html.join('');\n}\nrenderTable(container, table);\n","css":":root {\n    --color-background: #fff;\n    --color-foreground: #000;\n    --color-tbody-background: #eee;\n    --color-thead-background: #ddd;\n}\n\n@media (prefers-color-scheme: dark) {\n    :root {\n        --color-background: #111;\n        --color-foreground: #eee;\n        --color-tbody-background: #222;\n        --color-thead-background: #333;\n    }\n}\n\nhtml {\n    background-color: var(--color-background);\n    color: var(--color-foreground);\n}\n\nform {\n    display: flex;\n    justify-content: stretch;\n}\n\nfieldset {\n    flex-grow: 1;\n    text-align: center;\n    border: 1px solid silver;\n}\n\nfieldset:last-child {\n    flex-grow: 0;\n}\n\ninput[type=\"text\"] {\n    vertical-align: top;\n    width: 50%;\n}\n\ntable {\n    min-width: 50%;\n}\n\ntable td,\ntable th {\n    line-height: 1.5em;\n    padding: 0.25em 0.5em;\n    vertical-align: top;\n    white-space: pre-wrap;\n}\n\ntable thead th {\n    background-color: var(--color-thead-background);\n}\n\ntable tbody td {\n    background-color: var(--color-tbody-background);\n}\n\n@media (max-width: 800px) {\n    form {\n        flex-direction: column;\n    }\n}\n","html":"\n<form id=\"form\">\n    <fieldset>\n        <legend><h4>DataTable.setColumn()</h4></legend>\n        <label for=\"add-column-input\">Name:</label>\n        <input type=\"text\" id=\"add-column-input\" value=\"name\" />\n        <button type=\"button\" id=\"add-column-button\">Add Column</label>\n    </fieldset>\n    <fieldset>\n        <legend><h4>DataTable.setRow()</h4></legend>\n        <label for=\"add-row-input\">Values:</label>\n        <input type=\"text\" id=\"add-row-input\" value=\"343, speed of sound\" />\n        <button type=\"button\" id=\"add-row-button\">Add Row</label>\n    </fieldset>\n    <fieldset>\n        <legend><h4>DataTable.setModifier()</h4></legend>\n        <label for=\"set-modifier\">Type:</label>\n        <select type=\"radio\" id=\"set-modifier\" name=\"modifier\">\n            <option selected>off</option>\n            <option>Invert</option>\n            <option>Sort</option>\n        </select>\n    </fieldset>\n</form>\n\n<p>\n    Use the form fields above to add a column or row to the table below.\n    The values for a row can be separated by comma or semicolon.\n    Set a modifier above to see the <i>DataTable.modified</i> version of the\n    table with structural changes.\n</p>\n\n<h4>DataTable.modified:</h4>\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts    from 'highcharts';\nimport DataTools     from 'highcharts/modules/data-tools';\nimport Accessibility from 'highcharts/modules/accessibility';\n\n// 初始化模块\nDataTools(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js","https://code.highcharts.com/11.0.1/modules/data-tools.js","https://code.highcharts.com/11.0.1/modules/accessibility.js"]}