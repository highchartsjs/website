{"js":"const startYear = 1960,\n    endYear = 2018,\n    btn = document.getElementById('play-pause-button'),\n    input = document.getElementById('play-range'),\n    nbr = 20;\n\nlet dataset, chart;\n\n\n/*\n * Animate dataLabels functionality\n */\n(function (H) {\n    const FLOAT = /^-?\\d+\\.?\\d*$/;\n\n    // Add animated textSetter, just like fill/strokeSetters\n    H.Fx.prototype.textSetter = function () {\n        let startValue = this.start.replace(/ /g, ''),\n            endValue = this.end.replace(/ /g, ''),\n            currentValue = this.end.replace(/ /g, '');\n\n        if ((startValue || '').match(FLOAT)) {\n            startValue = parseInt(startValue, 10);\n            endValue = parseInt(endValue, 10);\n\n            // No support for float\n            currentValue = Highcharts.numberFormat(\n                Math.round(startValue + (endValue - startValue) * this.pos),\n                0\n            );\n        }\n\n        this.elem.endText = this.end;\n\n        this.elem.attr(this.prop, currentValue, null, true);\n    };\n\n    // Add textGetter, not supported at all at this moment:\n    H.SVGElement.prototype.textGetter = function () {\n        const ct = this.text.element.textContent || '';\n        return this.endText ? this.endText : ct.substring(0, ct.length / 2);\n    };\n\n    // Temporary change label.attr() with label.animate():\n    // In core it's simple change attr(...) => animate(...) for text prop\n    H.wrap(H.Series.prototype, 'drawDataLabels', function (proceed) {\n        const attr = H.SVGElement.prototype.attr,\n            chart = this.chart;\n\n        if (chart.sequenceTimer) {\n            this.points.forEach(point =>\n                (point.dataLabels || []).forEach(\n                    label =>\n                        (label.attr = function (hash) {\n                            if (\n                                hash &&\n                                hash.text !== undefined &&\n                                chart.isResizing === 0\n                            ) {\n                                const text = hash.text;\n\n                                delete hash.text;\n\n                                return this\n                                    .attr(hash)\n                                    .animate({ text });\n                            }\n                            return attr.apply(this, arguments);\n\n                        })\n                )\n            );\n        }\n\n        const ret = proceed.apply(\n            this,\n            Array.prototype.slice.call(arguments, 1)\n        );\n\n        this.points.forEach(p =>\n            (p.dataLabels || []).forEach(d => (d.attr = attr))\n        );\n\n        return ret;\n    });\n}(Highcharts));\n\n\nfunction getData(year) {\n    const output = Object.entries(dataset)\n        .map(country => {\n            const [countryName, countryData] = country;\n            return [countryName, Number(countryData[year])];\n        })\n        .sort((a, b) => b[1] - a[1]);\n    return [output[0], output.slice(1, nbr)];\n}\n\nfunction getSubtitle() {\n    const population = (getData(input.value)[0][1] / 1000000000).toFixed(2);\n    return `<span style=\"font-size: 80px\">${input.value}</span>\n        <br>\n        <span style=\"font-size: 22px\">\n            Total: <b>: ${population}</b> billion\n        </span>`;\n}\n\n(async () => {\n\n    dataset = await fetch(\n        'https://demo-live-data.highcharts.com/population.json'\n    ).then(response => response.json());\n\n\n    chart = Highcharts.chart('container', {\n        chart: {\n            animation: {\n                duration: 500\n            },\n            marginRight: 50\n        },\n        title: {\n            text: 'World population by country',\n            align: 'left'\n        },\n        subtitle: {\n            useHTML: true,\n            text: getSubtitle(),\n            floating: true,\n            align: 'right',\n            verticalAlign: 'middle',\n            y: -20,\n            x: -100\n        },\n\n        legend: {\n            enabled: false\n        },\n        xAxis: {\n            type: 'category'\n        },\n        yAxis: {\n            opposite: true,\n            tickPixelInterval: 150,\n            title: {\n                text: null\n            }\n        },\n        plotOptions: {\n            series: {\n                animation: false,\n                groupPadding: 0,\n                pointPadding: 0.1,\n                borderWidth: 0,\n                colorByPoint: true,\n                dataSorting: {\n                    enabled: true,\n                    matchByName: true\n                },\n                type: 'bar',\n                dataLabels: {\n                    enabled: true\n                }\n            }\n        },\n        series: [\n            {\n                type: 'bar',\n                name: startYear,\n                data: getData(startYear)[1]\n            }\n        ],\n        responsive: {\n            rules: [{\n                condition: {\n                    maxWidth: 550\n                },\n                chartOptions: {\n                    xAxis: {\n                        visible: false\n                    },\n                    subtitle: {\n                        x: 0\n                    },\n                    plotOptions: {\n                        series: {\n                            dataLabels: [{\n                                enabled: true,\n                                y: 8\n                            }, {\n                                enabled: true,\n                                format: '{point.name}',\n                                y: -8,\n                                style: {\n                                    fontWeight: 'normal',\n                                    opacity: 0.7\n                                }\n                            }]\n                        }\n                    }\n                }\n            }]\n        }\n    });\n})();\n\n/*\n * Pause the timeline, either when the range is ended, or when clicking the pause button.\n * Pausing stops the timer and resets the button to play mode.\n */\nfunction pause(button) {\n    button.title = 'play';\n    button.className = 'fa fa-play';\n    clearTimeout(chart.sequenceTimer);\n    chart.sequenceTimer = undefined;\n}\n\n/*\n * Update the chart. This happens either on updating (moving) the range input,\n * or from a timer when the timeline is playing.\n */\nfunction update(increment) {\n    if (increment) {\n        input.value = parseInt(input.value, 10) + increment;\n    }\n    if (input.value >= endYear) {\n        // Auto-pause\n        pause(btn);\n    }\n\n    chart.update(\n        {\n            subtitle: {\n                text: getSubtitle()\n            }\n        },\n        false,\n        false,\n        false\n    );\n\n    chart.series[0].update({\n        name: input.value,\n        data: getData(input.value)[1]\n    });\n}\n\n/*\n * Play the timeline.\n */\nfunction play(button) {\n    button.title = 'pause';\n    button.className = 'fa fa-pause';\n    chart.sequenceTimer = setInterval(function () {\n        update(1);\n    }, 500);\n}\n\nbtn.addEventListener('click', function () {\n    if (chart.sequenceTimer) {\n        pause(this);\n    } else {\n        play(this);\n    }\n});\n/*\n * Trigger the update on the range bar click.\n */\ninput.addEventListener('click', function () {\n    update();\n});\n","css":"@import \"https://netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\";\n\n.highcharts-figure {\n    margin: 0;\n}\n\n#play-controls {\n    max-width: 1000px;\n    margin: 1em auto;\n}\n\n#container {\n    height: 900px;\n    max-width: 1000px;\n    margin: 0 auto;\n}\n\n#play-pause-button {\n    margin-left: 10px;\n    width: 50px;\n    height: 50px;\n    cursor: pointer;\n    border: 1px solid rgba(2, 117, 255, 1);\n    border-radius: 25px;\n    color: white;\n    background-color: rgba(2, 117, 255, 1);\n    transition: background-color 250ms;\n}\n\n#play-pause-button:hover {\n    background-color: rgba(2, 117, 255, 0.5);\n}\n\n#play-range {\n    transform: translateY(2.5px);\n    width: calc(100% - 90px);\n    background: #f8f8f8;\n}\n","html":"\n<figure class=\"highcharts-figure\">\n    <div id=\"parent-container\">\n\t\t<div id=\"play-controls\">\n\t\t\t<button id=\"play-pause-button\" class=\"fa fa-play\" title=\"play\"></button>\n\t\t\t<input id=\"play-range\" type=\"range\" value=\"1960\" min=\"1960\" max=\"2018\" />\n\t\t</div>\n\t\t<div id=\"container\"></div>\n\t</div>\n    <p class=\"highcharts-description\">\n        Bar chart showing the world population by countries from 1960 to 2018.\n    </p>\n</figure>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts from 'highcharts';\n\n// 初始化模块\n","scripts":["https://code.highcharts.com/11.0.1/highcharts.js"]}