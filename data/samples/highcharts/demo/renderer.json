{"js":"Highcharts.chart('container', {\n    chart: {\n        backgroundColor: 'white',\n        events: {\n            load: function () {\n\n                // Draw the flow chart\n                var ren = this.renderer,\n                    colors = Highcharts.getOptions().colors,\n                    rightArrow = ['M', 0, 0, 'L', 100, 0, 'L', 95, 5, 'M', 100, 0, 'L', 95, -5],\n                    leftArrow = ['M', 100, 0, 'L', 0, 0, 'L', 5, 5, 'M', 0, 0, 'L', 5, -5];\n\n\n                // Separator, client from service\n                ren.path(['M', 120, 40, 'L', 120, 330])\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: 'silver',\n                        dashstyle: 'dash'\n                    })\n                    .add();\n\n                // Separator, CLI from service\n                ren.path(['M', 420, 40, 'L', 420, 330])\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: 'silver',\n                        dashstyle: 'dash'\n                    })\n                    .add();\n\n                // Headers\n                ren.label('Web client', 20, 40)\n                    .css({\n                        fontWeight: 'bold'\n                    })\n                    .add();\n                ren.label('Web service / CLI', 220, 40)\n                    .css({\n                        fontWeight: 'bold'\n                    })\n                    .add();\n                ren.label('Command line client', 440, 40)\n                    .css({\n                        fontWeight: 'bold'\n                    })\n                    .add();\n\n                // SaaS client label\n                ren.label('SaaS client<br/>(browser or<br/>script)', 10, 82)\n                    .attr({\n                        fill: colors[0],\n                        stroke: 'white',\n                        'stroke-width': 2,\n                        padding: 5,\n                        r: 5\n                    })\n                    .css({\n                        color: 'white'\n                    })\n                    .add()\n                    .shadow(true);\n\n                // Arrow from SaaS client to Phantom JS\n                ren.path(rightArrow)\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[3]\n                    })\n                    .translate(95, 95)\n                    .add();\n\n                ren.label('POST options in JSON', 90, 75)\n                    .css({\n                        fontSize: '10px',\n                        color: colors[3]\n                    })\n                    .add();\n\n                ren.label('PhantomJS', 210, 82)\n                    .attr({\n                        r: 5,\n                        width: 100,\n                        fill: colors[1]\n                    })\n                    .css({\n                        color: 'white',\n                        fontWeight: 'bold'\n                    })\n                    .add();\n\n                // Arrow from Phantom JS to Batik\n                ren.path(['M', 250, 110, 'L', 250, 185, 'L', 245, 180, 'M', 250, 185, 'L', 255, 180])\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[3]\n                    })\n                    .add();\n\n                ren.label('SVG', 255, 120)\n                    .css({\n                        color: colors[3],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n                ren.label('Batik', 210, 200)\n                    .attr({\n                        r: 5,\n                        width: 100,\n                        fill: colors[1]\n                    })\n                    .css({\n                        color: 'white',\n                        fontWeight: 'bold'\n                    })\n                    .add();\n\n                // Arrow from Batik to SaaS client\n                ren\n                    .path([\n                        'M', 235, 185,\n                        'L', 235, 155,\n                        'C', 235, 130, 235, 130, 215, 130,\n                        'L', 95, 130,\n                        'L', 100, 125,\n                        'M', 95, 130,\n                        'L', 100, 135\n                    ])\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[3]\n                    })\n                    .add();\n\n                ren.label('Rasterized image', 100, 110)\n                    .css({\n                        color: colors[3],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n                // Browser label\n                ren.label('Browser<br/>running<br/>Highcharts', 10, 180)\n                    .attr({\n                        fill: colors[0],\n                        stroke: 'white',\n                        'stroke-width': 2,\n                        padding: 5,\n                        r: 5\n                    })\n                    .css({\n                        color: 'white',\n                        width: '100px'\n                    })\n                    .add()\n                    .shadow(true);\n\n\n                // Arrow from Browser to Batik\n                ren.path(rightArrow)\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[1]\n                    })\n                    .translate(95, 205)\n                    .add();\n\n                ren.label('POST SVG', 110, 185)\n                    .css({\n                        color: colors[1],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n                // Arrow from Batik to Browser\n                ren.path(leftArrow)\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[1]\n                    })\n                    .translate(95, 215)\n                    .add();\n\n                ren.label('Rasterized image', 100, 215)\n                    .css({\n                        color: colors[1],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n                // Script label\n                ren.label('Script', 450, 82)\n                    .attr({\n                        fill: colors[2],\n                        stroke: 'white',\n                        'stroke-width': 2,\n                        padding: 5,\n                        r: 5\n                    })\n                    .css({\n                        color: 'white',\n                        width: '100px'\n                    })\n                    .add()\n                    .shadow(true);\n\n                // Arrow from Script to PhantomJS\n                ren.path(leftArrow)\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[2]\n                    })\n                    .translate(330, 90)\n                    .add();\n\n                ren.label('Command', 340, 70)\n                    .css({\n                        color: colors[2],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n                // Arrow from PhantomJS to Script\n                ren.path(rightArrow)\n                    .attr({\n                        'stroke-width': 2,\n                        stroke: colors[2]\n                    })\n                    .translate(330, 100)\n                    .add();\n\n                ren.label('Rasterized image', 330, 100)\n                    .css({\n                        color: colors[2],\n                        fontSize: '10px'\n                    })\n                    .add();\n\n\n            }\n        }\n    },\n    title: {\n        text: 'Highcharts export server overview',\n        style: {\n            color: 'black'\n        }\n    },\n    accessibility: {\n        typeDescription: 'Flowchart'\n    }\n\n});","css":"#container {\n    width: 600px;\n    height: 250px;\n    margin: 1em auto;\n}\n\n.highcharts-figure,\n.highcharts-data-table table {\n    min-width: 310px;\n    max-width: 600px;\n    margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #ebebeb;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n\n.highcharts-data-table th {\n    font-weight: 600;\n    padding: 0.5em;\n}\n\n.highcharts-data-table td,\n.highcharts-data-table th,\n.highcharts-data-table caption {\n    padding: 0.5em;\n}\n\n.highcharts-data-table thead tr,\n.highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n","html":"\n<figure class=\"highcharts-figure\">\n    <div id=\"container\"></div>\n    <p class=\"highcharts-description\">\n        Highcharts can be used as a rendering layer that abstracts SVG\n        (and even VML), and adds sophisticated support for text handling and\n        more. This example shows how Highcharts can be used to draw a custom\n        flow chart.\n    </p>\n</figure>\n","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts      from 'highcharts';\nimport Exporting       from 'highcharts/modules/exporting';\nimport Accessibility   from 'highcharts/modules/accessibility';\nimport HighchartsZh_CN from 'https://code.hcharts.cn/plugins/highcharts-zh_CN.js';\n\n// 初始化模块\nExporting(Highcharts);\nAccessibility(Highcharts);\nHighchartsZh_CN(Highcharts);\n","scripts":["https://code.hcharts.cn/10.3.2/highcharts.js","https://code.hcharts.cn/10.3.2/modules/exporting.js","https://code.hcharts.cn/10.3.2/modules/accessibility.js","https://code.hcharts.cn/plugins/highcharts-zh_CN.js"]}