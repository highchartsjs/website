{"js":"/**\n * This is a complex demo of how to set up a Highcharts chart, coupled to a\n * dynamic source and extended by drawing image sprites, wind arrow paths\n * and a second grid on top of the chart. The purpose of the demo is to inpire\n * developers to go beyond the basic chart types and show how the library can\n * be extended programmatically. This is what the demo does:\n *\n * - Loads weather forecast from www.yr.no in form of a JSON service.\n * - When the data arrives async, a Meteogram instance is created. We have\n *   created the Meteogram prototype to provide an organized structure of the\n *   different methods and subroutines associated with the demo.\n * - The parseYrData method parses the data from www.yr.no into several parallel\n *   arrays. These arrays are used directly as the data option for temperature,\n *   precipitation and air pressure.\n * - After this, the options structure is built, and the chart generated with\n *   the parsed data.\n * - On chart load, weather icons and the frames for the wind arrows are\n *   rendered using custom logic.\n */\n\nfunction Meteogram(json, container) {\n    // Parallel arrays for the chart data, these are populated as the JSON file\n    // is loaded\n    this.symbols = [];\n    this.precipitations = [];\n    this.precipitationsError = []; // Only for some data sets\n    this.winds = [];\n    this.temperatures = [];\n    this.pressures = [];\n\n    // Initialize\n    this.json = json;\n    this.container = container;\n\n    // Run\n    this.parseYrData();\n}\n\n/**\n * Mapping of the symbol code in yr.no's API to the icons in their public\n * GitHub repo, as well as the text used in the tooltip.\n *\n * https://api.met.no/weatherapi/weathericon/2.0/documentation\n */\nMeteogram.dictionary = {\n    clearsky: {\n        symbol: '01',\n        text: 'Clear sky'\n    },\n    fair: {\n        symbol: '02',\n        text: 'Fair'\n    },\n    partlycloudy: {\n        symbol: '03',\n        text: 'Partly cloudy'\n    },\n    cloudy: {\n        symbol: '04',\n        text: 'Cloudy'\n    },\n    lightrainshowers: {\n        symbol: '40',\n        text: 'Light rain showers'\n    },\n    rainshowers: {\n        symbol: '05',\n        text: 'Rain showers'\n    },\n    heavyrainshowers: {\n        symbol: '41',\n        text: 'Heavy rain showers'\n    },\n    lightrainshowersandthunder: {\n        symbol: '24',\n        text: 'Light rain showers and thunder'\n    },\n    rainshowersandthunder: {\n        symbol: '06',\n        text: 'Rain showers and thunder'\n    },\n    heavyrainshowersandthunder: {\n        symbol: '25',\n        text: 'Heavy rain showers and thunder'\n    },\n    lightsleetshowers: {\n        symbol: '42',\n        text: 'Light sleet showers'\n    },\n    sleetshowers: {\n        symbol: '07',\n        text: 'Sleet showers'\n    },\n    heavysleetshowers: {\n        symbol: '43',\n        text: 'Heavy sleet showers'\n    },\n    lightsleetshowersandthunder: {\n        symbol: '26',\n        text: 'Light sleet showers and thunder'\n    },\n    sleetshowersandthunder: {\n        symbol: '20',\n        text: 'Sleet showers and thunder'\n    },\n    heavysleetshowersandthunder: {\n        symbol: '27',\n        text: 'Heavy sleet showers and thunder'\n    },\n    lightsnowshowers: {\n        symbol: '44',\n        text: 'Light snow showers'\n    },\n    snowshowers: {\n        symbol: '08',\n        text: 'Snow showers'\n    },\n    heavysnowshowers: {\n        symbol: '45',\n        text: 'Heavy show showers'\n    },\n    lightsnowshowersandthunder: {\n        symbol: '28',\n        text: 'Light snow showers and thunder'\n    },\n    snowshowersandthunder: {\n        symbol: '21',\n        text: 'Snow showers and thunder'\n    },\n    heavysnowshowersandthunder: {\n        symbol: '29',\n        text: 'Heavy snow showers and thunder'\n    },\n    lightrain: {\n        symbol: '46',\n        text: 'Light rain'\n    },\n    rain: {\n        symbol: '09',\n        text: 'Rain'\n    },\n    heavyrain: {\n        symbol: '10',\n        text: 'Heavy rain'\n    },\n    lightrainandthunder: {\n        symbol: '30',\n        text: 'Light rain and thunder'\n    },\n    rainandthunder: {\n        symbol: '22',\n        text: 'Rain and thunder'\n    },\n    heavyrainandthunder: {\n        symbol: '11',\n        text: 'Heavy rain and thunder'\n    },\n    lightsleet: {\n        symbol: '47',\n        text: 'Light sleet'\n    },\n    sleet: {\n        symbol: '12',\n        text: 'Sleet'\n    },\n    heavysleet: {\n        symbol: '48',\n        text: 'Heavy sleet'\n    },\n    lightsleetandthunder: {\n        symbol: '31',\n        text: 'Light sleet and thunder'\n    },\n    sleetandthunder: {\n        symbol: '23',\n        text: 'Sleet and thunder'\n    },\n    heavysleetandthunder: {\n        symbol: '32',\n        text: 'Heavy sleet and thunder'\n    },\n    lightsnow: {\n        symbol: '49',\n        text: 'Light snow'\n    },\n    snow: {\n        symbol: '13',\n        text: 'Snow'\n    },\n    heavysnow: {\n        symbol: '50',\n        text: 'Heavy snow'\n    },\n    lightsnowandthunder: {\n        symbol: '33',\n        text: 'Light snow and thunder'\n    },\n    snowandthunder: {\n        symbol: '14',\n        text: 'Snow and thunder'\n    },\n    heavysnowandthunder: {\n        symbol: '34',\n        text: 'Heavy snow and thunder'\n    },\n    fog: {\n        symbol: '15',\n        text: 'Fog'\n    }\n};\n\n/**\n * Draw the weather symbols on top of the temperature series. The symbols are\n * fetched from yr.no's MIT licensed weather symbol collection.\n * https://github.com/YR/weather-symbols\n */\nMeteogram.prototype.drawWeatherSymbols = function (chart) {\n\n    chart.series[0].data.forEach((point, i) => {\n        if (this.resolution > 36e5 || i % 2 === 0) {\n\n            const [symbol, specifier] = this.symbols[i].split('_'),\n                icon = Meteogram.dictionary[symbol].symbol +\n                    ({ day: 'd', night: 'n' }[specifier] || '');\n\n            if (Meteogram.dictionary[symbol]) {\n                chart.renderer\n                    .image(\n                        'https://cdn.jsdelivr.net/gh/nrkno/yr-weather-symbols' +\n                            `@8.0.1/dist/svg/${icon}.svg`,\n                        point.plotX + chart.plotLeft - 8,\n                        point.plotY + chart.plotTop - 30,\n                        30,\n                        30\n                    )\n                    .attr({\n                        zIndex: 5\n                    })\n                    .add();\n            } else {\n                console.log(symbol);\n            }\n        }\n    });\n};\n\n\n/**\n * Draw blocks around wind arrows, below the plot area\n */\nMeteogram.prototype.drawBlocksForWindArrows = function (chart) {\n    const xAxis = chart.xAxis[0];\n\n    for (\n        let pos = xAxis.min, max = xAxis.max, i = 0;\n        pos <= max + 36e5; pos += 36e5,\n        i += 1\n    ) {\n\n        // Get the X position\n        const isLast = pos === max + 36e5,\n            x = Math.round(xAxis.toPixels(pos)) + (isLast ? 0.5 : -0.5);\n\n        // Draw the vertical dividers and ticks\n        const isLong = this.resolution > 36e5 ?\n            pos % this.resolution === 0 :\n            i % 2 === 0;\n\n        chart.renderer\n            .path([\n                'M', x, chart.plotTop + chart.plotHeight + (isLong ? 0 : 28),\n                'L', x, chart.plotTop + chart.plotHeight + 32,\n                'Z'\n            ])\n            .attr({\n                stroke: chart.options.chart.plotBorderColor,\n                'stroke-width': 1\n            })\n            .add();\n    }\n\n    // Center items in block\n    chart.get('windbarbs').markerGroup.attr({\n        translateX: chart.get('windbarbs').markerGroup.translateX + 8\n    });\n\n};\n\n/**\n * Build and return the Highcharts options structure\n */\nMeteogram.prototype.getChartOptions = function () {\n    return {\n        chart: {\n            renderTo: this.container,\n            marginBottom: 70,\n            marginRight: 40,\n            marginTop: 50,\n            plotBorderWidth: 1,\n            height: 310,\n            alignTicks: false,\n            scrollablePlotArea: {\n                minWidth: 720\n            }\n        },\n\n        defs: {\n            patterns: [{\n                id: 'precipitation-error',\n                path: {\n                    d: [\n                        'M', 3.3, 0, 'L', -6.7, 10,\n                        'M', 6.7, 0, 'L', -3.3, 10,\n                        'M', 10, 0, 'L', 0, 10,\n                        'M', 13.3, 0, 'L', 3.3, 10,\n                        'M', 16.7, 0, 'L', 6.7, 10\n                    ].join(' '),\n                    stroke: '#68CFE8',\n                    strokeWidth: 1\n                }\n            }]\n        },\n\n        title: {\n            text: 'Meteogram for London, England',\n            align: 'left',\n            style: {\n                whiteSpace: 'nowrap',\n                textOverflow: 'ellipsis'\n            }\n        },\n\n        credits: {\n            text: 'Forecast from <a href=\"https://yr.no\">yr.no</a>',\n            href: 'https://yr.no',\n            position: {\n                x: -40\n            }\n        },\n\n        tooltip: {\n            shared: true,\n            useHTML: true,\n            headerFormat:\n                '<small>{point.x:%A, %b %e, %H:%M} - {point.point.to:%H:%M}</small><br>' +\n                '<b>{point.point.symbolName}</b><br>'\n\n        },\n\n        xAxis: [{ // Bottom X axis\n            type: 'datetime',\n            tickInterval: 2 * 36e5, // two hours\n            minorTickInterval: 36e5, // one hour\n            tickLength: 0,\n            gridLineWidth: 1,\n            gridLineColor: 'rgba(128, 128, 128, 0.1)',\n            startOnTick: false,\n            endOnTick: false,\n            minPadding: 0,\n            maxPadding: 0,\n            offset: 30,\n            showLastLabel: true,\n            labels: {\n                format: '{value:%H}'\n            },\n            crosshair: true\n        }, { // Top X axis\n            linkedTo: 0,\n            type: 'datetime',\n            tickInterval: 24 * 3600 * 1000,\n            labels: {\n                format: '{value:<span style=\"font-size: 12px; font-weight: bold\">%a</span> %b %e}',\n                align: 'left',\n                x: 3,\n                y: 8\n            },\n            opposite: true,\n            tickLength: 20,\n            gridLineWidth: 1\n        }],\n\n        yAxis: [{ // temperature axis\n            title: {\n                text: null\n            },\n            labels: {\n                format: '{value}°',\n                style: {\n                    fontSize: '10px'\n                },\n                x: -3\n            },\n            plotLines: [{ // zero plane\n                value: 0,\n                color: '#BBBBBB',\n                width: 1,\n                zIndex: 2\n            }],\n            maxPadding: 0.3,\n            minRange: 8,\n            tickInterval: 1,\n            gridLineColor: 'rgba(128, 128, 128, 0.1)'\n\n        }, { // precipitation axis\n            title: {\n                text: null\n            },\n            labels: {\n                enabled: false\n            },\n            gridLineWidth: 0,\n            tickLength: 0,\n            minRange: 10,\n            min: 0\n\n        }, { // Air pressure\n            allowDecimals: false,\n            title: { // Title on top of axis\n                text: 'hPa',\n                offset: 0,\n                align: 'high',\n                rotation: 0,\n                style: {\n                    fontSize: '10px',\n                    color: Highcharts.getOptions().colors[2]\n                },\n                textAlign: 'left',\n                x: 3\n            },\n            labels: {\n                style: {\n                    fontSize: '8px',\n                    color: Highcharts.getOptions().colors[2]\n                },\n                y: 2,\n                x: 3\n            },\n            gridLineWidth: 0,\n            opposite: true,\n            showLastLabel: false\n        }],\n\n        legend: {\n            enabled: false\n        },\n\n        plotOptions: {\n            series: {\n                pointPlacement: 'between'\n            }\n        },\n\n\n        series: [{\n            name: 'Temperature',\n            data: this.temperatures,\n            type: 'spline',\n            marker: {\n                enabled: false,\n                states: {\n                    hover: {\n                        enabled: true\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '{series.name}: <b>{point.y}°C</b><br/>'\n            },\n            zIndex: 1,\n            color: '#FF3333',\n            negativeColor: '#48AFE8'\n        }, {\n            name: 'Precipitation',\n            data: this.precipitationsError,\n            type: 'column',\n            color: 'url(#precipitation-error)',\n            yAxis: 1,\n            groupPadding: 0,\n            pointPadding: 0,\n            tooltip: {\n                valueSuffix: ' mm',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '{series.name}: <b>{point.minvalue} mm - {point.maxvalue} mm</b><br/>'\n            },\n            grouping: false,\n            dataLabels: {\n                enabled: this.hasPrecipitationError,\n                filter: {\n                    operator: '>',\n                    property: 'maxValue',\n                    value: 0\n                },\n                style: {\n                    fontSize: '8px',\n                    color: 'gray'\n                }\n            }\n        }, {\n            name: 'Precipitation',\n            data: this.precipitations,\n            type: 'column',\n            color: '#68CFE8',\n            yAxis: 1,\n            groupPadding: 0,\n            pointPadding: 0,\n            grouping: false,\n            dataLabels: {\n                enabled: !this.hasPrecipitationError,\n                filter: {\n                    operator: '>',\n                    property: 'y',\n                    value: 0\n                },\n                style: {\n                    fontSize: '8px',\n                    color: '#666'\n                }\n            },\n            tooltip: {\n                valueSuffix: ' mm'\n            }\n        }, {\n            name: 'Air pressure',\n            color: Highcharts.getOptions().colors[2],\n            data: this.pressures,\n            marker: {\n                enabled: false\n            },\n            shadow: false,\n            tooltip: {\n                valueSuffix: ' hPa'\n            },\n            dashStyle: 'shortdot',\n            yAxis: 2\n        }, {\n            name: 'Wind',\n            type: 'windbarb',\n            id: 'windbarbs',\n            color: Highcharts.getOptions().colors[1],\n            lineWidth: 1.5,\n            data: this.winds,\n            vectorLength: 18,\n            yOffset: -15,\n            tooltip: {\n                valueSuffix: ' m/s'\n            }\n        }]\n    };\n};\n\n/**\n * Post-process the chart from the callback function, the second argument\n * Highcharts.Chart.\n */\nMeteogram.prototype.onChartLoad = function (chart) {\n\n    this.drawWeatherSymbols(chart);\n    this.drawBlocksForWindArrows(chart);\n\n};\n\n/**\n * Create the chart. This function is called async when the data file is loaded\n * and parsed.\n */\nMeteogram.prototype.createChart = function () {\n    this.chart = new Highcharts.Chart(this.getChartOptions(), chart => {\n        this.onChartLoad(chart);\n    });\n};\n\nMeteogram.prototype.error = function () {\n    document.getElementById('loading').innerHTML =\n        '<i class=\"fa fa-frown-o\"></i> Failed loading data, please try again later';\n};\n\n/**\n * Handle the data. This part of the code is not Highcharts specific, but deals\n * with yr.no's specific data format\n */\nMeteogram.prototype.parseYrData = function () {\n\n    let pointStart;\n\n    if (!this.json) {\n        return this.error();\n    }\n\n    // Loop over hourly (or 6-hourly) forecasts\n    this.json.properties.timeseries.forEach((node, i) => {\n\n        const x = Date.parse(node.time),\n            nextHours = node.data.next_1_hours || node.data.next_6_hours,\n            symbolCode = nextHours && nextHours.summary.symbol_code,\n            to = node.data.next_1_hours ? x + 36e5 : x + 6 * 36e5;\n\n        if (to > pointStart + 48 * 36e5) {\n            return;\n        }\n\n        // Populate the parallel arrays\n        this.symbols.push(nextHours.summary.symbol_code);\n\n        this.temperatures.push({\n            x,\n            y: node.data.instant.details.air_temperature,\n            // custom options used in the tooltip formatter\n            to,\n            symbolName: Meteogram.dictionary[\n                symbolCode.replace(/_(day|night)$/, '')\n            ].text\n        });\n\n        this.precipitations.push({\n            x,\n            y: nextHours.details.precipitation_amount\n        });\n\n        if (i % 2 === 0) {\n            this.winds.push({\n                x,\n                value: node.data.instant.details.wind_speed,\n                direction: node.data.instant.details.wind_from_direction\n            });\n        }\n\n        this.pressures.push({\n            x,\n            y: node.data.instant.details.air_pressure_at_sea_level\n        });\n\n        if (i === 0) {\n            pointStart = (x + to) / 2;\n        }\n    });\n\n    // Create the chart when the data is loaded\n    this.createChart();\n};\n// End of the Meteogram protype\n\n\n// On DOM ready...\n\n// Set the hash to the yr.no URL we want to parse\nif (!location.hash) {\n    location.hash = 'https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=51.50853&lon=-0.12574&altitude=25';\n}\n\nconst url = location.hash.substr(1);\nHighcharts.ajax({\n    url,\n    dataType: 'json',\n    success: json => {\n        window.meteogram = new Meteogram(json, 'container');\n    },\n    error: Meteogram.prototype.error,\n    headers: {\n        // Override the Content-Type to avoid preflight problems with CORS\n        // in the Highcharts demos\n        'Content-Type': 'text/plain'\n    }\n});\n","css":"#container {\n    max-width: 800px;\n    min-width: 380px;\n    height: 310px;\n    margin: 0 auto;\n}\n\n#loading {\n    margin-top: 100px;\n    text-align: center;\n}\n\n.highcharts-figure,\n.highcharts-data-table table {\n    min-width: 350px;\n    max-width: 800px;\n    margin: 1em auto;\n}\n\n.highcharts-data-table table {\n    font-family: Verdana, sans-serif;\n    border-collapse: collapse;\n    border: 1px solid #ebebeb;\n    margin: 10px auto;\n    text-align: center;\n    width: 100%;\n    max-width: 500px;\n}\n\n.highcharts-data-table caption {\n    padding: 1em 0;\n    font-size: 1.2em;\n    color: #555;\n}\n\n.highcharts-data-table th {\n    font-weight: 600;\n    padding: 0.5em;\n}\n\n.highcharts-data-table td,\n.highcharts-data-table th,\n.highcharts-data-table caption {\n    padding: 0.5em;\n}\n\n.highcharts-data-table thead tr,\n.highcharts-data-table tr:nth-child(even) {\n    background: #f8f8f8;\n}\n\n.highcharts-data-table tr:hover {\n    background: #f1f7ff;\n}\n","html":"<link href=\"https://netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\" rel=\"stylesheet\">\n\n<figure class=\"highcharts-figure\">\n    <div id=\"container\">\n        <div id=\"loading\">\n            <i class=\"fa fa-spinner fa-spin\"></i> Loading data from external source\n        </div>\n    </div>\n    <p class=\"highcharts-description\">\n        Chart showing meteorological data. This is an advanced example of using\n        Highcharts to load data from an external API, and displaying the data\n        using several custom visuals. The chart loads the data from a weather\n        forecast website. After the data is parsed, the chart is generated, then\n        the icons are added. In the end, the wind arrows are displayed.\n    </p>\n</figure>\n\n<!--\n<div style=\"width: 800px; margin: 0 auto\">\n    <a href=\"#http://www.yr.no/place/United_Kingdom/England/London/forecast_hour_by_hour.xml\">London</a>,\n    <a href=\"#http://www.yr.no/place/France/Rhône-Alpes/Val_d\\'Isère~2971074/forecast_hour_by_hour.xml\">Val d'Isère</a>,\n    <a href=\"#http://www.yr.no/place/United_States/California/San_Francisco/forecast_hour_by_hour.xml\">San Francisco</a>,\n    <a href=\"#http://www.yr.no/place/Norway/Vik/Vikafjell/forecast_hour_by_hour.xml\">Vikjafjellet</a>\n</div>\n-->","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts      from 'highcharts';\nimport Windbarb        from 'highcharts/modules/windbarb';\nimport PatternFill     from 'highcharts/modules/pattern-fill';\nimport Data            from 'highcharts/modules/data';\nimport Exporting       from 'highcharts/modules/exporting';\nimport Accessibility   from 'highcharts/modules/accessibility';\nimport HighchartsZh_CN from 'https://code.hcharts.cn/plugins/highcharts-zh_CN.js';\n\n// 初始化模块\nWindbarb(Highcharts);\nPatternFill(Highcharts);\nData(Highcharts);\nExporting(Highcharts);\nAccessibility(Highcharts);\nHighchartsZh_CN(Highcharts);\n","scripts":["https://code.hcharts.cn/10.3.2/highcharts.js","https://code.hcharts.cn/10.3.2/modules/windbarb.js","https://code.hcharts.cn/10.3.2/modules/pattern-fill.js","https://code.hcharts.cn/10.3.2/modules/data.js","https://code.hcharts.cn/10.3.2/modules/exporting.js","https://code.hcharts.cn/10.3.2/modules/accessibility.js","https://code.hcharts.cn/plugins/highcharts-zh_CN.js"]}