{"js":"const drilldown = async function (e) {\n    if (!e.seriesOptions) {\n        const chart = this,\n            mapKey = `countries/us/${e.point.drilldown}-all`;\n\n        // Handle error, the timeout is cleared on success\n        let fail = setTimeout(() => {\n            if (!Highcharts.maps[mapKey]) {\n                chart.showLoading(`\n                    <i class=\"icon-frown\"></i>\n                    Failed loading ${e.point.name}\n                `);\n                fail = setTimeout(() => {\n                    chart.hideLoading();\n                }, 1000);\n            }\n        }, 3000);\n\n        // Show the Font Awesome spinner\n        chart.showLoading('<i class=\"icon-spinner icon-spin icon-3x\"></i>');\n\n        // Load the drilldown map\n        const topology = await fetch(\n            `https://code.highcharts.com/mapdata/${mapKey}.topo.json`\n        ).then(response => response.json());\n\n        const data = Highcharts.geojson(topology);\n\n        // Set a non-random bogus value\n        data.forEach((d, i) => {\n            d.value = i;\n        });\n\n        // Apply the recommended map view if any\n        chart.mapView.update(\n            Highcharts.merge(\n                {\n                    insets: undefined,\n                    padding: 0\n                },\n                topology.objects.default['hc-recommended-mapview']\n            )\n        );\n\n        // Hide loading and add series\n        chart.hideLoading();\n        clearTimeout(fail);\n        chart.addSeriesAsDrilldown(e.point, {\n            name: e.point.name,\n            data,\n            dataLabels: {\n                enabled: true,\n                format: '{point.name}'\n            }\n        });\n    }\n};\n\n// On drill up, reset to the top-level map view\nconst afterDrillUp = function (e) {\n    if (e.seriesOptions.custom && e.seriesOptions.custom.mapView) {\n        e.target.mapView.update(\n            Highcharts.merge(\n                { insets: undefined },\n                e.seriesOptions.custom.mapView\n            ),\n            false\n        );\n    }\n};\n\n(async () => {\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/countries/us/us-all.topo.json'\n    ).then(response => response.json());\n\n    const data = Highcharts.geojson(topology);\n\n    const mapView = topology.objects.default['hc-recommended-mapview'];\n\n    // Set drilldown pointers\n    data.forEach((d, i) => {\n        d.drilldown = d.properties['hc-key'];\n        d.value = i; // Non-random bogus data\n    });\n\n    // Instantiate the map\n    Highcharts.mapChart('container', {\n        chart: {\n            events: {\n                drilldown,\n                afterDrillUp\n            }\n        },\n\n        title: {\n            text: 'Highcharts Map Drilldown'\n        },\n\n        colorAxis: {\n            min: 0,\n            minColor: '#E6E7E8',\n            maxColor: '#005645'\n        },\n\n        mapView,\n\n        mapNavigation: {\n            enabled: true,\n            buttonOptions: {\n                verticalAlign: 'bottom'\n            }\n        },\n\n        plotOptions: {\n            map: {\n                states: {\n                    hover: {\n                        color: '#EEDD66'\n                    }\n                }\n            }\n        },\n\n        series: [{\n            data,\n            name: 'USA',\n            dataLabels: {\n                enabled: true,\n                format: '{point.properties.postal-code}'\n            },\n            custom: {\n                mapView\n            }\n        }],\n\n        drilldown: {\n            activeDataLabelStyle: {\n                color: '#FFFFFF',\n                textDecoration: 'none',\n                textOutline: '1px #000000'\n            },\n            breadcrumbs: {\n                floating: true,\n                relativeTo: 'spacingBox'\n            },\n            drillUpButton: {\n                relativeTo: 'spacingBox',\n                position: {\n                    x: 0,\n                    y: 60\n                }\n            }\n        }\n    });\n\n})();","css":"#container {\n    height: 500px;\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n","html":"Check clicking on a state to drill down.","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \n\n// 初始化模块\n","scripts":[]}