{"js":"(async () => {\n\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/custom/world.topo.json'\n    ).then(response => response.json());\n    const geojson = Highcharts.topo2geo(topology);\n\n    const data = await fetch(\n        'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/world-population-density.json'\n    ).then(response => response.json());\n\n    const multiPointGeometry = {\n        type: 'MultiPoint',\n        coordinates: [\n            // Alaska west\n            [-164, 54],\n            // Greenland north\n            [-35, 84],\n            // New Zealand east\n            [179, -38],\n            // Chile south\n            [-68, -55]\n        ]\n    };\n\n    const polygonGeometry = {\n        type: 'Polygon',\n        coordinates: [\n            [\n                // Africa\n                [-17, 32],\n                [51, 32],\n                [51, -30],\n                [-17, -30],\n                [-17, 32]\n            ]\n        ]\n    };\n\n    // Find the geometry for one specific feature\n    const countryGeometry = geojson.features.find(f =>\n        f.properties.name === 'Brazil'\n    ).geometry;\n\n    // Combine the geometries of multiple features into one, so that we can fit\n    // the map to a region\n    const regionGeometry = geojson.features\n        .filter(f =>\n            ['Oman', 'Saudi Arabia', 'Yemen'].includes(f.properties.name)\n        )\n        .reduce((combined, f) => {\n            const geometry = f.geometry;\n            if (geometry.type === 'Polygon') {\n                combined.coordinates.push(geometry.coordinates);\n            } else if (geometry.type === 'MultiPolygon') {\n                combined.coordinates.push.apply(\n                    combined.coordinates,\n                    geometry.coordinates\n                );\n            }\n            return combined;\n        }, {\n            type: 'MultiPolygon',\n            coordinates: []\n        });\n\n\n    // Initialize the chart\n    const chart = Highcharts.mapChart('container', {\n\n        chart: {\n            plotBorderWidth: 1\n        },\n\n        title: {\n            text: 'Fit to geometry'\n        },\n\n        legend: {\n            enabled: false\n        },\n\n        colorAxis: {\n            min: 1,\n            max: 1000,\n            minColor: '#a6d7ff',\n            maxColor: '#0b407b',\n            type: 'logarithmic'\n        },\n\n        mapView: {\n            fitToGeometry: multiPointGeometry,\n            padding: 15\n        },\n\n        series: [{\n            data,\n            mapData: geojson,\n            joinBy: ['iso-a2', 'code'],\n            name: 'Population density',\n            tooltip: {\n                valueSuffix: '/km²'\n            },\n            borderWidth: 0\n        }, {\n            type: 'mappoint',\n            id: 'preview',\n            keys: ['lon', 'lat'],\n            marker: {\n                radius: 5,\n                fillColor: '#ffffff',\n                lineWidth: 2,\n                lineColor: '#000000'\n            },\n            data: multiPointGeometry.coordinates\n        }]\n\n\n    });\n\n    document.getElementById('multipoint').addEventListener('click', () => {\n        chart.mapView.update({ fitToGeometry: multiPointGeometry });\n        const preview = chart.get('preview');\n        if (preview) {\n            preview.remove();\n        }\n        chart.addSeries({\n            type: 'mappoint',\n            id: 'preview',\n            keys: ['lon', 'lat'],\n            marker: {\n                radius: 5,\n                symbol: 'circle',\n                fillColor: '#ffffff',\n                lineWidth: 2,\n                lineColor: '#000000'\n            },\n            data: multiPointGeometry.coordinates\n        });\n    });\n\n    document.getElementById('polygon').addEventListener('click', () => {\n        chart.mapView.update({ fitToGeometry: polygonGeometry });\n        const preview = chart.get('preview');\n        if (preview) {\n            preview.remove();\n        }\n        chart.addSeries({\n            type: 'mapline',\n            id: 'preview',\n            data: [{ geometry: polygonGeometry }],\n            dashStyle: 'dash',\n            lineWidth: 2,\n            animation: false,\n            color: '#039'\n        });\n    });\n\n    document.getElementById('country').addEventListener('click', () => {\n        chart.mapView.update({ fitToGeometry: countryGeometry });\n        const preview = chart.get('preview');\n        if (preview) {\n            preview.remove();\n        }\n    });\n\n    document.getElementById('region').addEventListener('click', () => {\n        chart.mapView.update({ fitToGeometry: regionGeometry });\n        const preview = chart.get('preview');\n        if (preview) {\n            preview.remove();\n        }\n    });\n\n    document.getElementById('none').addEventListener('click', () => {\n        chart.mapView.update({ fitToGeometry: undefined });\n        const preview = chart.get('preview');\n        if (preview) {\n            preview.remove();\n        }\n    });\n})();","css":".highcharts-figure {\n    min-width: 360px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n#container {\n    width: 500px;\n    height: 400px;\n    margin: 0 auto;\n}\n\n.loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n\n.highcharts-description {\n    margin-top: 1rem;\n}\n","html":"\n\n<figure class=\"highcharts-figure\">\n    <div id=\"container\"></div>\n\n    <button id=\"multipoint\">Fit to MultiPoint</button>\n    <button id=\"polygon\">Fit to Polygon</button>\n    <button id=\"country\">Fit to Brazil</button>\n    <button id=\"region\">Fit to Arabia</button>\n    <button id=\"none\">None</button>\n\n    <div class=\"highcharts-description\">\n        <p>When the map view is fitted to a <code>MultiPoint</code> geometry, it\n        makes sure that those points are within the view. When fitted to a\n        <code>Polygon</code> geometry, the <a\n        href=\"https://en.wikipedia.org/wiki/Geodesic\">geodesic</a>\n        between the points in the polygon is fitted within the view.</p>\n\n        <p>The Brazil and Arabia buttons demonstrate how extract the geometries\n        from the source map and fit to one shape or multiple shapes\n        respectively.</p>\n    </div>\n</figure>\n","npm":"// 安装\nnpm install highcharts@11.0.0 --save\n\n// import 模块 \nimport Highcharts from 'highcharts/highmaps';\n\n// 初始化模块\n","scripts":["https://code.highcharts.com/maps/11.0.0/highmaps.js"]}