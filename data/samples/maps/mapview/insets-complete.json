{"js":"(async () => {\n    const topology = await fetch(\n        'https://code.highcharts.com/mapdata/countries/us/us-all.topo.json'\n    ).then(response => response.json());\n\n    // Create a data value for each geometry\n    const data = topology.objects.default.geometries.map((f, i) => i % 5);\n\n    // For the sake of this demo, delete the recommended insets. Note that this\n    // is just for the sake of demonstrating how to build a complete custom\n    // inset configuration. In most cases it is better extending an existing\n    // one. The settings used in this demo are the same as the built-in\n    // recommended options for USA.\n    if (topology.objects.default['hc-recommended-mapview']) {\n        delete topology.objects.default['hc-recommended-mapview'].insets;\n    }\n\n    // Initialize the chart\n    Highcharts.mapChart('container', {\n        chart: {\n            map: topology\n        },\n\n        title: {\n            text: 'MapView insets'\n        },\n\n        mapNavigation: {\n            enabled: true\n        },\n\n        mapView: {\n            insets: [{\n                id: 'us-alaska',\n                borderPath: {\n                    type: 'MultiLineString',\n                    coordinates: [\n                        [\n                            [0, 60],\n                            [25, 80],\n                            [25, 100]\n                        ]\n                    ]\n                },\n\n                field: {\n                    type: 'Polygon',\n                    coordinates: [\n                        [\n                            [0, 60],\n                            [25, 80],\n                            [25, 100],\n                            [0, 100]\n                        ]\n                    ]\n                },\n\n                geoBounds: {\n                    type: 'Polygon',\n                    coordinates: [\n                        [\n                            [-179.5, 50],\n                            [-129, 50],\n                            [-129, 72],\n                            [-179.5, 72]\n                        ]\n                    ]\n                },\n\n                padding: ['30%', '5%', 0, 0],\n\n                projection: {\n                    name: 'LambertConformalConic',\n                    parallels: [55, 65],\n                    rotation: [154]\n                }\n\n            }, {\n                id: 'us-hawaii',\n                borderPath: {\n                    type: 'LineString',\n                    coordinates: [\n                        [\n                            [25, 80],\n                            [40, 92]\n                        ]\n                    ]\n                },\n                field: {\n                    type: 'Polygon',\n                    coordinates: [\n                        [\n                            [25, 80],\n                            [40, 92],\n                            [40, 100],\n                            [25, 100]\n                        ]\n                    ]\n                },\n                geoBounds: {\n                    type: 'Polygon',\n                    coordinates: [\n                        [\n                            [-162, 23],\n                            [-152, 23],\n                            [-152, 18],\n                            [-162, 18]\n                        ]\n                    ]\n                },\n                padding: ['30%', '20%', 0, '10%'],\n                projection: {\n                    name: 'LambertConformalConic',\n                    parallels: [8, 18],\n                    rotation: [157]\n                }\n            }]\n        },\n\n        colorAxis: {\n            tickPixelInterval: 100,\n            minColor: '#F1EEF6',\n            maxColor: '#900037'\n        },\n\n        series: [{\n            data,\n            joinBy: null,\n            name: 'Random data',\n            dataLabels: {\n                enabled: true,\n                format: '{point.properties.postal-code}'\n            }\n        }]\n    });\n})();\n","css":"#container {\n    height: 500px;\n    min-width: 310px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.loading {\n    margin-top: 10em;\n    text-align: center;\n    color: gray;\n}\n","html":"\n<div id=\"container\"></div>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts       from 'highcharts/highmaps';\nimport Exporting        from 'highcharts/modules/exporting';\nimport OfflineExporting from 'highcharts/modules/offline-exporting';\n\n// 初始化模块\nExporting(Highcharts);\nOfflineExporting(Highcharts);\n","scripts":["https://code.highcharts.com/maps/11.0.1/highmaps.js","https://code.highcharts.com/maps/11.0.1/modules/exporting.js","https://code.highcharts.com/maps/11.0.1/modules/offline-exporting.js"]}