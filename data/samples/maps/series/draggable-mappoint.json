{"js":"const getGraticule = () => {\n    const data = [];\n\n    // Meridians\n    for (let x = -180; x <= 180; x += 15) {\n        data.push({\n            geometry: {\n                type: 'LineString',\n                coordinates: x % 90 === 0 ? [\n                    [x, -90],\n                    [x, 0],\n                    [x, 90]\n                ] : [\n                    [x, -80],\n                    [x, 80]\n                ]\n            }\n        });\n    }\n\n    // Latitudes\n    for (let y = -90; y <= 90; y += 10) {\n        const coordinates = [];\n        for (let x = -180; x <= 180; x += 5) {\n            coordinates.push([x, y]);\n        }\n        data.push({\n            geometry: {\n                type: 'LineString',\n                coordinates\n            },\n            lineWidth: y === 0 ? 2 : undefined\n        });\n    }\n    return data;\n};\n\nHighcharts.getJSON(\n    'https://code.highcharts.com/mapdata/custom/world.topo.json',\n    topology => {\n\n        const chart = Highcharts.mapChart('container', {\n            chart: {\n                map: topology,\n                events: {\n                    load: function () {\n                        const chart = this;\n\n                        // initialize custom labels\n                        chart.customLonText = chart.renderer.text(\n                            `Longitude:\n                            ${chart.series[2].points[0].lon.toFixed(3)}`,\n                            0, 450)\n                            .css({\n                                fontSize: '14px'\n                            })\n                            .add();\n\n                        chart.customLatText = chart.renderer.text(\n                            `Latitude:\n                            ${chart.series[2].points[0].lat.toFixed(3)}`,\n                            0, 470)\n                            .css({\n                                fontSize: '14px'\n                            })\n                            .add();\n                    },\n                    render: function () {\n                        const chart = this;\n\n                        // set new values from draggable point\n                        chart.customLonText.attr({\n                            text: `Longitude:\n                            ${chart.series[2].points[0].lon.toFixed(3)}`\n                        });\n                        chart.customLatText.attr({\n                            text: `Latitude:\n                            ${chart.series[2].points[0].lat.toFixed(3)}`\n                        });\n                    }\n                }\n            },\n\n            title: {\n                text: 'Draggable Map Point',\n                align: 'left'\n            },\n\n            subtitle: {\n                text: 'Click and drag the marker to change the map point position <br> Click and drag anywhere else to rotate globe<br>',\n                align: 'left'\n            },\n\n            legend: {\n                enabled: false\n            },\n\n            mapNavigation: {\n                enabled: true,\n                enableDoubleClickZoomTo: true\n            },\n\n            mapView: {\n                maxZoom: 30,\n                projection: {\n                    name: 'Orthographic',\n                    rotation: [0, -20]\n                }\n            },\n\n            tooltip: {\n                enabled: false\n            },\n\n            plotOptions: {\n                series: {\n                    animation: {\n                        duration: 750\n                    },\n                    clip: false,\n                    states: {\n                        inactive: {\n                            enabled: false\n                        }\n                    }\n                }\n            },\n\n            series: [{\n                name: 'Graticule',\n                id: 'graticule',\n                type: 'mapline',\n                data: getGraticule(),\n                nullColor: 'rgba(0, 0, 0, 0.05)',\n                accessibility: {\n                    enabled: false\n                },\n                enableMouseTracking: false\n            }, {\n                name: 'Countries',\n                nullColor: '#aec584',\n                borderColor: '#66a758',\n                dataLabels: {\n                    enabled: false\n                },\n                accessibility: {\n                    enabled: false\n                }\n            }, {\n                name: 'Draggable Points',\n                type: 'mappoint',\n                color: '#fbd304',\n                marker: {\n                    radius: 10,\n                    lineWidth: 1,\n                    lineColor: '#564801',\n                    symbol: 'mapmarker'\n                },\n                dragDrop: {\n                    draggableX: true,\n                    draggableY: true\n                },\n                data: [{\n                    lat: 20,\n                    lon: 0\n                }]\n            }]\n        });\n\n        // Render a circle filled with a radial gradient behind the globe to\n        // make it appear as the sea around the continents\n        const renderSea = () => {\n            let verb = 'animate';\n            if (!chart.sea) {\n                chart.sea = chart.renderer\n                    .circle()\n                    .attr({\n                        fill: {\n                            radialGradient: {\n                                cx: 0.4,\n                                cy: 0.4,\n                                r: 1\n                            },\n                            stops: [\n                                [0, 'white'],\n                                [1, 'lightblue']\n                            ]\n                        },\n                        zIndex: -1\n                    })\n                    .add(chart.get('graticule').group);\n                verb = 'attr';\n            }\n\n            const bounds = chart.get('graticule').bounds,\n                p1 = chart.mapView.projectedUnitsToPixels({\n                    x: bounds.x1,\n                    y: bounds.y1\n                }),\n                p2 = chart.mapView.projectedUnitsToPixels({\n                    x: bounds.x2,\n                    y: bounds.y2\n                });\n            chart.sea[verb]({\n                cx: (p1.x + p2.x) / 2,\n                cy: (p1.y + p2.y) / 2,\n                r: Math.min(p2.x - p1.x, p1.y - p2.y) / 2\n            });\n        };\n        renderSea();\n        Highcharts.addEvent(chart, 'redraw', renderSea);\n    }\n);\n","css":".highcharts-figure {\n    min-width: 360px;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n#container {\n    height: 500px;\n}\n","html":"\n<figure class=\"highcharts-figure\">\n    <div id=\"container\"></div>\n    <p class=\"highcharts-description\">\n        Map showing how a Draggable Points module works in Highcharts Maps.\n    </p>\n</figure>\n","npm":"// 安装\nnpm install highcharts@11.0.1 --save\n\n// import 模块 \nimport Highcharts      from 'highcharts/highmaps';\nimport DraggablePoints from 'highcharts/modules/draggable-points';\nimport Data            from 'highcharts/modules/data';\nimport Exporting       from 'highcharts/modules/exporting';\nimport Accessibility   from 'highcharts/modules/accessibility';\n\n// 初始化模块\nDraggablePoints(Highcharts);\nData(Highcharts);\nExporting(Highcharts);\nAccessibility(Highcharts);\n","scripts":["https://code.highcharts.com/maps/11.0.1/highmaps.js","https://code.highcharts.com/11.0.1/modules/draggable-points.js","https://code.highcharts.com/maps/11.0.1/modules/data.js","https://code.highcharts.com/maps/11.0.1/modules/exporting.js","https://code.highcharts.com/maps/11.0.1/modules/accessibility.js"]}