{"js":"var seriesOptions = [],\n    seriesCounter = 0,\n    names = ['MSFT', 'AAPL', 'GOOG'];\n\n/**\n * Create the chart when all data is loaded\n */\nfunction createChart() {\n\n    Highcharts.stockChart('container', {\n        title: {\n            text: 'Series compare by <em>percent</em>'\n        },\n        subtitle: {\n            text: 'Compare the values of the series against the first value in the visible range'\n        },\n\n        rangeSelector: {\n            buttons: [{\n                type: 'ytd',\n                count: 1,\n                text: 'YTD'\n            }, {\n                type: 'all',\n                text: 'All'\n            }],\n            selected: 0\n        },\n\n        yAxis: {\n            labels: {\n                format: '{value} %'\n            },\n            plotLines: [{\n                value: 100,\n                width: 1,\n                color: '#333333',\n                zIndex: 3\n            }]\n        },\n\n        plotOptions: {\n            series: {\n                compare: 'percent',\n                compareStart: true\n            }\n        },\n\n        tooltip: {\n            pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.change}%)<br/>',\n            changeDecimals: 2,\n            valueDecimals: 2\n        },\n\n        series: seriesOptions\n    });\n}\n\nfunction success(data) {\n    var name = this.url.match(/(msft|aapl|goog)/)[0].toUpperCase();\n    var i = names.indexOf(name);\n    seriesOptions[i] = {\n        name: name,\n        data: data\n    };\n\n    // As we're loading the data asynchronously, we don't know what order it\n    // will arrive. So we keep a counter and create the chart when all the data is loaded.\n    seriesCounter += 1;\n\n    if (seriesCounter === names.length) {\n        createChart();\n    }\n}\n\nHighcharts.getJSON(\n    'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/msft-c.json',\n    success\n);\nHighcharts.getJSON(\n    'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/aapl-c.json',\n    success\n);\nHighcharts.getJSON(\n    'https://cdn.jsdelivr.net/gh/highcharts/highcharts@v7.0.0/samples/data/goog-c.json',\n    success\n);","css":"#container {\n    height: 400px;\n    min-width: 600px;\n}\n","html":"<div id=\"container\"></div>\n\n","npm":"// 安装\nnpm install highcharts@10.3.2 --save\n\n// import 模块 \nimport Highcharts from 'highcharts/highstock';\nimport Data       from 'highcharts/modules/data';\nimport Exporting  from 'highcharts/modules/exporting';\nimport Zh_cn      from 'https://code.hcharts.cn/plugins/zh_cn.js';\n\n// 初始化模块\nData(Highcharts);\nExporting(Highcharts);\nZh_cn(Highcharts);\n","scripts":["https://code.hcharts.cn/stock/10.3.2/highstock.js","https://code.hcharts.cn/stock/10.3.2/modules/data.js","https://code.hcharts.cn/stock/10.3.2/modules/exporting.js","https://code.hcharts.cn/plugins/zh_cn.js"]}